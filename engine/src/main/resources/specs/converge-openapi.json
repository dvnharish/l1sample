{
    "openapi": "3.0.0",
    "info": {
      "description": "# Introduction  \nBefore starting your integration, you must request a Converge demo account from Elavonâ€™s Software Technical Support or Internet Product Support Group. The demo account provides the environment for integration development, certification, and future user acceptance testing (UAT).  \n\nTo request a Converge demo account, contact Elavon Internet Product Support Group.  \n\nPhone: 1-800-377-3962 | Option 2 | Option 2\n\n# Authentication\n\nThe Converge API uses no auth as an authentication method. Your credentials are sent in the request body using content type x-www-form-urlencoded.  \n\nYour Converge credentials include: \n- Account ID (ssl_account_id)\n- User ID (ssl_user_id) \n- Converge PIN (ssl_pin)  \n\nYour credentials must be kept secure! Elavon strongly recommends passing and storing Converge credentials through server-side code instead of client-side code. Always submit data to Converge through Hyper Text Transfer Protocol Secure (HTTPS) using the POST method.\n",
      "version": "1.0.0",
      "title": "Converge",
      "termsOfService": "https://developer.elavon.com/terms-and-conditions",
      "contact": {
        "name": "API Support",
        "email": "#SEDevPortalSupport@elavon.com"
      }
    },
    "tags": [
      {
        "name": "Request Session Token",
        "description": "**A session token is required for:** \n- [Hosted Payment Page](/products/hosted-payment-page/v1/take-a-payment) \n- [Lightbox](/products/lightbox-payment-modal/v1/take-a-payment)  \n- [Checkout.js](/products/checkout-js/v1/take-a-payment)   \n\nA session token is a unique identifier that is generated and used to manage user sessions and maintain stateful communication between client and server. \n"
      },
      {
        "name": "Redirect to Payment Page",
        "description": "Your credentials must be kept secure! Elavon strongly recommends passing and storing Converge credentials through server-side code instead of client-side code. See HTML and PHP request samples.  Always submit data to Converge through Hyper Text Transfer Protocol Secure (HTTPS) using the POST method.\n"
      },
      {
        "name": "Show Lightbox Modal",
        "description": "Your credentials must be kept secure! Elavon strongly recommends passing and storing Converge credentials through server-side code instead of client-side code. See HTML and PHP request samples.  Always submit data to Converge through Hyper Text Transfer Protocol Secure (HTTPS) using the POST method.\n"
      },
      {
        "name": "Checkout.js Transaction Request",
        "description": "Your credentials must be kept secure! Elavon strongly recommends passing and storing Converge credentials through server-side code instead of client-side code. See HTML and PHP request samples.  Always submit data to Converge through Hyper Text Transfer Protocol Secure (HTTPS) using the POST method.\n"
      },
      {
        "name": "Process Transaction Online",
        "description": "XML supports content type application/x-www-form-urlencoded where the XML-formatted request is assigned to a single value.   \n"
      },
      {
        "name": "Non-Elavon Certified Device",
        "description": "This section is for use with partners who want to integrate with their own PIN pad device. For in-person payment integrations with an Elavon device, please use [CommerceSDK](/products/commerce-sdk/v1).\n"
      },
      {
        "name": "Batch Processing",
        "description": "Every batch import HTTP request must include the enctype attribute of multipart/form-data, a properly formatted CSV or XML batch file along with the individual key value pairs formatted file. \n"
      }
    ],
    "x-tagGroups": [
      {
        "name": "Session Token",
        "tags": [
          "Request Session Token"
        ]
      },
      {
        "name": "Hosted Payment Page",
        "tags": [
          "Redirect to Payment Page"
        ]
      },
      {
        "name": "Lightbox Modal",
        "tags": [
          "Show Lightbox Modal"
        ]
      },
      {
        "name": "Checkout.js",
        "tags": [
          "Checkout.js Transaction Request"
        ]
      },
      {
        "name": "XML API",
        "tags": [
          "Process Transaction Online",
          "Non-Elavon Certified Device",
          "Batch Processing",
          "Terminal Management"
        ]
      }
    ],
    "paths": {
      "/hosted-payments/transaction_token": {
        "post": {
          "tags": [
            "Request Session Token"
          ],
          "summary": "Session Token",
          "operationId": "session-token",
          "servers": [
            {
              "url": "https://api.demo.convergepay.com",
              "description": "Demo"
            },
            {
              "url": "https://api.convergepay.com",
              "description": "Production"
            }
          ],
          "description": "The session token response is only valid for 15 minutes and can only be used once.",
          "responses": {
            "200": {
              "description": "Successful Operation"
            },
            "400": {
              "description": "Bad Request - Check for syntax errors or missing parameters"
            },
            "401": {
              "description": "Unauthorized - Invalid authentication credentials"
            },
            "403": {
              "description": "Forbidden - Check IP address has been whitelisted and you have permission to perform the request"
            },
            "404": {
              "description": "Not Found - The requested item is not found"
            },
            "5XX": {
              "description": "Server Error - Converge is experiencing an issue"
            }
          },
          "x-codeSamples": [
            {
              "lang": "cURL",
              "source": "curl --request POST 'https://api.demo.convergepay.com/hosted-payments/transaction_token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data 'ssl_transaction_type=ccsale' \\\n--data 'ssl_account_id=my_account_id' \\\n--data 'ssl_user_id=my_user_id' \\\n--data 'ssl_pin=my_pin' \\\n--data 'ssl_vendor_id=my_vendor_id' \\\n--data 'ssl_amount=1.00' \\\n--data 'ssl_add_token=Y' \\\n--data 'ssl_get_token=Y'   \n"
            }
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Session"
          }
        }
      },
      "/hosted-payments": {
        "post": {
          "tags": [
            "Redirect to Payment Page"
          ],
          "summary": "HPP Redirect",
          "operationId": "hpp",
          "servers": [
            {
              "url": "https://api.demo.convergepay.com",
              "description": "Demo"
            },
            {
              "url": "https://api.convergepay.com",
              "description": "Production"
            }
          ],
          "description": "The session token response is only valid for 15 minutes and can only be used once.\n\n**Important:** Make sure to URL encode the session token so that the special characters and symbols such as + and & are encoded properly. Failure to URL encode will result in a 401 error message.\n",
          "responses": {
            "200": {
              "description": "Successful Operation"
            },
            "400": {
              "description": "Bad Request - Check for syntax errors or missing parameters"
            },
            "401": {
              "description": "Unauthorized - Invalid authentication credentials"
            },
            "403": {
              "description": "Forbidden - Check IP address has been whitelisted and you have permission to perform the request"
            },
            "404": {
              "description": "Not Found - The requested item is not found"
            },
            "5XX": {
              "description": "Server Error - Converge is experiencing an issue"
            }
          },
          "x-codeSamples": [
            {
              "lang": "HTML",
              "source": "<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n  <title>Hosted Payment Page Demo</title>\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n  <script>\n    function initiateHPP () {\n      var tokenRequest = {\n        ssl_amount: document.getElementById('ssl_amount').value\n      };\n      $.post(\"RequestSample.php\", tokenRequest, function( data ) {\n        document.getElementById('ssl_txn_auth_token').value = data;\n        transactionToken = data;\n      });\n\n      return false;\n    }\n  </script>\n</head>\n\n<body>\n<form name=\"getSessionTokenForm\">\n  <p>\n    Transaction Amount: <input type=\"text\" id=\"ssl_amount\" name=\"ssl_amount\" value=\"100.00\">\n  </p>\n  <p>\n    <button onclick=\"return initiateHPP();\">Initiate Session</button>\n  </p>\n</form>\n    <p></p>\n<form action=\"https://api.demo.convergepay.com/hosted-payments/\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\">\n\n  <table border=\"1\" width=\"40%\" bordercolorlight=\"#C0C0C0\" cellspacing=\"1\" bordercolordark=\"#FFFFFF\">\n    <tr>\n      <td colspan=\"2\"><b><font face=\"Arial Narrow\">Redirect Cardholder to Converge Next Gen HPP - DEMO</font></b></td>\n    </tr>\n    <tr>\n      <td><font face=\"Arial Narrow\">One Time Session Token</font></td>\n      <td><font face=\"Arial Narrow\">\n      <input id=\"ssl_txn_auth_token\" type=\"text\" name=\"ssl_txn_auth_token\" size=\"25\"></font></td>\n    </tr>\n    <tr>\n      <td colspan=\"2\">\n      <p align=\"center\">\n      <font face=\"Arial Narrow\">\n      <input type=\"submit\" value=\"Redirect Cardholder to Converge\" name=\"Submit\"></font></td>\n    </tr>\n  </table>\n</form>\n</body>\n</html>\n"
            },
            {
              "lang": "PHP",
              "source": "<?php\n\n$merchantID = \"XXXXXX\"; //Virtual Merchant Account ID\n$merchantUserID = \"apiuser12334\"; //Virtual Merchant  User ID\n$merchantPinCode = \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"; //Converge PIN\n$vendorID = \"XXXXXX\"; //Vendor ID\n\n$url = \"https://api.demo.convergepay.com/hosted-payments/transaction_token\"; // URL to Converge demo session token server\n//$url = \"https://api.convergepay.com/hosted-payments/transaction_token\"; // URL to Converge production session token server\n\n// Read the following querystring variables\n\n$amount= $_POST['ssl_amount']; //Post Tran Amount\n\n\n$ch = curl_init();    // initialize curl handle\ncurl_setopt($ch, CURLOPT_URL,$url); // set url to post to\ncurl_setopt($ch, CURLOPT_POST, true); // set POST method\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n// Set up the post fields. If you want to add custom fields, you would add them in Converge, and add the field name in the curlopt_postfields string.\ncurl_setopt($ch, CURLOPT_POSTFIELDS,\n\"ssl_merchant_id=$merchantID\".\n\"&ssl_user_id=$merchantUserID\".\n\"&ssl_pin=$merchantPinCode\".\n\"&ssl_vendor_id=$vendorID\".\n// \"&ssl_first_name=Samuel\". //You can pass in values from your application and they will appear and pre-populate the HPP form\n// \"&ssl_avs_address=7301 Chapman Hwy\". //You can pass in values from your application and they will appear and pre-populate the HPP form\n// \"&ssl_avs_zip=37920\". //You can pass in values from your application and they will appear and pre-populate the HPP form\n\"&ssl_invoice_number=Inv123\". \n//\"&ssl_next_payment_date=03/03/2023\". //used only if transaction type is ccrecurring\n//\"&ssl_billing_cycle=MONTHLY\".  //used only if transaction type is ccrecurring\n\"&ssl_transaction_type=ccsale\".\n\"&ssl_verify=N\". //set to 'Y'if transaction type is ccgettoken, otherwise not needed\n\"&ssl_get_token=Y\". //pass with 'Y' if you wish to tokenize the card as part of a ccsale, do not send if transaction type set to ccgettoken\n\"&ssl_add_token=Y\". // should always be Y if using card manager and either transaction type is set to 'Y' or if ssl_get_token is set to 'Y'.\n\"&ssl_amount=$amount\" //do not pass amount if using ccgettoken as the transaction type\n);\n\n\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_VERBOSE, true);\n\n$result = curl_exec($ch); // run the curl process\ncurl_close($ch); // Close cURL\n\necho $result;  //shows the session token. \n\n?>\n"
            }
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/HPP"
          }
        }
      },
      "/hosted-payments/PayWithConverge.js": {
        "post": {
          "tags": [
            "Show Lightbox Modal"
          ],
          "summary": "Lightbox Modal",
          "operationId": "lightbox",
          "servers": [
            {
              "url": "https://api.demo.convergepay.com",
              "description": "Demo"
            },
            {
              "url": "https://api.convergepay.com",
              "description": "Production"
            }
          ],
          "description": "Fields may be sent in the session token or transaction request. The session token response is only valid for 15 minutes and can only be used once.",
          "responses": {
            "200": {
              "description": "Successful Operation"
            },
            "400": {
              "description": "Bad Request - Check for syntax errors or missing parameters"
            },
            "401": {
              "description": "Unauthorized - Invalid authentication credentials"
            },
            "403": {
              "description": "Forbidden - Check IP address has been whitelisted and you have permission to perform the request"
            },
            "404": {
              "description": "Not Found - The requested item is not found"
            },
            "5XX": {
              "description": "Server Error - Converge is experiencing an issue"
            }
          },
          "x-codeSamples": [
            {
              "lang": "HTML",
              "source": "<html>\n  <head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n    <title>Lightbox Demo</title>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\n    <script src=\"https://demo.convergepay.com/hosted-payments/PayWithConverge.js\"></script>\n    <script>\n      function initiateLightbox() {\n        var tokenRequest = {\n          ssl_first_name: document.getElementById('name').value,\n          ssl_last_name: document.getElementById('lastname').value,\n          ssl_amount: document.getElementById('ssl_amount').value\n        };\n        $.post(\"RequestSample.php\", tokenRequest, function (data) {\n          document.getElementById('token').value = data;\n          transactionToken = data;\n        });\n        return false;\n      }\n      function showResult(status, msg) {\n        document.getElementById('txn_status').innerHTML = \"<b>\" + status + \"</b>\";\n        document.getElementById('txn_response').innerHTML = msg;\n      }\n      function openLightbox() {\n        var paymentFields = {\n          ssl_txn_auth_token: document.getElementById(\"token\").value\n        };\n        var callback = {\n            onError: function (error) {\n              showResult(\"error\", error);\n            },\n            onCancelled: function () {\n              showResult(\"cancelled\", \"\");\n            },\n            onDeclined: function (response) {\n              showResult(\"declined\", JSON.stringify(response, null, '\\t'));\n            },\n            onApproval: function (response) {\n              showResult(\"approval\", JSON.stringify(response, null, '\\t'));\n            }\n        };\n        PayWithConverge.open(paymentFields, callback);\n        return false;\n      }\n      function showResult(status, msg) {\n        document.getElementById('txn_status').innerHTML = \"<b>\" + status + \"</b>\";\n        document.getElementById('txn_response').innerHTML = msg;\n      }\n    </script>\n  </head>\n\n  <body>\n    <form name=\"getSessionTokenForm\">\n      <br><br><br><br>      \n      First Name: <input type=\"text\" id=\"name\" name=\"ssl_first_name\" size=\"25\" value=\"John\"> <br><br>\n      Last Name: <input type=\"text\" id=\"lastname\" name=\"ssl_last_name\" size=\"25\" value=\"Smith\"> <br>\n      Transaction Amount: <input type=\"text\" id=\"ssl_amount\" name=\"ssl_amount\" value=\"100.00\"> <br> <br>\n      <button onclick=\"return initiateLightbox();\">Click to Confirm Order</button> <br>\n    </form>\n    <br><br>\n    Transaction Token: <input id=\"token\" type=\"text\" name=\"token\"> <br />\n    <button onclick=\"return openLightbox();\">Proceed to Payment</button> <br>\n  \n    <br><br><br><br>\n    Transaction Status:<div id=\"txn_status\"></div>\n    <br>\n    Transaction Response:<div id=\"txn_response\"></div>\n  </body>\n</html>\n"
            },
            {
              "lang": "PHP",
              "source": "<?php\n\n  // Set variables\n  $accountID = \"xxxxxx\"; //Converge 6 or 7-Digit Account ID *Not the 10-Digit Elavon Merchant ID*\n  $UserID = \"convergeapi\"; //Converge User ID *MUST FLAG AS HOSTED API USER IN CONVERGE UI*\n  $PIN = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"; //Converge PIN (64 CHAR A/N)\n\n  $url = \"https://api.demo.convergepay.com/hosted-payments/transaction_token\"; // URL to Converge demo session token server\n  //$url = \"https://api.convergepay.com/hosted-payments/transaction_token\"; // URL to Converge production session token server\n\n\n  /*Payment Field Variables*/\n  // In this section, we set variables to be captured by the PHP file and passed to Converge in the curl request.\n  $firstname=$_POST['ssl_first_name']; //Post first name\n  $lastname=$_POST['ssl_last_name']; //Post first name\n  $amount= $_POST['ssl_amount']; //Post Tran Amount\n  //$merchanttxnid = $_POST['ssl_merchant_txn_id']; //Capture user-defined ssl_merchant_txn_id as POST data\n  //$invoicenumber = $_POST['ssl_invoice_number']; //Capture user-defined ssl_invoice_number as POST data\n\n  //Follow the above pattern to add additional fields to be sent in curl request below.\n  $ch = curl_init();    // initialize curl handle\n  curl_setopt($ch, CURLOPT_URL,$url); // set url to post to\n  curl_setopt($ch,CURLOPT_POST, true); // set POST method\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  // Set up the post fields. If you want to add custom fields, you would add them in Converge, and add the field name in the curlopt_postfields string.\n  curl_setopt($ch,CURLOPT_POSTFIELDS,\n  \"ssl_account_id=$accountID\".\n  \"&ssl_user_id=$UserID\".\n  \"&ssl_pin=$PIN\".\n  \"&ssl_transaction_type=CCSALE\".\n  \"&ssl_amount=$amount\"\n  // \"&ssl_first_name=$firstname\".\n  // \"&ssl_last_name=$lastname\".\n  // \"&ssl_get_token=Y\".\n  // \"&ssl_add_token=Y\".\n  );\n\n  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n  curl_setopt($ch, CURLOPT_VERBOSE, true);\n\n  $sessiontoken = curl_exec($ch); // run the curl process\n  curl_close($ch); // Close cURL\n\n  echo $sessiontoken;  //shows the session token.\n?>\n"
            }
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Lightbox"
          }
        }
      },
      "/hosted-payments/Checkout.js": {
        "post": {
          "tags": [
            "Checkout.js Transaction Request"
          ],
          "summary": "Process Transaction",
          "operationId": "checkout",
          "servers": [
            {
              "url": "https://api.demo.convergepay.com",
              "description": "Demo"
            },
            {
              "url": "https://api.convergepay.com",
              "description": "Production"
            }
          ],
          "description": "Fields may be sent in the session token or transaction request. The session token response is only valid for 15 minutes and can only be used once.",
          "responses": {
            "200": {
              "description": "Successful Operation"
            },
            "400": {
              "description": "Bad Request - Check for syntax errors or missing parameters"
            },
            "401": {
              "description": "Unauthorized - Invalid authentication credentials"
            },
            "403": {
              "description": "Forbidden - Check IP address has been whitelisted and you have permission to perform the request"
            },
            "404": {
              "description": "Not Found - The requested item is not found"
            },
            "5XX": {
              "description": "Server Error - Converge is experiencing an issue"
            }
          },
          "x-codeSamples": [
            {
              "lang": "Credit Card",
              "source": "<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n  <title>Checkout.js Credit Card Demo</title>\n  <script src=\"https://api.demo.convergepay.com/hosted-payments/Checkout.js\"></script>\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\n  <script>\n    function initiateCheckoutJS() {\n      var tokenRequest = {\n        ssl_amount: document.getElementById('ssl_amount').value\n      };\n      $.post(\"RequestSample.php\", tokenRequest, function (data) {\n        document.getElementById('token').value = data;\n        transactionToken = data;\n      });\n      return false;\n    }\n\n    function pay() {\n      var token = document.getElementById('token').value;\n      var card = document.getElementById('card').value;\n      var exp = document.getElementById('exp').value;\n      var cvv = document.getElementById('cvv').value;\n      var gettoken = document.getElementById('gettoken').value;\n      var addtoken = document.getElementById('addtoken').value;\n      var invoice = document.getElementById('invoice').value;\n      var firstname = document.getElementById('name').value;\n      var lastname = document.getElementById('lastname').value;\n      var address1 = document.getElementById('address1').value;\n      var address2 = document.getElementById('address2').value;\n      var city = document.getElementById('city').value;\n      var state = document.getElementById('state').value;\n      var zip = document.getElementById('zip').value;\n      var paymentData = {\n        ssl_txn_auth_token: token,\n        ssl_card_number: card,\n        ssl_exp_date: exp,\n        ssl_get_token: gettoken,\n        ssl_add_token: addtoken,\n        ssl_invoice_number: invoice,\n        ssl_first_name: firstname,\n        ssl_last_name: lastname,\n        ssl_cvv2cvc2: cvv,\n        ssl_avs_address: address1,\n        ssl_address2: address2,\n        ssl_city: city,\n        ssl_state: state,\n        ssl_avs_zip: zip\n      };\n      var callback = {\n        onError: function (error) {\n          showResult(\"error\", error);\n        },\n        onDeclined: function (response) {\n          console.log(\"Result Message=\" + response['ssl_result_message']);\n          showResult(\"declined\", JSON.stringify(response));\n        },\n        onApproval: function (response) {\n          console.log(\"Approval Code=\" + response['ssl_approval_code']);\n          showResult(\"approval\", JSON.stringify(response));\n        }\n      };\n      ConvergeEmbeddedPayment.pay(paymentData, callback);\n      return false;\n    }\n\n    function showResult(status, msg) {\n      document.getElementById('txn_status').innerHTML = \"<b>\" + status + \"</b>\";\n      document.getElementById('txn_response').innerHTML = msg;\n    }\n  </script>\n</head>\n\n<body>\n  <br>\n  First Name: <input type=\"text\" id=\"name\" name=\"ssl_first_name\" size=\"25\"> <br>\n  Last Name: <input type=\"text\" id=\"lastname\" name=\"ssl_last_name\" size=\"25\"> <br>\n  Address 1: <input type=\"text\" id=\"address1\" name=\"ssl_avs_address\" size=\"30\"> <br>\n  Address 2: <input type=\"text\" id=\"address2\" name=\"ssl_address2\" size=\"30\"> <br>\n  City: <input type=\"text\" id=\"city\" name=\"ssl_city\" size=\"30\" value=\"Atlanta\"> <br>\n  State: <input type=\"text\" id=\"state\" name=\"ssl_state\" size=\"2\" value=\"GA\"> <br>\n  Zip: <input type=\"text\" id=\"zip\" name=\"ssl_avs_zip\" size=\"25\" value=\"30003\"> <br><br>\n  Transaction Amount: <input type=\"text\" id=\"ssl_amount\" name=\"ssl_amount\" value=\"25.00\"> <br> \n  <button onclick=\"return initiateCheckoutJS();\">Click to Confirm Order</button> <br> \n  <br>\n  <br>\n  <br>\n  Session Token: <input id=\"token\" type=\"text\" name=\"token\"> <br>\n  Card Number: <input id=\"card\" type=\"text\" name=\"card\" value=\"4124939999999990\" /> <br>\n  Expiry Date: <input id=\"exp\" type=\"text\" name=\"exp\" value=\"1230\"> <br>\n  CVV2: <input id=\"cvv\" type=\"text\" name=\"cvv\" value=\"123\"> <br>\n  <input id=\"gettoken\" type=\"hidden\" name=\"gettoken\" value=\"y\">\n  <input id=\"addtoken\" type=\"hidden\" name=\"addtoken\" value=\"y\">\n  <input id=\"invoice\" type=\"hidden\" name=\"invoice\" value=\"INV123\">\n  <button onclick=\"return pay();\">Process Payment</button>\n  <br>\n  <br>\n  <br>\n  Transaction Status:<div id=\"txn_status\"></div>\n  <br>\n  Transaction Response:<div id=\"txn_response\"></div>\n</body>\n</html>\n"
            },
            {
              "lang": "ACH",
              "source": "<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n  <title>Checkout.js ACH Demo</title>\n  <script src=\"https://api.demo.convergepay.com/hosted-payments/Checkout.js\"></script>\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\n  <script>\n    function initiateCheckoutJS() {\n      var tokenRequest = {\n        ssl_amount: document.getElementById('ssl_amount').value\n      };\n      $.post(\"RequestSample.php\", tokenRequest, function (data) {\n        document.getElementById('token').value = data;\n        transactionToken = data;\n      });\n      return false;\n    }\n\n    function pay() {\n      var token = document.getElementById('token').value;\n      var firstname = document.getElementById('name').value;\n      var lastname = document.getElementById('lastname').value;\n      var routing = document.getElementById('routing').value;\n      var account = document.getElementById('account').value;\n      var type = document.getElementById('type').value;\n      var agree = document.getElementById('agree').value;\n      var paymentData = {\n        ssl_txn_auth_token: token,\n        ssl_first_name: firstname,\n        ssl_last_name: lastname,\n        ssl_aba_number: routing,\n        ssl_bank_account_number: account,\n        ssl_bank_account_type: type,\n        ssl_agree: agree\n      };\n      var callback = {\n        onError: function (error) {\n          showResult(\"error\", error);\n        },\n        onDeclined: function (response) {\n          console.log(\"Result Message=\" + response['ssl_result_message']);\n          showResult(\"declined\", JSON.stringify(response));\n        },\n        onApproval: function (response) {\n          console.log(\"Approval Code=\" + response['ssl_approval_code']);\n          showResult(\"approval\", JSON.stringify(response));\n        }\n      };\n      ConvergeEmbeddedPayment.pay(paymentData, callback);\n      return false;\n    }\n\n    function showResult(status, msg) {\n      document.getElementById('txn_status').innerHTML = \"<b>\" + status + \"</b>\";\n      document.getElementById('txn_response').innerHTML = msg;\n    }\n  </script>\n</head>\n\n<body>\n  <br>\n\n  Transaction Amount: <input type=\"text\" id=\"ssl_amount\" name=\"ssl_amount\" value=\"25.00\"> <br> \n  <button onclick=\"return initiateCheckoutJS();\">Click to Confirm Order</button> <br> \n  <br>\n  <br>\n  <br>\n  Session Token: <input id=\"token\" type=\"text\" name=\"token\"> <br>\n  First Name: <input type=\"text\" id=\"name\" name=\"name\" size=\"25\"> <br>\n  Last Name: <input type=\"text\" id=\"lastname\" name=\"lastname\" size=\"25\"> <br>\n  Routing Number: <input id=\"routing\" type=\"text\" name=\"routing\" value=\"490000018\"> <br>\n  Bank Account Number: <input id=\"account\" type=\"text\" name=\"account\" value=\"12345678\"> <br>\n  Agree: <input id=\"agree\" type=\"checkbox\" name=\"agree\" value=\"1\"> <br>\n  <input id=\"type\" type=\"hidden\" name=\"type\" value=\"0\"> <br>\n  <input id=\"gettoken\" type=\"hidden\" name=\"gettoken\" value=\"y\">\n  <input id=\"addtoken\" type=\"hidden\" name=\"addtoken\" value=\"y\">\n  <button onclick=\"return pay();\">Process Payment</button>\n  <br>\n  <br>\n  <br>\n  Transaction Status:<div id=\"txn_status\"></div>\n  <br>\n  Transaction Response:<div id=\"txn_response\"></div>\n</body>\n</html>\n"
            },
            {
              "lang": "Apple Pay",
              "source": "<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n  <title>Checkout.js Apple Pay Demo</title>\n  <style>\n    .apple-pay-button {\n      -webkit-appearance: -apple-pay-button;\n      -apple-pay-button-type: buy;\n      display: inline-block;\n      width: 100px;\n      min-height: 30px;\n      border: 1px solid black;\n      background-image: -webkit-named-image(apple-pay-logo-black);\n      background-size: 100% calc(60% + 2px);\n      background-repeat: no-repeat;\n      background-color: white;\n      background-position: 50% 50%;\n      border-radius: 5px;\n      padding: 0px;\n      margin: 5px auto;\n      transition: background-color .15s;\n      cursor: pointer;\n    }\n  </style>\n  <script src=\"https://api.demo.convergepay.com/hosted-payments/Checkout.js\"></script>\n\n  <script>\n    var callback = {\n      onError: function (error) {\n        showResult(\"error\", error);\n      },\n      onDeclined: function (response) {\n        showResult(\"declined\", JSON.stringify(response));\n      },\n      onApproval: function (response) {\n        showResult(\"approval\", JSON.stringify(response));\n      },\n      onCancelled: function () {\n        showResult(\"cancelled\", \"\");\n      }\n    };\n\n    function initiateEwallets () {\n      var paymentData = {\n        ssl_txn_auth_token: document.getElementById('token').value\n      };\n      ConvergeEmbeddedPayment.initApplePay('applepay-button', paymentData, callback);\n      return false;\n    }\n\n    function showResult (status, msg, hash) {\n      document.getElementById('txn_status').innerHTML = \"<b>\" + status + \"</b>\";\n      document.getElementById('txn_response').innerHTML = msg + \"</b>\";\n      document.getElementById('txn_hash').innerHTML = hash;\n    }\n\n    function confirmSurcharge() {\n      var agree = $(\"#agreeToSurcharge\").is(\":checked\");\n      if(agree){\n        var callback = {\n          onError: function (error) {\n            showResult(\"error\", error);\n          },\n          onDeclined: function (response) {\n            showResult(\"declined\", JSON.stringify(response));\n          },\n          onApproval: function (response) {\n            showResult(\"approval\", JSON.stringify(response));\n          },\n          onCancelled: function () {\n            showResult(\"cancelled\", \"\");\n          },\n          onSurcharge: function(response) {\n            showResult(\"Surchange Approval\", JSON.stringify(response));\n          }\n        };\n        ConvergeEmbeddedPayment.creditSurchargeDecision(true, callback);\n      }\n    }\n  </script>\n</head>\n\n<body>\n  <form>\n    Session Token: <input type=\"text\" id=\"token\" name=\"token\"> <br>\n    <button onclick=\"return initiateEwallets();\">Initiate Checkout.js</button> <br>\n  </form>\n  <br>\n  <div id=\"sc_button\" style=\"display:none\">\n    <input type=\"checkbox\" id=\"agreeToSurcharge\" name=\"agreeToSurcharge\" value=\"agreeToSurcharge\">\n    <label for=\"agreeToSurcharge\">Agree to Surcharge ?</label>\n    </p>\n    <button id=\"scbutton\" onclick=\"return confirmSurcharge();\">Confirm surchange</button>\n  </div>\n  <br>\n  <div id=\"applepay-button\" class=\"apple-pay-button\"></div>\n  <br>\n  Transaction Status:<div id=\"txn_status\"></div>\n  <br>\n  Transaction Response:<div id=\"txn_response\"></div>\n  <br>\n  Transaction Hash Value:<div id=\"txn_hash\"></div>\n</body>\n</html>\n"
            },
            {
              "lang": "DCC",
              "source": "<html>\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n<title>Checkout.js DCC Demo</title>\n<script src=\"https://api.demo.convergepay.com/hosted-payments/Checkout.js\"></script>\n<script>\n      var callback = {\n        onError: function (error) {\n          showResult(\"error\", error);\n        },\n        onDeclined: function (response) {\n          showResult(\"declined\", JSON.stringify(response));\n        },\n        onApproval: function (response) {\n          showResult(\"approval\", JSON.stringify(response));\n        },\n        onDCCDecision: function (response) {\n          document.getElementById('ssl_conversion_rate').value = response.ssl_conversion_rate;\n          showResult(\"DCC decision\", JSON.stringify(response));\n        }\n      };\n      function showResult (status, msg) {\n        document.getElementById('txn_status').innerHTML = \"<b>\" + status + \"</b>\";\n        document.getElementById('txn_response').innerHTML = msg;\n      }\n      function pay () {\n        var token = document.getElementById('token').value;\n        var card = document.getElementById('card').value;\n        var exp = document.getElementById('exp').value;\n        var cvv = document.getElementById('cvv').value;\n        var paymentData = {\n            ssl_txn_auth_token: token,\n            ssl_card_number: card,\n            ssl_exp_date: exp,\n            ssl_cvv2cvc2: cvv\n          };\n        ConvergeEmbeddedPayment.pay(paymentData, callback);\n        return false;\n      }\n      function dcc (option) {\n        ConvergeEmbeddedPayment.dccDecision(option, callback);\n        return false;\n      }\n</script>\n\n</head>\n<body>\n  <form id=\"firstForm\">\n    Transaction Token: <input id=\"token\" type=\"text\" name=\"token\"> <br/>\n    Card Number: <input id=\"card\" type=\"text\" name=\"card\" value=\"****************\"> <br/>\n    Expiry Date: <input id=\"exp\" type=\"text\" name=\"exp\" value=\"1220\"> <br/>\n    CVV2: <input id=\"cvv\" type=\"text\" name=\"cvv\" value=\"123\"> <br/>\n  <button onclick=\"return pay();\">Pay</button>\n  </form>\n    <br>\n    <form id=\"secondForm\">\n      Converion Rate: <input id=\"ssl_conversion_rate\" type=\"text\"> <br/>\n      <button onclick=\"return dcc(true);\">Yes</button><br>\n      <button onclick=\"return dcc(false);\">No</button><br>\n    </form>\n  <br>\n        Transaction Status:<div id=\"txn_status\"></div>\n  <br>\n        Transaction Response:<div id=\"txn_response\"></div>\n</body>\n</html>\n"
            },
            {
              "lang": "Google Pay",
              "source": "<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n  <title>Checkout.js Google Pay Demo</title>\n  <script src=\"https://demo.convergepay.com/hosted-payments/Checkout.js\"></script>\n  <script>\n    var callback = {\n      onError: function (error) {\n        showResult(\"error\", error);\n      },\n      onDeclined: function (response) {\n        showResult(\"declined\", JSON.stringify(response));\n      },\n      onApproval: function (response) {\n        showResult(\"approval\", JSON.stringify(response));\n      },\n      onCancelled: function () {\n        showResult(\"cancelled\", \"\");\n      },\n      onEwalletCvv: function (response) {\n        if (response.ssl_ewallet_cvv){\n                  //card number and expire date were returned back, cvv need to be collected from card holder and then process 3DS2 workflow\n                  var cardNumber = response.ssl_card_number;\n                  var expireDate = response.ssl_exp_date;\n                  var cvv = {need collect from card holder}\n                  //then process three DS 2 workflow\n      },\n      onEwalletThreeDS2: function (response) {\n        if (response.ssl_ewallet_threeds2){\n                  //card number and expire date were returned back, then process 3DS2 workflow\n                  var cardNumber = response.ssl_card_number;\n                  var expireDate = response.ssl_exp_date;\n                  //then process three DS 2 workflow}             \n     }\n    };\n\n    function initiateEwallets() {\n      var paymentData = {\n        ssl_txn_auth_token: document.getElementById('token').value\n      };\n      ConvergeEmbeddedPayment.initGooglePay('googlepay-button', paymentData, callback);\n      return false;\n    }\n\n    function showResult(status, msg, hash) {\n      document.getElementById('txn_status').innerHTML = \"<b>\" + status + \"</b>\";\n      document.getElementById('txn_response').innerHTML = msg + \"</b>\";\n      document.getElementById('txn_hash').innerHTML = hash;\n    }\n  </script>\n</head>\n\n<body>\n  <form>\n    Transaction Token: <input type=\"text\" id=\"token\" name=\"token\"> <br>\n    <button onclick=\"return initiateEwallets();\">Initiate Checkout.js</button> <br>\n  </form>\n  <br>\n  <br /><br />\n  <div id=\"googlepay-button\"></div>\n  <br>\n  Transaction Status:<div id=\"txn_status\"></div>\n  <br>\n  Transaction Response:<div id=\"txn_response\"></div>\n  <br>\n  Transaction Hash Value:<div id=\"txn_hash\"></div>\n</body>\n</html>\n"
            },
            {
              "lang": "PayPal",
              "source": "<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n  <title>Checkout.js PayPal Demo</title>\n  <script src=\"https://api.demo.convergepay.com/hosted-payments/Checkout.js\"></script>\n  <script>\n    var callback = {\n      onError: function (error) {\n        showResult(\"error\", error);\n      },\n      onDeclined: function (response) {\n        showResult(\"declined\", JSON.stringify(response));\n      },\n      onApproval: function (response) {\n        showResult(\"approval\", JSON.stringify(response));\n      },\n      onCancelled: function () {\n        showResult(\"cancelled\", \"\");\n      }\n    };\n\n    function initiatePayPal () {\n      var paymentFields = {\n        ssl_txn_auth_token: document.getElementById('transaction_session_token').value\n      };\n      ConvergeEmbeddedPayment.initPayPalCheckout('paypal-button', paymentFields, callback);\n      return false;\n    };\n\n    function showResult (status, msg) {\n      document.getElementById('txn_status').innerHTML = \"<b>\" + status + \"</b>\";\n      document.getElementById('txn_response').innerHTML = msg + \"</b>\";\n    };\n  </script>\n</head>\n\n<body>\n  <form>\n      Transaction Token: <input type=\"text\" id=\"transaction_session_token\"> <br><br>\n      <button onclick=\"return initiatePayPal();\">Initiate PayPal</button> <br>\n  </form>\n  <br>\n  <div id=\"paypal-button\"></div>\n  <br>\n  Transaction Status:<div id=\"txn_status\"></div>\n  <br>\n  Transaction Response:<div id=\"txn_response\"></div>\n</body>\n</html>\n"
            },
            {
              "lang": "Click to Pay",
              "source": "<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n  <title>Checkout.js Click to Pay Demo</title>\n  <script src=\"jquery.js\"></script>\n  <script src=\"https://api.demo.convergepay.com/hosted-payments/Checkout.js\"></script>\n  <script>\n    var transactionToken;\n    \n    var callback = {\n      onError: function (error) {\n        showResult(\"error\", error);\n      },\n      onDeclined: function (response) {\n        showResult(\"declined\", JSON.stringify(response));\n      },\n      onApproval: function (response) {\n        showResult(\"approval\", JSON.stringify(response));\n      },\n      onCancelled: function () {\n        showResult(\"cancelled\", \"\");\n      }\n    };\n      \n    function initiateCheckoutJS () {\n      var tokenRequest = {\n        ssl_account_id: $(\"#ssl_account_id\").val(),\n        ssl_user_id: $(\"#ssl_user_id\").val(),\n        ssl_pin: $(\"#ssl_pin\").val(),\n        ssl_transaction_type: $(\"#ssl_transaction_type\").val(),\n        ssl_amount: $(\"#ssl_amount\").val()\n      };\n      $.post(\"https://api.demo.convergepay.com/hosted-payments/hosted-payments/transaction_token\", tokenRequest, function( data ) {\n        $(\"#token\").html(data);\n        transactionToken = data;\n        initiateEwallets();\n      });\n      return false;\n    }\n    \n    function initiateEwallets () {\n      var paymentData = {\n        ssl_txn_auth_token: transactionToken,\n        ssl_callback_url: 'https://<your website>/checkout-js-merchantresponse.jsp?osessionId='+transactionToken\n      };\n      ConvergeEmbeddedPayment.initMasterPass('clicktopay-button', paymentData, callback);\n      return false;\n    }\n    \n    function showResult (status, msg, hash) {\n      document.getElementById('txn_status').innerHTML = \"<b>\" + status + \"</b>\";\n      document.getElementById('txn_response').innerHTML = msg + \"</b>\";\n      document.getElementById('txn_hash').innerHTML = hash;\n    }\n  </script>\n</head>\n\n<body>\n  <form name=\"getSessionTokenForm\">\n    Converge Account Number: <input type=\"text\" id=\"ssl_account_id\" name=\"ssl_account_id\" size=\"6\" value=\"000006\"> <br>\n    API User ID: <input type=\"text\" id=\"ssl_user_id\" name=\"ssl_user_id\" size=\"20\" value=\"jin_api\"> <br>\n    API User Terminal Identifier: <input type=\"text\" id=\"ssl_pin\" name=\"ssl_pin\" size=\"64\" value=\"E3NC2X8Y4H8LRZ48TREF0FN551WXKHJS8OUWJLV1RQO5JA755TPR6H5K5K9NFRQD\"> <br>\n    Transaction Type: <input type=\"text\" id=\"ssl_transaction_type\" name=\"ssl_transaction_type\" value=\"CCSALE\"> <br>\n    Transaction Amount: <input type=\"text\" id=\"ssl_amount\" name=\"ssl_amount\" value=\"1.00\"> <br> <br>\n    <button onclick=\"return initiateCheckoutJS();\">Initiate Checkout.js</button> <br>\n  </form>\n  <br>\n  Transaction Token: <span id=\"token\"></span> <br><br>\n  <br/><br/>\n  <div id=\"clicktopay-button\"></div>\n  <br>\n  Transaction Status:<div id=\"txn_status\"></div>\n  <br>\n  Transaction Response:<div id=\"txn_response\"></div>\n  <br>\n  Transaction Hash Value:<div id=\"txn_hash\"></div>\n</body> \n</html>\n"
            },
            {
              "lang": "Click to Pay Callback",
              "source": "<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n  <title>Checkout.js Click to Pay Response Demo</title>\n    <%\n      String osessionId = request.getParameter(\"osessionId\");\n      String oauth_verifier = request.getParameter(\"oauth_verifier\");\n      String mpstatus = request.getParameter(\"mpstatus\");\n      String cartId = request.getParameter(\"cartId\");\n    %>\n  <script src=\"jquery.js\"></script>\n  <script src=\"https://api.demo.convergepay.com/hosted-payments/Checkout.js\"></script>\n  <script>\n    var callback = {\n      onError: function (error) {\n        showResult(\"error\", error);\n      },\n      onDeclined: function (response) {\n        showResult(\"declined\", JSON.stringify(response));\n      },\n      onApproval: function (response) {\n        showResult(\"approval\", JSON.stringify(response));\n      },\n      onCancelled: function () {\n        showResult(\"cancelled\", \"\");\n      }\n    };  \n\n    function payByMasterpass7() {\n      var paymentData = {\n        osessionId: $(\"#osessionId\").val(),\n        oauth_verifier: $(\"#oauth_verifier\").val()\n      };\n      ConvergeEmbeddedPayment.payByMasterpass(paymentData, callback);\n      return false;\n    }\n    \n    function showResult (status, msg, hash) {\n      document.getElementById('txn_status').innerHTML = \"<b>\" + status + \"</b>\";\n      document.getElementById('txn_response').innerHTML = msg + \"</b>\";\n      document.getElementById('txn_hash').innerHTML = hash;\n    }\n\n    function confirmSurcharge() {\n      var callback = {\n        onError: function (error) {\n          showResult(\"error\", error);\n        },\n        onDeclined: function (response) {\n          showResult(\"declined\", JSON.stringify(response));\n        },\n        onApproval: function (response) {\n          showResult(\"approval\", JSON.stringify(response));\n        },\n        onCancelled: function () {\n          showResult(\"cancelled\", \"\");\n        },\n        onSurcharge: function(response) {\n          showResult(\"Surchange Approval\", JSON.stringify(response));\n        }\n      };\n      ConvergeEmbeddedPayment.creditSurchargeDecision(true, callback);\n    }\n  </script>\n  \n</head>\n<body onload=\"payByMasterpass7()\">\n  osessionId: <input type=\"text\" id=\"osessionId\" size=\"20\" value=\"<%=osessionId%>\"> <br>\n  oauth_verifier: <input type=\"text\" id=\"oauth_verifier\" size=\"20\" value=\"<%=oauth_verifier%>\"> <br>\n  mpstatus: <input type=\"text\" id=\"mpstatus\" size=\"20\" value=\"<%=mpstatus%>\"> <br>\n  <br>\n  <button id=\"sc_button\" style=\"display:none\" onclick=\"return confirmSurcharge();\">Confirm surchange</button>\n  <br>\n  Transaction Status:<div id=\"txn_status\"></div>\n  <br>\n  Transaction Response:<div id=\"txn_response\"></div>\n  <br>\n  Transaction Hash Value:<div id=\"txn_hash\"></div>\n</body>\n</html>\n"
            },
            {
              "lang": "Surcharge",
              "source": "<html>\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n  <title>Checkout.js Surcharge Demo</title>\n  <script src=\"https://code.jquery.com/jquery-3.5.1.js\"> </script>\n  <script src=\"https://demo.convergepay.com/hosted-payments/Checkout.js\"></script>\n  <script>\n    function initiateCheckoutJS() {\n      var tokenRequest = {};\n      $.post(\"RequestSample.php\", tokenRequest, function (data) {\n        document.getElementById('ssl_txn_auth_token').value = data;\n        transactionToken = data;\n      });\n      return false;\n    }\n    var callback = {\n      onError: function (error) {\n        showResult(\"error\", error);\n      },\n      onDeclined: function (response) {\n        //Transaction will run as regular sale if not elligable for Surcharge.\n        if (response.surchargeAllowed === 'Y') {\n          document.getElementById('creditSurchargeForm').style.display = \"block\";\n          showResult(\"credit surcharge\", JSON.stringify(response));\n        } else {\n          showResult(\"declined\", JSON.stringify(response));\n        }\n      },\n      onApproval: function (response) {\n        showResult(\"approval\", JSON.stringify(response));\n      },\n      onCancelled: function () {\n        showResult(\"cancelled\", \"\");\n      }\n    };\n    function payWithCreditCard() {\n      var paymentData = {\n        ssl_txn_auth_token: $('#ssl_txn_auth_token').val(),\n        ssl_card_number: $(\"#ssl_card_number\").val(),\n        ssl_exp_date: $(\"#ssl_exp_date\").val(),\n        ssl_cvv2cvc2: $(\"#ssl_cvv2cvc2\").val(),\n        ssl_amount: $(\"#ssl_amount\").val(),\n        ssl_avs_address: $(\"#ssl_avs_address\").val(),\n        ssl_avs_zip: $(\"#ssl_avs_zip\").val()\n      };\n      ConvergeEmbeddedPayment.pay(paymentData, callback);\n      return false;\n    }\n    function showResult(status, msg, hash) {\n      document.getElementById('txn_status').innerHTML = \"<b>\" + status + \"</b>\";\n      document.getElementById('txn_response').innerHTML = msg;\n      document.getElementById('txn_hash').innerHTML = hash;\n    }\n    function creditSurcharge(option) {\n      ConvergeEmbeddedPayment.creditSurchargeDecision(option, callback);\n      if(option === false){\n        showResult(\"Cancelled\", \"Cardholder declined agreement.\");\n      }\n      return false;\n    }\n  </script>\n</head>\n\n<body>\n  <br>\n  Transaction Token: <input type=\"text\" id=\"ssl_txn_auth_token\" name=\"ssl_txn_auth_token\" size=\"38\"><button\n    onclick=\"initiateCheckoutJS();\">Get Session Token</button><br><br>\n\n  <form name=\"creditCardForm\">\n    Amount: <input id=\"ssl_amount\" type=\"text\" name=\"ssl_amount\" size=\"10\" value=\"1.00\"> <br>\n    Card Number: <input id=\"ssl_card_number\" type=\"text\" name=\"ssl_card_number\" size=\"21\"> <br>\n    Expiry Date: <input id=\"ssl_exp_date\" type=\"text\" name=\"ssl_exp_date\" size=\"10\" value=\"1230\"> <br>\n    CVV2: <input id=\"ssl_cvv2cvc2\" type=\"text\" name=\"ssl_cvv2cvc2\" size=\"8\" value=\"123\"> <br>\n    AVS: <input id=\"ssl_avs_address\" type=\"text\" name=\"ssl_avs_address\" size=\"12\" value=\"1 Test St\"> <br>\n    AVS ZIP: <input id=\"ssl_avs_zip\" type=\"text\" name=\"ssl_avs_zip\" size=\"8\" value=\"36320\"> <br>\n    EMAIL: <input id=\"ssl_email>\" type=\"text\" name=\"ssl_email>\" size=\"25\" value=\"test@test.com\"> <br>\n    <button onclick=\"return payWithCreditCard();\">Pay With Credit Card</button>\n  </form>\n\n  <form name=\"creditSurchargeAccept\" id=\"creditSurchargeForm\" style=\"display:none\">\n    <P> Accept Credit Surcharge: <br>\n    <button onclick=\"return creditSurcharge(true);\">Yes</button>\n    <button onclick=\"return creditSurcharge(false);\">No</button>\n  </form>\n  <br>\n  <hr><br>\n  Transaction Status:<div id=\"txn_status\"></div>\n  <br>\n  Transaction Response:<div id=\"txn_response\"></div>\n  <br>\n  Transaction Hash Value:<div id=\"txn_hash\"></div>\n</body>\n</html>\n"
            },
            {
              "lang": "3D Secure2",
              "source": "<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n  <title>Checkout.js 3D Secure 2 Demo</title>\n\n  <script src=\"https://code.jquery.com/jquery-3.5.1.js\"\n    integrity=\"sha256-QWo7LDvxbWT2tbbQ97B53yJnYU3WhH/C8ycbRAkjPDc=\"\n    crossorigin=\"anonymous\">\n  </script>\n\n  <script>\n    var envs = {\n      DEMO: \"demo.convergepay.com\",\n      PROD: \"www.convergepay.com\"\n    };\n    function loadScript () {\n      var id = 'id_checkout_js';\n      var id_efs = 'id_efs_js';\n      var src = \"https://\" + envs[$(\"#env\").val()] + \"/hosted-payments/Checkout.js\"; \n      var srcEfs = \"\"; \n      if ($(\"#env\").val() === 'PROD'){\n        srcEfs = \"https://libs.fraud.elavongateway.com/sdk-web-js/1.2.0/3ds2-web-sdk.min.js\";\n      } \n      else {\n        srcEfs = \"https://uat.libs.fraud.eu.elavonaws.com/sdk-web-js/1.2.0/3ds2-web-sdk.min.js\";\n      }\n      delete window.ConvergeEmbeddedPayment;\n      $(\"#\" + id).remove();\n      $(\"#\" + id_efs).remove();\n      var script = document.createElement('script');\n      script.setAttribute('id', id);\n      script.setAttribute('src', src);\n      document.head.appendChild(script);\n      var script1 = document.createElement('script');\n      script1.setAttribute('id', id_efs);\n      script1.setAttribute('src', srcEfs);\n      document.head.appendChild(script1);\n    }\n    $( document ).ready(function() {\n        console.log( \"ready!\" );\n        loadScript();\n    });\n\n    var transactionToken;\n    var efsToken;\n\n    var callback = {\n      onError: function (error) {\n        showResult(\"error\", error);\n      },\n      onDeclined: function (response) {\n        showResult(\"declined\", JSON.stringify(response));\n      },\n      onApproval: function (response) {\n        showResult(\"approval\", JSON.stringify(response));\n      },\n      onCancelled: function () {\n          showResult(\"cancelled\", \"\");\n      },\n      onThreeDSecure2: function (response) {\n        console.log(\"3ds2 token response:\");\n        console.log(response);\n        if (response.ssl_3ds2_token){\n          efsToken = response.ssl_3ds2_token;\n          $(\"#efsToken\").html(efsToken);\n        } \n        else {\n          efsToken =\"\";\n          $(\"#efsToken\").html(\"Error\");\n        }\n      }\n    };\n\n    function initiateCheckoutJS () {\n      var tokenRequest = {\n        ssl_amount: $(\"#ssl_amount\").val()\n      };\n      $.post(\"RequestSample.php\", tokenRequest, function(data) {\n        $(\"#token\").html(data);\n        transactionToken = data;\n      });\n      return false;\n    }\n\n    function getEfsToken() {\n      var paymentData = {\n        ssl_txn_auth_token: transactionToken\n      };\n      ConvergeEmbeddedPayment.getEFSToken(paymentData, callback);\n      return false;\n    }\n\n    function payWithCreditCard () {\n      var paymentData = {\n        ssl_txn_auth_token: transactionToken,\n        ssl_card_number: $(\"#ssl_card_number\").val(),\n        ssl_exp_date: $(\"#ssl_exp_date\").val(),\n        ssl_cvv2cvc2: $(\"#ssl_cvv2cvc2\").val(),\n        ssl_program_protocol: $(\"#ssl_program_protocol\").val(),\n        ssl_dir_server_tran_id: $(\"#ssl_dir_server_tran_id\").val(),\n        ssl_eci_ind: $(\"#ssl_eci_ind\").val(),\n        ssl_3dsecure_value: $(\"#ssl_3dsecure_value\").val(),\n        ssl_3ds_message_version: $(\"#ssl_3ds_message_version\").val(),\n        ssl_3ds_trans_status: $(\"#ssl_3ds_trans_status\").val(),\n        ssl_3ds_trans_status_reason: $(\"#ssl_3ds_trans_status_reason\").val(),\n        ssl_3ds_server_trans_id: $(\"#ssl_3ds_server_trans_id\").val()\n      };\n      ConvergeEmbeddedPayment.pay(paymentData, callback);\n      return false;\n    }\n\n    function showResult (status, msg, hash) {\n      document.getElementById('txn_status').innerHTML = \"<b>\" + status + \"</b>\";\n      document.getElementById('txn_response').innerHTML = msg + \"</b>\";\n      document.getElementById('txn_hash').innerHTML = hash;\n    }\n\n    function getEFSExpiry () {\n      var expMM = $(\"#ssl_exp_date\").val().substring(0,2);\n      var expYY = $(\"#ssl_exp_date\").val().substring(2,4);\n      return expYY.concat(expMM);\n    };\n    function getEFSCardholderName () {\n          var firstName = $(\"#ssl_first_name\").val();\n          var lastName = $(\"#ssl_last_name\").val();\n          return firstName.concat(\" \", lastName).substring(45);\n    };\n    function getEFSEci(eci) {\n      if (eci === '01' || eci === '05'){\n        return '5';\n      } \n      else if (eci === '02' || eci === '06'){\n        return '6';\n      } \n      else {\n        return '7';\n      }\n    };\n\n    function handleAllInOne() {\n      if ($(\"#env\").val() == 'PROD'){\n        efsUrl = \"https://gw.fraud.elavongateway.com/3ds2\";\n      } \n      else {\n        efsUrl = \"https://uat.gw.fraud.eu.elavonaws.com/3ds2\"; \n      }\n      var sdk = new window.Elavon3DSWebSDK({ baseUrl : efsUrl, token : efsToken, el : 'holder' });\n      var request = {\n        //challengeIframeElement: document.getElementById('holder'),\n        purchaseAmount : $(\"#ssl_amount\").val()*100,\n        purchaseCurrency : \"840\",\n        purchaseExponent : \"2\",\n        //purchaseDate : \"20200429112659\",\n        acctNumber : $(\"#ssl_card_number\").val(),\n        cardExpiryDate : getEFSExpiry(),\n        cardholderName: getCardholderName(),\n        email:$(\"#ssl_email\").val(),\n        messageCategory : \"01\",\n        transType : \"01\",\n        threeDSRequestorAuthenticationInd : \"01\",\n        challengeWindowSize: \"03\",\n        clientStartProtocolVersion: \"2.1.0\",\n        clientEndProtocolVersion: \"2.2.0\",\n        displayMode: \"lightbox\"\n      };\n\n      sdk.web3dsFlow(request).then( function success(response) {\n        document.getElementById('ssl_eci_ind').value = getEFSEci(response.eci);\n        document.getElementById('ssl_program_protocol').value = 2;\n        if (response.authenticationValue) {\n          document.getElementById('ssl_3dsecure_value').value = response.authenticationValue;\n        }\n        if(response.dsTransID){\n          document.getElementById('ssl_dir_server_tran_id').value = response.dsTransID;\n        }\n        if(response.threeDSServerTransID){\n          document.getElementById('ssl_3ds_server_trans_id').value = response.threeDSServerTransID;\n        }\n        if(response.transStatus){\n          document.getElementById('ssl_3ds_trans_status').value = response.transStatus;\n        }\n        if(response.transStatusReason){\n          document.getElementById('ssl_3ds_trans_status_reason').value = response.transStatusReason;\n        }\n        if(response.messageVersion){\n          document.getElementById('ssl_3ds_message_version').value = response.messageVersion;\n        }     \n      }, \n      function error(response) {\n        console.log(\"Error \" + response);\n        document.getElementById('ssl_eci_ind').value = \"7\";\n      });\n    }\n  </script>\n</head>\n\n<body leftmargin=\"20\">\n  Environment:\n  <select id=\"env\" name=\"env\" onchange=\"loadScript()\">\n      <option value=\"DEMO\">DEMO</option>\n      <option value=\"PROD\">Production</option>\n  </select><br><br>\n  <h3>Step 1: Initiate Checkout</h3>\n  <form name=\"getSessionTokenForm\">\n      Transaction Amount: <input type=\"text\" id=\"ssl_amount\" name=\"ssl_amount\" value=\"1.00\"> <br> <br>\n      <button onclick=\"return initiateCheckoutJS();\">Initiate Checkout.js</button> <br>\n  </form>\n  <br>\n  Transaction Token: <span id=\"token\"></span><br><br>\n  <h3>Step 2: Get EFS Token</h3>\n  <button onclick=\"return getEfsToken();\">Get EFS Token</button><br><br>\n  EFS Token: <span id=\"efsToken\"></span><br><br>\n  <h3>Step 3: Process 3DS2</h3>\n  Card Number: <input id=\"ssl_card_number\" type=\"text\" name=\"ssl_card_number\" value=\"\"> <br/>\n  Expiry Date: <input id=\"ssl_exp_date\" type=\"text\" name=\"ssl_exp_date\" value=\"\"> <br/>\n  CVV2: <input id=\"ssl_cvv2cvc2\" type=\"text\" name=\"ssl_cvv2cvc2\" value=\"\"> <br/><br/>\n\n  <button onclick=\"handleAllInOne()\">Process 3DS2</button><br><br>\n\n  <form name=\"creditCardForm\">\n    Program protocol: <input id=\"ssl_program_protocol\" type=\"text\" name=\"ssl_program_protocol\" value=\"\" ><br/>\n    Dir Server: <input id=\"ssl_dir_server_tran_id\" type=\"text\" name=\"ssl_dir_server_tran_id\" value=\"\" ><br/>\n    Eci: <input id=\"ssl_eci_ind\" type=\"text\" name=\"ssl_eci_ind\" value=\"\" ><br/>\n    AuthenticationValue: <input id=\"ssl_3dsecure_value\" type=\"text\" name=\"ssl_3dsecure_value\" value=\"\" ><br/>\n    3DS Message_version: <input id=\"ssl_3ds_message_version\" name=\"ssl_3ds_message_version\" value=\"\"><br/>\n    3DS Trans_status: <input id=\"ssl_3ds_trans_status\" name=\"ssl_3ds_trans_status\" value=\"\"><br/>\n    3DS Trans_status_reason: <input id=\"ssl_3ds_trans_status_reason\"  name=\"ssl_3ds_trans_status_reason\" value=\"\"><br/>\n    3DS Server_trans_id: <input id=\"ssl_3ds_server_trans_id\" name=\"ssl_3ds_server_trans_id\" value=\"\"><br/>\n    <h3>Step 4: Process Payment</h3>\n    <button onclick=\"return payWithCreditCard();\">Pay With Credit Card</button> \n  </form>\n  <br/>\n  <br>\n  Status:<div id=\"txn_status\"></div>\n  <br>\n  Response:<div id=\"txn_response\"></div>\n  <br>\n  Hash Value:<div id=\"txn_hash\"></div>\n</body>\n</html>\n"
            },
            {
              "lang": "POS Lending",
              "source": "<html> \n<head> \n  <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"> \n  <title>Point-of-Sale Lending Demo</title> \n  <script src=\"https://api.demo.convergepay.com/hosted-payments/Checkout.js\"></script> \n  <script> \n    var callback = { \n      onError: function (error) { \n          showResult(\"error\", error); \n      }, \n      onDeclined: function (response) { \n        showResult(\"declined\", JSON.stringify(response)); \n      }, \n      onApproval: function (response) { \n        showResult(\"approval\", JSON.stringify(response)); \n      }, \n      onCancelled: function () { \n        showResult(\"cancelled\", \"\"); \n      } \n    }; \n    function initiatePOSL() { \n      var paymentData = { \n        ssl_txn_auth_token: document.getElementById('token').value \n      }; \n      ConvergeEmbeddedPayment.initPOSL('posl-button', paymentData, callback); \n      return false; \n    } \n    function showResult(status, msg, hash) { \n      document.getElementById('txn_status').innerHTML = \"<b>\" + status + \"</b>\"; \n      document.getElementById('txn_response').innerHTML = msg + \"</b>\"; \n      document.getElementById('txn_hash').innerHTML = hash; \n    } \n  </script> \n</head> \n\n<body> \n  <form> \n    Transaction Token: <input type=\"text\" id=\"token\" name=\"token\"> <br> \n    <button onclick=\"return initiatePOSL();\">Initiate Avvance</button> <br> \n  </form> \n  <br> \n  <br /><br /> \n    <div id=\"posl-button\"></div> \n  <br> \n\n  Transaction Status:<div id=\"txn_status\"></div> \n  <br> \n  Transaction Response:<div id=\"txn_response\"></div> \n  <br> \n  Transaction Hash Value:<div id=\"txn_hash\"></div> \n</body> \n</html> \n"
            },
            {
              "lang": "PHP",
              "source": "<?php\n\n// Credit Card Sale\n\n$accountID = \"xxxxxx\"; //Converge 6 or 7-Digit Account ID *Not the 10-Digit Elavon Merchant ID*\n$UserID = \"convergeapi\"; //Converge User ID *MUST FLAG AS HOSTED API USER IN CONVERGE UI*\n$PIN = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"; //Converge PIN (64 CHAR A/N)\n\n$url = \"https://api.demo.convergepay.com/hosted-payments/transaction_token\"; // URL to Converge demo session token server\n//$url = \"https://api.convergepay.com/hosted-payments/transaction_token\"; // URL to Converge production session token server\n\n\n// Read the following querystring variables\n\n$firstname=$_POST['ssl_first_name']; //Post first name\n$lastname=$_POST['ssl_last_name']; //Post last name\n$amount= $_POST['ssl_amount']; //Post Tran Amount\n\n\n$ch = curl_init();    // initialize curl handle\ncurl_setopt($ch, CURLOPT_URL,$url); // set url to post to\ncurl_setopt($ch,CURLOPT_POST, true); // set POST method\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n// Set up the post fields. If you want to add custom fields, you would add them in Converge, and add the field name in the curlopt_postfields string.\ncurl_setopt($ch,CURLOPT_POSTFIELDS,\n\"ssl_account_id=$accountID\".\n\"&ssl_user_id=$UserID\".\n\"&ssl_pin=$PIN\".\n\"&ssl_transaction_type=ccsale\".\n\"&ssl_first_name=$firstname\".\n\"&ssl_last_name=$lastname\".\n\"&ssl_get_token=Y\".\n\"&ssl_add_token=Y\".\n\"&ssl_amount=$amount\"\n);\n\n\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_VERBOSE, true);\n// curl_setopt($ch, CURLOPT_PROXY, \"http://your.proxy.server:port\"); // proxy server config\n\n$result = curl_exec($ch); // run the curl process\ncurl_close($ch); // Close cURL\n\necho $result;  //shows the session token.\n?>   \n"
            }
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Checkout"
          }
        }
      },
      "/processxml.do": {
        "post": {
          "tags": [
            "Process Transaction Online"
          ],
          "summary": "Transaction",
          "operationId": "process",
          "servers": [
            {
              "url": "https://api.demo.convergepay.com/VirtualMerchantDemo",
              "description": "Demo"
            },
            {
              "url": "https://api.convergepay.com/VirtualMerchant",
              "description": "Production"
            }
          ],
          "x-codeSamples": [
            {
              "lang": "cURL",
              "source": "curl -X POST 'https://api.demo.convergepay.com/VirtualMerchantDemo/processxml.do' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode \n'xmldata= \n<txn>\n  <ssl_transaction_type>ccsale</ssl_transaction_type>\n  <ssl_account_id>my_account_id</ssl_account_id>\n  <ssl_user_id>my_user_id</ssl_user_id>\n  <ssl_pin>my_pin</ssl_pin>\n  <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_cvv2cvc2>123</ssl_cvv2cvc2>\n  <ssl_amount>25.00</ssl_amount>\n  <ssl_avs_address>123 Main St</ssl_avs_address>\n  <ssl_avs_zip>12345</ssl_avs_zip>\n  <ssl_invoice_number>INV001</ssl_invoice_number>\n</txn>'\n"
            }
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/XMLProcessOnline"
          },
          "responses": {
            "200": {
              "description": "Successful Operation",
              "content": {
                "text/xml": {
                  "schema": {
                    "allOf": [
                      {
                        "properties": {
                          "Transaction Response": {
                            "$ref": "#/components/schemas/Transaction_Response"
                          },
                          "Transaction Query Response": {
                            "$ref": "#/components/schemas/TransactionQuery_Response"
                          },
                          "Token Response": {
                            "$ref": "#/components/schemas/Token_Response"
                          },
                          "Token Query Response": {
                            "$ref": "#/components/schemas/TokenQuery_Response"
                          },
                          "End of Day Summary Response": {
                            "$ref": "#/components/schemas/EODSummary_Response"
                          },
                          "Settlement Response": {
                            "$ref": "#/components/schemas/Settlement_Response"
                          },
                          "Settlement Query": {
                            "$ref": "#/components/schemas/Settlement_Query"
                          },
                          "Account Update Response": {
                            "$ref": "#/components/schemas/AccountUpdate_Response"
                          },
                          "Tip Response": {
                            "$ref": "#/components/schemas/Tip_Response"
                          },
                          "Address Verification Response": {
                            "$ref": "#/components/schemas/Address_Response"
                          },
                          "CVV Response": {
                            "$ref": "#/components/schemas/CVV_Response"
                          },
                          "DCC Response": {
                            "$ref": "#/components/schemas/DCC_Response"
                          },
                          "Partial Approval Response": {
                            "$ref": "#/components/schemas/PartialApproval_Response"
                          },
                          "Card on File Response": {
                            "$ref": "#/components/schemas/CardOnFile_Response"
                          },
                          "ACH Response": {
                            "$ref": "#/components/schemas/ACH_Response"
                          },
                          "Gift Card Response": {
                            "$ref": "#/components/schemas/GiftCard_Response"
                          },
                          "Bin Lookup Response": {
                            "$ref": "#/components/schemas/BinLookup_Response"
                          },
                          "Error Response": {
                            "$ref": "#/components/schemas/Error_Response"
                          }
                        }
                      }
                    ]
                  },
                  "examples": {
                    "CC_Sale": {
                      "summary": "Credit Card Sale",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_amount>1.00</ssl_amount>\n  <ssl_result>0</ssl_result>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_txn_id>my_txn_id</ssl_txn_id>\n  <ssl_approval_code>CMC142</ssl_approval_code>\n  <ssl_account_balance>1.00</ssl_account_balance>\n  <ssl_txn_time>10/20/2025 01:07:23 PM</ssl_txn_time>\n</txn>\n"
                    },
                    "CC_Sale_UseToken": {
                      "summary": "Credit Card Sale (using Token)",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_cit_mit_cof_indicator>M01</ssl_cit_mit_cof_indicator>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_last_name></ssl_last_name>\n  <ssl_company></ssl_company>\n  <ssl_phone></ssl_phone>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_departure_date></ssl_departure_date>\n  <ssl_merchant_txn_id></ssl_merchant_txn_id>\n  <ssl_oar_data>12345678998765008170000047554200000000000388956327020112608</ssl_oar_data>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>my_txn_id</ssl_txn_id>\n  <ssl_avs_response>Z</ssl_avs_response>\n  <ssl_approval_code>11116</ssl_approval_code>\n  <ssl_email></ssl_email>\n  <ssl_amount>1.50</ssl_amount>\n  <ssl_avs_zip>12345</ssl_avs_zip>\n  <ssl_txn_time>09/27/2030 04:08:17 PM</ssl_txn_time>\n  <ssl_description></ssl_description>\n  <ssl_vendor_id>Jim</ssl_vendor_id>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_completion_date></ssl_completion_date>\n  <ssl_address2></ssl_address2>\n  <ssl_token_response>SUCCESS</ssl_token_response>\n  <ssl_credit_surcharge_amount></ssl_credit_surcharge_amount>\n  <ssl_customer_code></ssl_customer_code>\n  <ssl_country></ssl_country>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_token_format>N</ssl_token_format>\n  <ssl_token_provider>V</ssl_token_provider>\n  <ssl_transaction_type>SALE</ssl_transaction_type>\n  <ssl_salestax></ssl_salestax>\n  <ssl_avs_address>123 Main St</ssl_avs_address>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_ps2000_data>my_ps2000_data</ssl_ps2000_data>\n  <ssl_state></ssl_state>\n  <ssl_city></ssl_city>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_first_name></ssl_first_name>\n  <ssl_invoice_number>INV001</ssl_invoice_number>\n  <ssl_cvv2_response></ssl_cvv2_response>\n  <ssl_token>my_token</ssl_token>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "CC_Sale_DCC": {
                      "summary": "Credit Card Sale (with DCC)",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <id>ekU9j0L0iFO9m9FELAqK8E6</id>\n  <ssl_txn_currency_code>EUR</ssl_txn_currency_code>\n  <ssl_markup>3.25</ssl_markup>\n  <ssl_conversion_rate>.76373</ssl_conversion_rate>\n  <ssl_amount>1.00</ssl_amount>\n  <ssl_cardholder_amount>0.76</ssl_cardholder_amount> \n  <dccoption>\n    <option label=\"Please charge my purchase in my home currency\">Y</option>\n    <option label=\"Do not charge me in my home currency. charge my purchase in US dollars\">N</option>\n  </dccoption>\n</txn>\n"
                    },
                    "CC_Sale_Token": {
                      "summary": "Credit Card Sale (with Token Generation)",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_approval_code>CVI194</ssl_approval_code>\n  <ssl_dynamic_dba/>21, 17, or 12 length>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_server />\n  <ssl_account_balance>12.00</ssl_account_balance>\n  <ssl_token>my_token</ssl_token>\n  <ssl_get_token>Y</ssl_get_token>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_token_response>SUCCESS</ssl_token_response>\n  <ssl_base_amount>12.00</ssl_base_amount>\n  <ssl_amount>12.00</ssl_amount>\n  <ssl_txn_id>my_txn_id</ssl_txn_id>\n  <ssl_result>0</ssl_result>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_txn_time>09/26/2025 02:50:56 PM</ssl_txn_time>\n  <ssl_avs_response>S</ssl_avs_response>\n  <ssl_cvv2_response>M</ssl_cvv2_response>\n</txn>\n"
                    },
                    "CC_AuthOnly": {
                      "summary": "Credit Card Auth Only",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_oar_data>010013241303160120280000047554200000000000939515407601132413</ssl_oar_data>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>150324C55-64845CF5-B028-4668-A49E-ABA438BA6080</ssl_txn_id>\n  <ssl_avs_response> </ssl_avs_response>\n  <ssl_approval_code>939515</ssl_approval_code>\n  <ssl_amount>1.00</ssl_amount>\n  <ssl_txn_time>03/15/2024 08:20:28 PM</ssl_txn_time>\n  <ssl_exp_date>1249</ssl_exp_date>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_completion_date/>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_customer_code/>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_transaction_type>AUTHONLY</ssl_transaction_type>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_ps2000_data>A7540760482850875100A</ssl_ps2000_data>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_invoice_number>INV001</ssl_invoice_number>\n  <ssl_cvv2_response>M</ssl_cvv2_response>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "CC_AuthOnly_Increment": {
                      "summary": "Credit Card Auth Only Increment",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_cit_mit_cof_indicator>M01</ssl_cit_mit_cof_indicator>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_oar_data>010011666503261414460000047554200000000000441837408614116665</ssl_oar_data>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>260324C55-C78DCBC9-9423-40FC-BE7D-7585ECD164C0</ssl_txn_id>\n  <ssl_avs_response> </ssl_avs_response>\n  <ssl_approval_code>441837</ssl_approval_code>\n  <ssl_amount>4.00</ssl_amount>\n  <ssl_txn_time>03/26/2024 10:15:46 AM</ssl_txn_time>\n  <ssl_exp_date>1249</ssl_exp_date>\n  <ssl_card_short_description/>\n  <ssl_completion_date/>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_customer_code/>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_transaction_type>AUTHONLY</ssl_transaction_type>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_ps2000_data>Y7540865128776755100A</ssl_ps2000_data>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_invoice_number/>\n  <ssl_cvv2_response/>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "CC_Verify": {
                      "summary": "Credit Card Verify",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_issuer_response>85</ssl_issuer_response>\n  <ssl_transaction_type>CARDVERIFICATION</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_oar_data>010001417004271858400427027344400000000000669325MCC244536</ssl_oar_data>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>270422A41-376C2756-F972-49EB-8BDD-A78F4C301F73</ssl_txn_id>\n  <ssl_brand_token_eligibility_indicator>1</ssl_brand_token_eligibility_indicator>\n  <ssl_avs_response>A</ssl_avs_response>\n  <ssl_approval_code>669325</ssl_approval_code>\n  <ssl_txn_time>04/27/2022 02:58:40 PM</ssl_txn_time>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_ps2000_data>MMCC244536      0427</ssl_ps2000_data>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_card_short_description>MC</ssl_card_short_description>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_cvv2_response>M</ssl_cvv2_response>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>   \n"
                    },
                    "CC_Complete": {
                      "summary": "Credit Card Completion",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>     \n<txn>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_oar_data>010012963704202039190000047554200000000000410448211020129637</ssl_oar_data>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>200422A40-30D8BD75-B9A2-4774-A2A1-244552F1F3C0</ssl_txn_id>\n  <ssl_avs_response></ssl_avs_response>\n  <ssl_approval_code>410448</ssl_approval_code>\n  <ssl_amount>12.00</ssl_amount>\n  <ssl_transaction_currency>USD</ssl_transaction_currency>\n  <ssl_txn_time>04/20/2022 04:41:07 PM</ssl_txn_time>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_customer_code></ssl_customer_code>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_transaction_type>COMPLETE</ssl_transaction_type>\n  <ssl_salestax>0.00</ssl_salestax>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_ps2000_data>A000000000000000 A</ssl_ps2000_data>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_invoice_number></ssl_invoice_number>\n  <ssl_cvv2_response></ssl_cvv2_response>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>  \n"
                    },
                    "CC_Return_Full": {
                      "summary": "Credit Card Refund (Full)",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<txn>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_last_name/>\n  <ssl_phone/>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_departure_date/>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>200324C55-CDE5B0C8-CB32-447C-8784-3E76EAD39715</ssl_txn_id>\n  <ssl_avs_response> </ssl_avs_response>\n  <ssl_approval_code>274146</ssl_approval_code>\n  <ssl_email/>\n  <ssl_amount>2.00</ssl_amount>\n  <ssl_avs_zip/>\n  <ssl_txn_time>03/20/2024 10:37:02 AM</ssl_txn_time>\n  <ssl_exp_date>1225</ssl_exp_date>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_country/>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_transaction_type>RETURN</ssl_transaction_type>\n  <ssl_salestax/>\n  <ssl_avs_address/>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_state/>\n  <ssl_city/>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_first_name/>\n  <ssl_invoice_number/>\n  <ssl_cvv2_response/>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "CC_Return": {
                      "summary": "Credit Card Refund (Partial)",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<txn>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_last_name>Test Last</ssl_last_name>\n  <ssl_company></ssl_company>\n  <ssl_phone></ssl_phone>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>121021ED4-221E63DC-F5E7-4E04-AA95-B28B9E344B3E</ssl_txn_id>\n  <ssl_avs_response> </ssl_avs_response>\n  <ssl_approval_code>401527</ssl_approval_code>\n  <ssl_email></ssl_email>\n  <ssl_amount>1.50</ssl_amount>\n  <ssl_avs_zip>12345</ssl_avs_zip>\n  <ssl_txn_time>10/12/2024 01:44:40 PM</ssl_txn_time>\n  <ssl_description></ssl_description>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_completion_date></ssl_completion_date>\n  <ssl_address2></ssl_address2>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_customer_code></ssl_customer_code>\n  <ssl_country></ssl_country>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_transaction_type>RETURN</ssl_transaction_type>\n  <ssl_salestax></ssl_salestax>\n  <ssl_avs_address>test road</ssl_avs_address>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_state></ssl_state>\n  <ssl_city></ssl_city>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_first_name>John</ssl_first_name>\n  <ssl_invoice_number></ssl_invoice_number>\n  <ssl_cvv2_response></ssl_cvv2_response>\n</txn>\n"
                    },
                    "CC_Void": {
                      "summary": "Credit Card Void",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<txn>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_last_name>Smith</ssl_last_name>\n  <ssl_company></ssl_company>\n  <ssl_phone></ssl_phone>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>121024ED4-221E63DC-F5E7-4E04-AA95-B28B9E344B3E</ssl_txn_id>\n  <ssl_avs_response> </ssl_avs_response>\n  <ssl_approval_code>401527</ssl_approval_code>\n  <ssl_email></ssl_email>\n  <ssl_amount>2.00</ssl_amount>\n  <ssl_avs_zip>12345</ssl_avs_zip>\n  <ssl_txn_time>10/12/2024 01:44:40 PM</ssl_txn_time>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_customer_code></ssl_customer_code>\n  <ssl_country></ssl_country>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_transaction_type>VOID</ssl_transaction_type>\n  <ssl_salestax></ssl_salestax>\n  <ssl_avs_address>123 Main St</ssl_avs_address>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_state></ssl_state>\n  <ssl_city></ssl_city>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_first_name>John</ssl_first_name>\n  <ssl_invoice_number></ssl_invoice_number>\n  <ssl_cvv2_response></ssl_cvv2_response>\n</txn>\n"
                    },
                    "CC_Delete": {
                      "summary": "Credit Card Delete",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<txn>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>121024ED4-221E63DC-F5E7-4E04-AA95-B28B9E344B3E</ssl_txn_id>\n  <ssl_amount>2.00</ssl_amount>\n  <ssl_txn_time>10/12/2024 01:44:40 PM</ssl_txn_time>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_transaction_type>DELETE</ssl_transaction_type>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n</txn>\n"
                    },
                    "CC_Delete_Force": {
                      "summary": "Credit Card Delete (Force)",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<txn>\n  <ssl_transaction_type>DELETE</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>100424C55-E64ACE59-624C-4642-804D-C0D5790E1192</ssl_txn_id>\n  <ssl_amount>5.00</ssl_amount>\n  <ssl_txn_time>04/10/2024 04:14:50 PM</ssl_txn_time>\n  <ssl_exp_date>0325</ssl_exp_date>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n</txn>\n"
                    },
                    "CC_Balinquiry": {
                      "summary": "Credit Card Balance Inquiry",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<txn>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>200324C55-27E69C3A-B704-4F5C-973E-ED49EF55946B</ssl_txn_id>\n  <ssl_avs_response> </ssl_avs_response>\n  <ssl_approval_code>273201</ssl_approval_code>\n  <ssl_txn_time>03/20/2024 10:02:12 AM</ssl_txn_time>\n  <ssl_exp_date>1234</ssl_exp_date>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_transaction_type>INQUIRY</ssl_transaction_type>\n  <ssl_avs_address/>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "CC_AddRecurring": {
                      "summary": "Credit Card Add Recurring",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_start_payment_date>01/31/2022</ssl_start_payment_date>\n  <ssl_transaction_type>CCADDRECURRING</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_amount>1.50</ssl_amount>\n  <ssl_next_payment_date>01/31/2022</ssl_next_payment_date>\n  <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n  <ssl_result_message>SUCCESS</ssl_result_message>\n  <ssl_recurring_id>AA484C3-8E5D1201-A05E-824D-9DAD-E3534E83F078</ssl_recurring_id>\n  <ssl_number_of_payments>0</ssl_number_of_payments>\n  <ssl_skip_payment>N</ssl_skip_payment>\n  <ssl_recurring_batch_count>65</ssl_recurring_batch_count>\n</txn>\n"
                    },
                    "CC_UpdateRecurring": {
                      "summary": "Credit Card Update Recurring",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_start_payment_date>01/31/2022</ssl_start_payment_date>\n  <ssl_transaction_type>CCUPDATERECURRING</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_amount>1.50</ssl_amount>\n  <ssl_next_payment_date>01/31/2022</ssl_next_payment_date>\n  <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n  <ssl_result_message>SUCCESS</ssl_result_message>\n  <ssl_recurring_id>AA484C3-8E5D1201-A05E-824D-9DAD-E3534E83F078</ssl_recurring_id>\n  <ssl_number_of_payments>0</ssl_number_of_payments>\n  <ssl_skip_payment>N</ssl_skip_payment>\n  <ssl_recurring_batch_count>65</ssl_recurring_batch_count>\n</txn>\n"
                    },
                    "CC_DeleteRecurring": {
                      "summary": "Credit Card Delete Recurring",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_transaction_type>CCDELETERECURRING</ssl_transaction_type>\n  <ssl_result_message>SUCCESS</ssl_result_message>\n  <ssl_recurring_id>AA484C3-8E5D1201-A05E-824D-9DAD-E3534E83F078</ssl_recurring_id>\n  <ssl_recurring_batch_count>65</ssl_recurring_batch_count>\n</txn>\n"
                    },
                    "CC_SubmitRecurring": {
                      "summary": "Credit Card Submit Recurring",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_cit_mit_cof_indicator>M01</ssl_cit_mit_cof_indicator>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_billing_cycle>DAILY</ssl_billing_cycle>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_oar_data>010012955803191834350000047554200000000000238801407918129558</ssl_oar_data>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>190324C55-0DD675C0-42ED-4A32-BABD-894044448FF6</ssl_txn_id>\n  <ssl_approval_code>238801</ssl_approval_code>\n  <ssl_amount>1.00</ssl_amount>\n  <ssl_txn_time>03/19/2024 01:34:35 PM</ssl_txn_time>\n  <ssl_recurring_id>AA484C3-8E5D1201-A05E-824D-9DAD-E3534E83F078</ssl_recurring_id>\n  <ssl_exp_date>1249</ssl_exp_date>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_transaction_type>CCRECURRINGSALE</ssl_transaction_type>\n  <ssl_start_payment_date>12/23/2024</ssl_start_payment_date>\n  <ssl_next_payment_date>12/23/2024</ssl_next_payment_date>\n  <ssl_recurring_batch_count>33</ssl_recurring_batch_count>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_ps2000_data>A7540796687565375100A</ssl_ps2000_data>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_skip_payment>N</ssl_skip_payment>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "CC_AddInstall": {
                      "summary": "Credit Card Add Installment",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_start_payment_date>01/31/2022</ssl_start_payment_date>\n  <ssl_transaction_type>CCADDINSTALL</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_amount>1.50</ssl_amount>\n  <ssl_next_payment_date>01/31/2022</ssl_next_payment_date>\n  <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n  <ssl_result_message>SUCCESS</ssl_result_message>\n  <ssl_installment_id>AA484C3-8E5D1201-A05E-824D-9DAD-E3534E83F078</ssl_installment_id>\n  <ssl_number_of_payments>0</ssl_number_of_payments>\n  <ssl_skip_payment>N</ssl_skip_payment>\n  <ssl_recurring_batch_count>66</ssl_recurring_batch_count>\n</txn>\n"
                    },
                    "CC_UpdateInstall": {
                      "summary": "Credit Card Update Installment",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_start_payment_date>01/31/2022</ssl_start_payment_date>\n  <ssl_transaction_type>CCUPDATEINSTALL</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_amount>1.50</ssl_amount>\n  <ssl_next_payment_date>01/31/2022</ssl_next_payment_date>\n  <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n  <ssl_result_message>SUCCESS</ssl_result_message>\n  <ssl_installment_id>AA484C3-8E5D1201-A05E-824D-9DAD-E3534E83F078</ssl_installment_id>\n  <ssl_number_of_payments>0</ssl_number_of_payments>\n  <ssl_skip_payment>N</ssl_skip_payment>\n  <ssl_recurring_batch_count>66</ssl_recurring_batch_count>\n</txn>\n"
                    },
                    "CC_DeleteInstall": {
                      "summary": "Credit Card Delete Installment",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_transaction_type>CCDELETEINSTALL</ssl_transaction_type>\n  <ssl_result_message>SUCCESS</ssl_result_message>\n  <ssl_installment_id>AA484C3-8E5D1201-A05E-824D-9DAD-E3534E83F078</ssl_installment_id>\n  <ssl_recurring_batch_count>65</ssl_recurring_batch_count>\n</txn>\n"
                    },
                    "CC_SubmitInstall": {
                      "summary": "Credit Card Submit Installment",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_number_of_payments>1</ssl_number_of_payments>\n  <ssl_amount>1.00</ssl_amount>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_start_payment_date>12/23/2024</ssl_start_payment_date>\n  <ssl_recurring_batch_count>34</ssl_recurring_batch_count>\n  <ssl_ps2000_data>V7540796793374375100A</ssl_ps2000_data>\n  <ssl_cit_mit_cof_indicator>M01</ssl_cit_mit_cof_indicator>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_billing_cycle>DAILY</ssl_billing_cycle>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_oar_data>010012895003191852120000047554200000000000239811407918128950</ssl_oar_data>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>190324C55-0BBA598D-615D-48E0-8509-CB5CE5363C63</ssl_txn_id>\n  <ssl_avs_response> </ssl_avs_response>\n  <ssl_approval_code>239811</ssl_approval_code>\n  <ssl_total_installments>12</ssl_total_installments>\n  <ssl_txn_time>03/19/2024 01:52:12 PM</ssl_txn_time>\n  <ssl_exp_date>1249</ssl_exp_date>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_installment_id>190324C55-CC6FC0A7-3C7A-43D2-A87D-5AB668ACF58C</ssl_installment_id>\n  <ssl_transaction_type>CCINSTALLSALE</ssl_transaction_type>\n  <ssl_next_payment_date>12/23/2024</ssl_next_payment_date>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_skip_payment>N</ssl_skip_payment>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "CC_Get_Token": {
                      "summary": "Get Token (with Verification)",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_cit_mit_cof_indicator>M01</ssl_cit_mit_cof_indicator>\n  <ssl_last_name>Smith</ssl_last_name>\n  <ssl_company></ssl_company>\n  <ssl_phone></ssl_phone>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_merchant_txn_id></ssl_merchant_txn_id>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>my_txn_id</ssl_txn_id>\n  <ssl_avs_response>Z</ssl_avs_response>\n  <ssl_approval_code>000000</ssl_approval_code>\n  <ssl_email></ssl_email>\n  <ssl_avs_zip>12345</ssl_avs_zip>\n  <ssl_txn_time>09/19/2030 03:42:58 PM</ssl_txn_time>\n  <ssl_description></ssl_description>\n  <ssl_vendor_id>My ID</ssl_vendor_id>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_address2></ssl_address2>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_token_response>SUCCESS</ssl_token_response>\n  <ssl_credit_surcharge_amount></ssl_credit_surcharge_amount>\n  <ssl_customer_code></ssl_customer_code>\n  <ssl_country></ssl_country>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_token_format>N</ssl_token_format>\n  <ssl_token_provider>V</ssl_token_provider>\n  <ssl_transaction_type>GETTOKEN</ssl_transaction_type>\n  <ssl_salestax></ssl_salestax>\n  <ssl_avs_address>123 Main St</ssl_avs_address>\n  <ssl_customer_id></ssl_customer_id>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_ps2000_data>my_ps_data</ssl_ps2000_data>\n  <ssl_state></ssl_state>\n  <ssl_city></ssl_city>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_first_name></ssl_first_name>\n  <ssl_invoice_number></ssl_invoice_number>\n  <ssl_cvv2_response>M</ssl_cvv2_response>\n  <ssl_token>my_token</ssl_token>\n  <ssl_add_token_response>Card Added</ssl_add_token_response>\n</txn>  \n"
                    },
                    "Token_Generate": {
                      "summary": "Token Generate",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_cit_mit_cof_indicator>M01</ssl_cit_mit_cof_indicator>\n  <ssl_last_name>Smith</ssl_last_name>\n  <ssl_company></ssl_company>\n  <ssl_phone></ssl_phone>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_merchant_txn_id></ssl_merchant_txn_id>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>my_txn_id</ssl_txn_id>\n  <ssl_avs_response>Z</ssl_avs_response>\n  <ssl_approval_code>000000</ssl_approval_code>\n  <ssl_email></ssl_email>\n  <ssl_avs_zip>12345</ssl_avs_zip>\n  <ssl_txn_time>09/19/2030 03:42:58 PM</ssl_txn_time>\n  <ssl_description></ssl_description>\n  <ssl_vendor_id>My ID</ssl_vendor_id>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_address2></ssl_address2>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_token_response>SUCCESS</ssl_token_response>\n  <ssl_credit_surcharge_amount></ssl_credit_surcharge_amount>\n  <ssl_customer_code></ssl_customer_code>\n  <ssl_country></ssl_country>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_token_format>N</ssl_token_format>\n  <ssl_token_provider>V</ssl_token_provider>\n  <ssl_transaction_type>GETTOKEN</ssl_transaction_type>\n  <ssl_salestax></ssl_salestax>\n  <ssl_avs_address>123 Main St</ssl_avs_address>\n  <ssl_customer_id></ssl_customer_id>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_state></ssl_state>\n  <ssl_city></ssl_city>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_first_name></ssl_first_name>\n  <ssl_invoice_number></ssl_invoice_number>\n  <ssl_cvv2_response>M</ssl_cvv2_response>\n  <ssl_token>my_token</ssl_token>\n  <ssl_add_token_response>Card Added</ssl_add_token_response>\n</txn>\n"
                    },
                    "Token_Update": {
                      "summary": "Token Update",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_card_type>VISA</ssl_card_type>\n  <ssl_result>0</ssl_result>\n  <ssl_token_response>SUCCESS</ssl_token_response>\n  <ssl_token>1111111111110055</ssl_token>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_exp_date>1226</ssl_exp_date>\n  <ssl_company>Elavon</ssl_company>\n  <ssl_customer_id/>\n  <ssl_first_name/>\n  <ssl_last_name/>\n  <ssl_avs_address>Test Address</ssl_avs_address>\n  <ssl_address2>Second Address</ssl_address2>\n  <ssl_city>Atlanta</ssl_city>\n  <ssl_state>GA</ssl_state>\n  <ssl_avs_zip>30000</ssl_avs_zip>\n  <ssl_country>USA</ssl_country>\n  <ssl_phone>1231231234</ssl_phone>\n  <ssl_email>your_email</ssl_email>\n  <ssl_description>Test Description</ssl_description>\n  <ssl_exclude_account_update>Y</ssl_exclude_account_update>\n  <ssl_user_id>user_id</ssl_user_id>\n  <ssl_token_response>SUCCESS</ssl_token_response>\n  <ssl_result>0</ssl_result>\n</txn>\n"
                    },
                    "Token_Query": {
                      "summary": "Token Query",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_token>1111111111112221</ssl_token>\n  <ssl_voltage_token>1111111111112221</ssl_voltage_token>\n  <ssl_account_number>4159********2221</ssl_account_number>\n  <ssl_exp_date>1226</ssl_exp_date>\n  <ssl_card_type>VISA</ssl_card_type>\n  <ssl_company>Elavon</ssl_company>\n  <ssl_customer_id/>\n  <ssl_first_name/>\n  <ssl_last_name/>\n  <ssl_avs_address>Test Address</ssl_avs_address>\n  <ssl_address2>Second Address</ssl_address2>\n  <ssl_avs_zip>30000</ssl_avs_zip>\n  <ssl_city>Atlanta</ssl_city>\n  <ssl_state>GA</ssl_state>\n  <ssl_country>USA</ssl_country>\n  <ssl_phone>1234567890</ssl_phone>\n  <ssl_email>your_email</ssl_email>\n  <ssl_description>Test Description</ssl_description>\n  <ssl_user_id>user_id</ssl_user_id>\n  <ssl_result>0</ssl_result>\n  <ssl_token_response>SUCCESS</ssl_token_response>\n  <ssl_token_provider>V</ssl_token_provider>\n  <ssl_token_format>Numeric</ssl_token_format>\n</txn>\n"
                    },
                    "Token_Delete": {
                      "summary": "Token Delete",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_token>1111111111110055</ssl_token>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_exp_date>1226</ssl_exp_date>\n  <ssl_card_type>VISA</ssl_card_type>\n  <ssl_token_response>SUCCESS</ssl_token_response>\n  <ssl_result_message>Approved</ssl_result_message>\n  <ssl_result>0</ssl_result>\n</txn>                                  \n"
                    },
                    "ApplePay_Session": {
                      "summary": "Apple Pay on the Web Session",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <txn>\n    <applepaySession>\n        {\"epochTimestamp\":1557932006440,\"expiresAt\":1557935606440,\"merchantSessionIdentifier\":\"SSHA0B20BE3B7E645EFB8EBAE91F81069C0_916523AAED1343F5BC5815E12BEE9250AFFDC1A17C46B0DE5A943F0F94927C24\",\"nonce\":\"465a2042\",\"merchantIdentifier\":\"2B61E0688F2FC23911AC584F4FEFA52AA675CA1C34A51658BCCC0ACE07450822\",\"domainName\":\"ex.com\",\"displayName\":\"Merchant Name\",\"signature\":\"308006092a864886f70d0101...18ffdae3ecb000000000000\"}\n    </applepaySession>\n  </txn>                 \n"
                    },
                    "ApplePay_Transaction": {
                      "summary": "Apple Pay on the Web Sale",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <txn>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_oar_data>010001935803181753340318000816800000000000149924MCC620811</ssl_oar_data>\n    <ssl_result>0</ssl_result>\n    <ssl_txn_id>180324C55-8B28B407-2C9B-4E08-A2A9-ECE468CF194F</ssl_txn_id>\n    <ssl_avs_response> </ssl_avs_response>\n    <ssl_approval_code>149924</ssl_approval_code>\n    <ssl_amount>1.16</ssl_amount>\n    <ssl_txn_time>03/18/2024 01:53:34 PM</ssl_txn_time>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_card_short_description>MC</ssl_card_short_description>\n    <ssl_par_value>MC34TEST58910ELAVON789101</ssl_par_value>\n    <ssl_eci_ind>1</ssl_eci_ind>\n    <ssl_card_type>CREDITCARD</ssl_card_type>\n    <ssl_association_token_data>F 06160000000161235</ssl_association_token_data>\n    <ssl_transaction_type>SALE</ssl_transaction_type>\n    <ssl_dir_server_tran_id>d40f104e9736a9666617c9cf1ee72d726add</ssl_dir_server_tran_id>\n    <ssl_account_balance>0.00</ssl_account_balance>\n    <ssl_ps2000_data>MMCC620811 0318A2</ssl_ps2000_data>\n    <ssl_result_message>APPROVAL</ssl_result_message>\n    <ssl_partner_app_id>01</ssl_partner_app_id>\n  </txn>  \n"
                    },
                    "ApplePay_InApp_Transaction": {
                      "summary": "Apple Pay In App Sale",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <txn>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_oar_data>010001194903191349440319000816800000000000220954MCC680279</ssl_oar_data>\n    <ssl_result>0</ssl_result>\n    <ssl_txn_id>190324C55-4CF05024-6AF3-4BCA-A474-CDF9311E9586</ssl_txn_id>\n    <ssl_approval_code>220954</ssl_approval_code>\n    <ssl_amount>1.16</ssl_amount>\n    <ssl_txn_time>03/19/2024 09:49:44 AM</ssl_txn_time>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_card_short_description>MC</ssl_card_short_description>\n    <ssl_par_value>MC34TEST58910ELAVON789101</ssl_par_value>\n    <ssl_eci_ind>1</ssl_eci_ind>\n    <ssl_card_type>CREDITCARD</ssl_card_type>\n    <ssl_association_token_data>F 06160000000161235</ssl_association_token_data>\n    <ssl_transaction_type>SALE</ssl_transaction_type>\n    <ssl_dir_server_tran_id>d40f104e9736a9666617c9cf1ee72d726add</ssl_dir_server_tran_id>\n    <ssl_account_balance>0.00</ssl_account_balance>\n    <ssl_ps2000_data>MMCC680279 0319A2</ssl_ps2000_data>\n    <ssl_result_message>APPROVAL</ssl_result_message>\n    <ssl_partner_app_id>01</ssl_partner_app_id>\n  </txn>\n"
                    },
                    "3D_Secure": {
                      "summary": "3D Secure2 EFS Token",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <txn>\n    <ssl_3ds2_token>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJDb252ZXJnZTIiLCJzY29wZSI6WyIzZHMyOmF1dGhlbnRpY2F0ZSIsIm1lcmNoYW50QWxpYXM6YjRjd2JmNHJkNjkyaHYzaHRoNGIyOXc0amdkaCJdLCJpc3MiOiJodHRwczovL3VhdDEuYzIuYWxiLmVjcy4wMTMzMjA4Mzc1OTMuZXUtd2VzdC0xLm5vbnByb2QuYXdzLnBydjo5OTk5L29hdXRoL3Rva2VuIiwiZXhwIjoxNzEwODc0NTE0LCJqdGkiOiJkODg5MmMzNy0wMTkxLTRmYTAtOGQ5NS03NmZiZjc3MjZhMTYiLCJjbGllbnRfaWQiOiJDb252ZXJnZTIifQ.eaRYrhoSSDXVRIryyJJz-bVwRTmBAFGHQGm7d66glcOXPpXydoplyjdMQtpqy4P6666FuCEdystuEFkZaJxIY1x3aS94vaf612eK7Kr1-m9evLjD26CXa8HkqVkmXV0j3q0m5IjbFEx99jPiXiwYBOpzkgTDFQ6rfKlwwP5Te6z9Ejx7hvxyBNsW8QhexCq28fPW1G3l59ERUuaZsn9Eq95R5VLU2LDnwrUMJV7da0gAvBDAOdLomErpVWeJW90f3QnGZLxgKPTkpvPg-wm5kfe9OEdKDv4OS-srZ6rce-X6VtWjzxsvufJnXRjvsn9bF-xrVOtyCY4k7qJ8U8rW4A</ssl_3ds2_token>\n    <ssl_3ds2_exp>599</ssl_3ds2_exp>\n  </txn>\n"
                    },
                    "3D_Secure_Sale": {
                      "summary": "3D Secure2 Sale",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <txn>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_oar_data>010013160703191741400000048727100000000000235001407917131607</ssl_oar_data>\n    <ssl_result>0</ssl_result>\n    <ssl_txn_id>190324C55-9066C332-0C10-4B1D-8987-0A406E84C1E9</ssl_txn_id>\n    <ssl_approval_code>235001</ssl_approval_code>\n    <ssl_amount>25.00</ssl_amount>\n    <ssl_txn_time>03/19/2024 01:41:40 PM</ssl_txn_time>\n    <ssl_exp_date>1225</ssl_exp_date>\n    <ssl_transaction_type>SALE</ssl_transaction_type>\n    <ssl_card_type>CREDITCARD</ssl_card_type>\n    <ssl_card_short_description>VISA</ssl_card_short_description>\n    <ssl_eci_ind>1</ssl_eci_ind>\n    <ssl_dir_server_tran_id>cd905dbe-b197-4bc1-81b1-723d9dab9c95</ssl_dir_server_tran_id>\n    <ssl_3ds_message_version>2.1.0</ssl_3ds_message_version>\n    <ssl_3ds_server_trans_id>3823d0d9-7fd2-43aa-b53a-adc139758bc0</ssl_3ds_server_trans_id>\n    <ssl_3ds_trans_status>Y</ssl_3ds_trans_status>\n    <ssl_ps2000_data>W7540796370031615544A</ssl_ps2000_data>\n    <ssl_result_message>APPROVAL</ssl_result_message>\n    <ssl_first_name>John</ssl_first_name>\n    <ssl_last_name>Smith</ssl_last_name>\n    <ssl_cvv2_response>M</ssl_cvv2_response>\n    <ssl_partner_app_id>01</ssl_partner_app_id>\n  </txn>\n"
                    },
                    "BIN_Lookup_Transaction": {
                      "summary": "Bin Lookup",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <cardNumber>4485********6668</cardNumber>\n  <debit>Y</debit>\n  <surchargeAllowed>Y</surchargeAllowed>\n  <fundingSource>C</fundingSource>\n  <pinlessDebitEnabled>N</pinlessDebitEnabled>\n  <hsa>N</hsa>\n  <billPaymentSupport>N</billPaymentSupport>\n  <businessCard>N</businessCard>\n  <cardProductTypeCode/>\n  <countryCode/>\n  <dbIntchFraudInd/>\n  <ecommSupport>N</ecommSupport>\n  <institutionName/>\n  <internationalSupport>N</internationalSupport>\n  <networkRoutingCode/>\n  <posEligible>N</posEligible>\n  <prepaidSupport>N</prepaidSupport>\n  <signatureSupport>N</signatureSupport>\n  <quickServeSupport>N</quickServeSupport>\n  <pinlessDebitThreshold>50</pinlessDebitThreshold>\n  <octeligible>N</octeligible>\n  <accountRequestStatus>00</accountRequestStatus>\n  <fullNameResult>01</fullNameResult>\n  <firstNameResult>01</firstNameResult>\n  <middleNameResult>01</middleNameResult>\n  <lastNameResult>01</lastNameResult>\n</txn>\n"
                    },
                    "BatchQuery": {
                      "summary": "Batch Import Transaction Query",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <batchImport>\n      <summary>\n          <ssl_file_name>CCGETTOKEN.csv</ssl_file_name>\n          <ssl_status>Complete</ssl_status>\n          <ssl_user_id>my_user_id</ssl_user_id>\n          <ssl_file_type>CCTOKENIMPORT</ssl_file_type>\n          <ssl_start_date>2022-06-13 14:58:45.0</ssl_start_date>\n          <ssl_end_date>2022-06-13 14:59:43.0</ssl_end_date>\n          <ssl_total>1</ssl_total>\n          <ssl_approved/>\n          <ssl_failed>1</ssl_failed>\n      </summary>\n      <transactions>\n      <transaction>\n          <ssl_card>54**********1172</ssl_card>\n          <ssl_recurring_id/>\n          <ssl_exp_date>1230</ssl_exp_date>\n          <ssl_avs/>\n          <ssl_card_type>MC</ssl_card_type>\n          <ssl_token>5584526655241172</ssl_token>\n          <ssl_result>APPROVAL</ssl_result>\n          <ssl_message/>\n          <ssl_error_code/>\n      </transaction>\n      <transactions/>\n  </batchImport>\n</txn>                   \n"
                    },
                    "EOD_Transaction": {
                      "summary": "End of Day Transaction Query",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_account_id>my_account_id</ssl_account_id>\n  <ssl_user_id>my_user_id</ssl_user_id>\n  <ssl_pin>my_pin</ssl_pin>\n  <ssl_test_mode>false</ssl_test_mode>\n  <ssl_transaction_type>TXNQUERY</ssl_transaction_type>\n  <ssl_txn_id></ssl_txn_id>\n  <ssl_time_zone_response_utc>Y</ssl_time_zone_response_utc>\n  <ssl_time_zone_request_utc>Y</ssl_time_zone_request_utc>\n  <ssl_search_start_date>01/06/2022 00:00:02</ssl_search_start_date>\n  <ssl_search_end_date>01/06/2022 23:59:02</ssl_search_end_date>\n</txn>\n"
                    },
                    "EOD_Transaction_Card": {
                      "summary": "End of Day Transaction Query (with Card Number)",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txnlist>\n  <ssl_txn_count>2</ssl_txn_count>\n  <txn>\n      <ssl_txn_id>AA786F-4CEC21A7-B70A-4584-AC8C-5040C0297354</ssl_txn_id>\n      <ssl_user_id>my_user_id</ssl_user_id>\n      <ssl_trans_status>STL</ssl_trans_status>\n      <ssl_card_type>CREDITCARD</ssl_card_type>\n      <ssl_transaction_type>CCSALE</ssl_transaction_type>\n      <ssl_txn_time>12/18/2024 09:13:24 AM</ssl_txn_time>\n      <ssl_first_name>George P.</ssl_first_name>\n      <ssl_last_name>Burdell</ssl_last_name>\n      <ssl_card_number>4000000000000002</ssl_card_number>\n      <ssl_exp_date>1230</ssl_exp_date>\n      <ssl_entry_mode>K</ssl_entry_mode>\n      <ssl_avs_response />\n      <ssl_cvv2_response />\n      <ssl_amount>5.00</ssl_amount>\n      <ssl_invoice_number />\n      <ssl_result_message>APPROVAL</ssl_result_message>\n      <ssl_approval_code>N29032</ssl_approval_code>\n  </txn>\n  <txn>\n      <ssl_txn_id>AA786F-4CEC21A7-B70A-4584-AC8C-5040C0297354</ssl_txn_id>\n      <ssl_user_id>my_user_id</ssl_user_id>\n      <ssl_trans_status>STL</ssl_trans_status>\n      <ssl_card_type>CREDITCARD</ssl_card_type>\n      <ssl_transaction_type>CCSALE</ssl_transaction_type>\n      <ssl_txn_time>12/18/2024 09:13:24 AM</ssl_txn_time>\n      <ssl_first_name>George P.</ssl_first_name>\n      <ssl_last_name>Burdell</ssl_last_name>\n      <ssl_card_number>4000000000000002</ssl_card_number>\n      <ssl_exp_date>1230</ssl_exp_date>\n      <ssl_entry_mode>K</ssl_entry_mode>\n      <ssl_avs_response />\n      <ssl_cvv2_response />\n      <ssl_amount>5.00</ssl_amount>\n      <ssl_invoice_number />\n      <ssl_result_message>APPROVAL</ssl_result_message>\n      <ssl_approval_code>N29032</ssl_approval_code>\n  </txn>\n<txnlist>\n"
                    },
                    "EOD_Transaction_Batch": {
                      "summary": "End of Day Transaction Query (with Batch Response)",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txnlist>\n    <ssl_txn_count>2</ssl_txn_count>\n    <txn>\n        <ssl_txn_id>280921M32-51E2AF14-3619-4FF2-A7AC-CD4928F5F7AE</ssl_txn_id>\n        <ssl_user_id>cactus</ssl_user_id>\n        <ssl_trans_status>STL</ssl_trans_status>\n        <ssl_settle_time>09/28/2021 02:59:09 PM</ssl_settle_time>\n        <ssl_card_type>CREDITCARD</ssl_card_type>\n        <ssl_card_short_description>VISA</ssl_card_short_description>\n        <ssl_transaction_type>SALE</ssl_transaction_type>\n        <ssl_txn_time>09/28/2021 02:57:10 PM</ssl_txn_time>\n        <ssl_card_number>4000000000000002</ssl_card_number>\n        <ssl_exp_date>1230</ssl_exp_date>\n        <ssl_entry_mode>K</ssl_entry_mode>\n        <ssl_cvv2_response>M</ssl_cvv2_response>\n        <ssl_amount>1.00</ssl_amount>\n        <ssl_result_message>APPROVAL</ssl_result_message>\n        <ssl_approval_code>200909</ssl_approval_code>\n        <ssl_refunded_amount>0.0</ssl_refunded_amount>\n        <ssl_transaction_language>EN</ssl_transaction_language>\n        <ssl_eci_ind>3</ssl_eci_ind>\n        <ssl_ps2000_data>A7512716823024265045VE</ssl_ps2000_data>\n        <ssl_oar_data>010012856109281857100000047554200000000000200909127118128561</ssl_oar_data>\n        <ssl_settlement_batch_response>GBOK 36909281459</ssl_settlement_batch_response>\n    </txn>\n    <txn>\n        <ssl_txn_id>280921M32-DB2F346A-3849-41D1-80B0-C3EA7249EEE9</ssl_txn_id>\n        <ssl_user_id>cactus</ssl_user_id>\n        <ssl_trans_status>STL</ssl_trans_status>\n        <ssl_settle_time>09/28/2021 02:59:09 PM</ssl_settle_time>\n        <ssl_card_type>CREDITCARD</ssl_card_type>\n        <ssl_card_short_description>VISA</ssl_card_short_description>\n        <ssl_transaction_type>SALE</ssl_transaction_type>\n        <ssl_txn_time>09/28/2021 02:57:05 PM</ssl_txn_time>\n        <ssl_card_number>4000000000000002</ssl_card_number>\n        <ssl_exp_date>1230</ssl_exp_date>\n        <ssl_entry_mode>K</ssl_entry_mode>\n        <ssl_cvv2_response>M</ssl_cvv2_response>\n        <ssl_amount>1.00</ssl_amount>\n        <ssl_result_message>APPROVAL</ssl_result_message>\n        <ssl_approval_code>200903</ssl_approval_code>\n        <ssl_refunded_amount>0.0</ssl_refunded_amount>\n        <ssl_transaction_language>EN</ssl_transaction_language>\n        <ssl_eci_ind>3</ssl_eci_ind>\n        <ssl_ps2000_data>A7512716822524245045VE</ssl_ps2000_data>\n        <ssl_oar_data>010012855609281857050000047554200000000000200903127118128556</ssl_oar_data>\n        <ssl_settlement_batch_response>GBOK 36909281459</ssl_settlement_batch_response>\n    </txn>\n</txnlist>      \n"
                    },
                    "EOD_Transaction_Email": {
                      "summary": "End of Day Transaction Email",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_result>0</ssl_result>\n  <ssl_result_message>SUCCESS</ssl_result_message>              \n</txn>\n"
                    },
                    "EOD_Transaction_Total": {
                      "summary": "End of Day Total/Summary",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_result>0</ssl_result>\n  <ssl_result_message>SUCCESS</ssl_result_message>    \n  <ssl_txn_main_count>3</ssl_txn_main_count>\n  <ssl_txn_main_amount>30.16</ssl_txn_main_amount>\n</txn>\n"
                    },
                    "EOD_Transaction_Settlement": {
                      "summary": "End of Day Settlement",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_result>0</ssl_result>\n  <batch>202</batch>\n  <response>GBOK 20205041108</response>\n  <settleddate>05/04/2021 11:05:15</settleddate>\n  <main>\n      <netcount>10001</netcount>\n      <baseamount>0.00</baseamount>\n      <tipamount>0.00</tipamount>\n      <netamount>45010.00</netamount>\n      <numberpurchaseforces>10001</numberpurchaseforces>\n      <numberreturns>0</numberreturns>\n      <numbervoids>0</numbervoids>\n  </main>\n  <gift>\n      <netcount>0</netcount>\n      <baseamount/>\n      <tipamount/>\n      <netamount/>\n      <numberpurchaseforces>0</numberpurchaseforces>\n      <numberreturns>0</numberreturns>\n      <numbervoids>0</numbervoids>\n  </gift>\n</txn>\n"
                    },
                    "EOD_Recurring_Query": {
                      "summary": "End of Day Recurring Query",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_recurring_id>160720MB-105A1B2E-DDEC-4D17-B898-A88E4C91AC</ssl_recurring_id>\n  <ssl_amount>4.24</ssl_amount>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_exp_date>1228</ssl_exp_date>\n  <ssl_start_date>07/24/2020</ssl_start_date>\n  <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n  <ssl_next_payment_date>11/24/2020</ssl_next_payment_date>\n  <ssl_last_payment_date>05/19/2021</ssl_last_payment_date>\n  <ssl_number_of_payments>5</ssl_number_of_payments>\n</txn>\n"
                    },
                    "ECS_Purchase": {
                      "summary": "Electronic Check Purchase",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_approval_code>NACREN</ssl_approval_code>\n  <ssl_agree>1</ssl_agree>\n  <ssl_transaction_type>CONVERSIONONLY</ssl_transaction_type>\n  <ssl_bank_account_type>0</ssl_bank_account_type>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_aba_number>490000018</ssl_aba_number>\n  <ssl_reference_number>212182533</ssl_reference_number>\n  <ssl_base_amount>20.00</ssl_base_amount>\n  <ssl_amount>20.00</ssl_amount>\n  <ssl_check_number/>\n  <ssl_txn_id>AA49315-2C70E99A-F9E0-4C65-9339-F8E6AB917B4A</ssl_txn_id>\n  <ssl_bank_account_number>12**********1234</ssl_bank_account_num ber>\n  <ssl_card_type>ELECTRONICCHECK</ssl_card_type>\n  <ssl_invoice_number>12345</ssl_invoice_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_time>02/12/2024 11:25:33 AM</ssl_txn_time>\n</txn>\n"
                    },
                    "ECS_Void": {
                      "summary": "Electronic Check Void",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_approval_code></ssl_approval_code>\n  <ssl_agree/>\n  <ssl_transaction_type>VOID</ssl_transaction_type>\n  <ssl_bank_account_type>0</ssl_bank_account_type>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_aba_number>490000018</ssl_aba_number>\n  <ssl_reference_number>212182533</ssl_reference_number>\n  <ssl_base_amount>20.00</ssl_base_amount>\n  <ssl_amount>20.00</ssl_amount>\n  <ssl_check_number/>\n  <ssl_txn_id>AA49315-2C70E99A-F9E0-4C65-9339-F8E6AB917B4A</ssl_txn_id>\n  <ssl_bank_account_number>12**********1234</ssl_bank_account_num ber>\n  <ssl_card_type>ELECTRONICCHECK</ssl_card_type>\n  <ssl_invoice_number>12345</ssl_invoice_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_time>02/12/2024 11:25:33 AM</ssl_txn_time>\n</txn>\n"
                    },
                    "ECS_AddRecurring": {
                      "summary": "Electronic Check Add Recurring",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_last_name>User</ssl_last_name>\n  <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n  <ssl_result>0</ssl_result>\n  <ssl_amount>5.00</ssl_amount>\n  <ssl_recurring_id>030424MC8-629A1018-733E-4429-80D6-214EAB476108</ssl_recurring_id>\n  <ssl_card_type>ELECTRONICCHECK</ssl_card_type>\n  <ssl_bank_account_type>0</ssl_bank_account_type>\n  <ssl_bank_account_number>12**********1234</ssl_bank_account_number>\n  <ssl_transaction_type>ECSADDRECURRING</ssl_transaction_type>\n  <ssl_start_payment_date>mm/dd/yyyy</ssl_start_payment_date>\n  <ssl_next_payment_date>mm/dd/yyyy</ssl_next_payment_date>\n  <ssl_recurring_batch_count>998</ssl_recurring_batch_count>\n  <ssl_aba_number>43123456789</ssl_aba_number>\n  <ssl_result_message>SUCCESS</ssl_result_message>\n  <ssl_first_name>Test</ssl_first_name>\n  <ssl_skip_payment>N</ssl_skip_payment>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "ECS_UpdateRecurring": {
                      "summary": "Electronic Check Update Recurring",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_last_name>User</ssl_last_name>\n  <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n  <ssl_result>0</ssl_result>\n  <ssl_amount>5.00</ssl_amount>\n  <ssl_recurring_id>030424MC8-629A1018-733E-4429-80D6-214EAB476108</ssl_recurring_id>\n  <ssl_card_type>ELECTRONICCHECK</ssl_card_type>\n  <ssl_bank_account_type>0</ssl_bank_account_type>\n  <ssl_bank_account_number>12**********1234</ssl_bank_account_number>\n  <ssl_transaction_type>ECSUPDATERECURRING</ssl_transaction_type>\n  <ssl_start_payment_date>mm/dd/yyyy</ssl_start_payment_date>\n  <ssl_next_payment_date>mm/dd/yyyy</ssl_next_payment_date>\n  <ssl_recurring_batch_count>998</ssl_recurring_batch_count>\n  <ssl_aba_number>43123456789</ssl_aba_number>\n  <ssl_result_message>SUCCESS</ssl_result_message>\n  <ssl_first_name>Test</ssl_first_name>\n  <ssl_skip_payment>Y</ssl_skip_payment>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "ECS_DeleteRecurring": {
                      "summary": "Electronic Check Delete Recurring",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_recurring_batch_count>997</ssl_recurring_batch_count>\n  <ssl_recurring_id>030424MC8-629A1018-733E-4429-80D6-214EAB476108</ssl_recurring_id>\n  <ssl_result_message>SUCCESS</ssl_result_message>\n  <ssl_transaction_type>ECSDELETERECURRING</ssl_transaction_type>\n  <ssl_result>0</ssl_result>\n  <ssl_card_type/>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "ECS_RecurringAddtnlPayment": {
                      "summary": "Electronic Check Recurring Additional Payment",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_cit_mit_cof_indicator>M01</ssl_cit_mit_cof_indicator>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_last_name>User</ssl_last_name>\n  <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>030424MC8-1635A7E6-4FFF-4A69-AE04-EFB344E75641</ssl_txn_id>\n  <ssl_approval_code>234123</ssl_approval_code>\n  <ssl_amount>5.00</ssl_amount>\n  <ssl_txn_time>04/03/2024 11:56:31 AM</ssl_txn_time>\n  <ssl_recurring_id>030424MC8-629A1018-733E-4429-80D6-214EAB476108</ssl_recurring_id>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_card_type>ELECTRONICCHECK</ssl_card_type>\n  <ssl_bank_account_type>0</ssl_bank_account_type>\n  <ssl_bank_account_number>43**********1244</ssl_bank_account_number>\n  <ssl_transaction_type>ECSRECURRINGSALE</ssl_transaction_type>\n  <ssl_start_payment_date>mm/dd/yyyy</ssl_start_payment_date>\n  <ssl_next_payment_date>mm/dd/yyyy</ssl_next_payment_date>\n  <ssl_recurring_batch_count>998</ssl_recurring_batch_count>\n  <ssl_result_message>SUCCESS</ssl_result_message>\n  <ssl_first_name>Test</ssl_first_name>\n  <ssl_skip_payment>Y</ssl_skip_payment>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "ECS_AddInstallment": {
                      "summary": "Electronic Check Add Installment",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_last_name>User</ssl_last_name>\n  <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n  <ssl_result>0</ssl_result>\n  <ssl_amount>5.00</ssl_amount>\n  <ssl_total_installments>4</ssl_total_installments>\n  <ssl_installment_id>030424MC8-629A1018-733E-4429-80D6-214EAB476108</ssl_installment_id>\n  <ssl_card_type>ELECTRONICCHECK</ssl_card_type>\n  <ssl_bank_account_type>0</ssl_bank_account_type>\n  <ssl_bank_account_number>12**********1234</ssl_bank_account_number>\n  <ssl_transaction_type>ECSADDINSTALL</ssl_transaction_type>\n  <ssl_start_payment_date>mm/dd/yyyy</ssl_start_payment_date>\n  <ssl_next_payment_date>mm/dd/yyyy</ssl_next_payment_date>\n  <ssl_recurring_batch_count>998</ssl_recurring_batch_count>\n  <ssl_aba_number>43123456789</ssl_aba_number>\n  <ssl_result_message>SUCCESS</ssl_result_message>\n  <ssl_first_name>Test</ssl_first_name>\n  <ssl_skip_payment>N</ssl_skip_payment>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "ECS_UpdateInstallment": {
                      "summary": "Electronic Check Update Installment",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_last_name>User</ssl_last_name>\n  <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n  <ssl_result>0</ssl_result>\n  <ssl_amount>5.00</ssl_amount>\n  <ssl_total_installments>10</ssl_total_installments>\n  <ssl_installment_id>030424MC8-629A1018-733E-4429-80D6-214EAB476108</ssl_installment_id>\n  <ssl_card_type>ELECTRONICCHECK</ssl_card_type>\n  <ssl_bank_account_type>0</ssl_bank_account_type>\n  <ssl_bank_account_number>12**********1234</ssl_bank_account_number>\n  <ssl_transaction_type>ECSUPDATEINSTALL</ssl_transaction_type>\n  <ssl_start_payment_date>mm/dd/yyyy</ssl_start_payment_date>\n  <ssl_next_payment_date>mm/dd/yyyy</ssl_next_payment_date>\n  <ssl_recurring_batch_count>998</ssl_recurring_batch_count>\n  <ssl_aba_number>43123456789</ssl_aba_number>\n  <ssl_result_message>SUCCESS</ssl_result_message>\n  <ssl_first_name>Test</ssl_first_name>\n  <ssl_skip_payment>Y</ssl_skip_payment>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "ECS_DeleteInstallment": {
                      "summary": "Electronic Check Delete Installment",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_recurring_batch_count>997</ssl_recurring_batch_count>\n  <ssl_recurring_id>030424MC8-629A1018-733E-4429-80D6-214EAB476108</ssl_recurring_id>\n  <ssl_result_message>SUCCESS</ssl_result_message>\n  <ssl_transaction_type>ECSDELETEINSTALL</ssl_transaction_type>\n  <ssl_result>0</ssl_result>\n  <ssl_card_type/>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "ECS_InstallmentAddtnlPayment": {
                      "summary": "Electronic Check Installment Additional Payment",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_cit_mit_cof_indicator>M01</ssl_cit_mit_cof_indicator>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_last_name>User</ssl_last_name>\n  <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>030424MC8-1635A7E6-4FFF-4A69-AE04-EFB344E75641</ssl_txn_id>\n  <ssl_approval_code>234123</ssl_approval_code>\n  <ssl_amount>5.00</ssl_amount>\n  <ssl_txn_time>04/03/2024 11:56:31 AM</ssl_txn_time>\n  <ssl_installment_id>030424MC8-629A1018-733E-4429-80D6-214EAB476108</ssl_installment_id>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_card_type>ELECTRONICCHECK</ssl_card_type>\n  <ssl_bank_account_type>0</ssl_bank_account_type>\n  <ssl_bank_account_number>43**********1244</ssl_bank_account_number>\n  <ssl_transaction_type>ECSINSTALLSALE</ssl_transaction_type>\n  <ssl_start_payment_date>mm/dd/yyyy</ssl_start_payment_date>\n  <ssl_next_payment_date>mm/dd/yyyy</ssl_next_payment_date>\n  <ssl_recurring_batch_count>998</ssl_recurring_batch_count>\n  <ssl_result_message>SUCCESS</ssl_result_message>\n  <ssl_first_name>Test</ssl_first_name>\n  <ssl_skip_payment>Y</ssl_skip_payment>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "GC_Activation": {
                      "summary": "Electronic Gift Card Activation",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_issuer_response>001</ssl_issuer_response>\n  <ssl_transaction_type>REDEMPTION</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>190324C44-616EE426-FE7E-4AFC-BBC9-C9B672615EB2</ssl_txn_id>\n  <ssl_approval_code>YGCNZ4</ssl_approval_code>\n  <ssl_amount>1.00</ssl_amount>\n  <ssl_txn_time>03/19/2024 11:24:00 AM</ssl_txn_time>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_exp_date>1225</ssl_exp_date>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_card_short_description>EGC</ssl_card_short_description>\n  <ssl_card_type>GIFTCARD</ssl_card_type>\n</txn>\n"
                    },
                    "GC_Token": {
                      "summary": "Electronic Gift Card Generate Token",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_token_provider>V</ssl_token_provider>\n  <ssl_exp_date>1225</ssl_exp_date>\n  <ssl_transaction_type>EGCGETTOKEN</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_card_short_description>EGC</ssl_card_short_description>\n  <ssl_token_response>SUCCESS</ssl_token_response>\n  <ssl_result>0</ssl_result>\n  <ssl_card_type>GIFTCARD</ssl_card_type>\n  <ssl_token>6698457700944348</ssl_token>\n</txn>                    \n"
                    },
                    "GC_Sale": {
                      "summary": "Gift Card Redemption",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_issuer_response>001</ssl_issuer_response>\n  <ssl_transaction_type>REDEMPTION</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>190324C44-616EE426-FE7E-4AFC-BBC9-C9B672615EB2</ssl_txn_id>\n  <ssl_approval_code>YGCNZ4</ssl_approval_code>\n  <ssl_amount>1.00</ssl_amount>\n  <ssl_txn_time>03/19/2024 11:24:00 AM</ssl_txn_time>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_exp_date>1225</ssl_exp_date>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_card_short_description>EGC</ssl_card_short_description>\n  <ssl_card_type>GIFTCARD</ssl_card_type>\n</txn>\n"
                    },
                    "GC_Refund": {
                      "summary": "Gift Card Refund",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_transaction_type>CARDRETURN</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>200324O2C-444D2268-8394-4587-ACC0-B79E06B220B3</ssl_txn_id>\n  <ssl_approval_code>G8UQTJ</ssl_approval_code>\n  <ssl_txn_time>03/20/2024 09:19:46 AM</ssl_txn_time>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_card_short_description>EGC</ssl_card_short_description>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_card_type>GIFTCARD</ssl_card_type>\n</txn>\n"
                    },
                    "GC_Credit": {
                      "summary": "Gift Card Credit",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_transaction_type>CARDRETURN</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>200324O2C-444D2268-8394-4587-ACC0-B79E06B220B3</ssl_txn_id>\n  <ssl_approval_code>ACDTEA</ssl_approval_code>\n  <ssl_txn_time>03/20/2024 09:19:46 AM</ssl_txn_time>\n  <ssl_exp_date>1225</ssl_exp_date>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_card_short_description>EGC</ssl_card_short_description>\n  <ssl_card_type>GIFTCARD</ssl_card_type>\n</txn>\n"
                    },
                    "GC_Inquiry": {
                      "summary": "Gift Card Balance Inquiry",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_issuer_response>001</ssl_issuer_response>\n  <ssl_transaction_type>INQUIRY</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>210324O2C-8A10A248-2F50-4CD4-8996-3396CD423444</ssl_txn_id>\n  <ssl_approval_code>XAAOKH</ssl_approval_code>\n  <ssl_txn_time>03/21/2024 09:35:50 AM</ssl_txn_time>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_exp_date>1225</ssl_exp_date>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_card_short_description>EGC</ssl_card_short_description>\n  <ssl_card_type>GIFTCARD</ssl_card_type>\n</txn>\n"
                    },
                    "GC_Reload": {
                      "summary": "Gift Card Reload",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_transaction_type>RELOAD</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>210324C45-AEB7F3BE-7AD7-4489-BD65-4220651EE0F2</ssl_txn_id>\n  <ssl_approval_code>00HAUP</ssl_approval_code>\n  <ssl_amount>1.00</ssl_amount>\n  <ssl_txn_time>03/21/2024 09:44:15 AM</ssl_txn_time>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_exp_date>1225</ssl_exp_date>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_card_short_description>EGC</ssl_card_short_description>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_card_type>GIFTCARD</ssl_card_type>\n  <ssl_egc_tender_type>Cash</ssl_egc_tender_type>\n</txn>  \n"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - The requested item is not found"
            },
            "5XX": {
              "description": "Server Error - Converge is experiencing an issue"
            }
          }
        }
      },
      "/VirtualMerchantDemo/processBatch.do": {
        "post": {
          "tags": [
            "Batch Processing"
          ],
          "summary": "Batch Processing",
          "operationId": "batch",
          "servers": [
            {
              "url": "https://api.demo.convergepay.com",
              "description": "Demo"
            },
            {
              "url": "https://api.convergepay.com/",
              "description": "Production"
            }
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/XMLBatch"
          },
          "responses": {
            "200": {
              "description": "Successful Operation",
              "content": {
                "text/xml": {
                  "schema": {
                    "allOf": [
                      {
                        "properties": {
                          "Batch Import Query Response": {
                            "$ref": "#/components/schemas/BatchImportQuery_Response"
                          },
                          "Batch Import Response": {
                            "$ref": "#/components/schemas/BatchImport_Response"
                          },
                          "Token Import Response": {
                            "$ref": "#/components/schemas/TokenImport_Response"
                          }
                        }
                      }
                    ]
                  },
                  "examples": {
                    "BatchImport": {
                      "summary": "Batch Import",
                      "value": "ssl_response_file: ImportFile051410025559\nssl_import_file:C:\\Program Files\\Elavon\\VirtualMerchant\\Import\\ImportFile.csv\nssl_transaction_type: ccimport\nssl_start_date: 05142010073000\nssl_end_date: 05142010073200\nssl_number_trans: 000100\nssl_account_id: my_account_id\nssl_pin: my_pin\nssl_user_id: my_user_id\nssl_result: 0\nssl_result_message: File Uploaded\nssl_recurring_batch_count: 250\n"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Check for syntax errors or missing parameters"
            },
            "401": {
              "description": "Unauthorized - Invalid authentication credentials"
            },
            "403": {
              "description": "Forbidden - Check IP address has been whitelisted and you have permission to perform the request"
            },
            "404": {
              "description": "Not Found - The requested item is not found"
            },
            "5XX": {
              "description": "Server Error - Converge is experiencing an issue"
            }
          }
        }
      },
      "/VirtualMerchantDemo/accountxml.do": {
        "post": {
          "tags": [
            "Terminal Management"
          ],
          "summary": "Get Terminal Info",
          "operationId": "account",
          "servers": [
            {
              "url": "https://api.demo.convergepay.com",
              "description": "Demo"
            },
            {
              "url": "https://api.convergepay.com",
              "description": "Production"
            }
          ],
          "x-codeSamples": [
            {
              "lang": "cURL",
              "source": "curl -X POST 'https://api.demo.convergepay.com/VirtualMerchantDemo/processxml.do' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode \n'xmldata= \n<txn>\n  <ssl_transaction_type>ccsale</ssl_transaction_type>\n  <ssl_account_id>my_account_id</ssl_account_id>\n  <ssl_user_id>my_user_id</ssl_user_id>\n  <ssl_pin>my_pin</ssl_pin>\n</txn>'\n"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Operation",
              "content": {
                "text/xml": {
                  "schema": {
                    "allOf": [
                      {
                        "properties": {
                          "Terminal Setup Response": {
                            "$ref": "#/components/schemas/TerminalSetup_Response"
                          },
                          "Payment Field Response": {
                            "$ref": "#/components/schemas/PaymentFields_Response"
                          },
                          "Printer Setup Response": {
                            "$ref": "#/components/schemas/PrinterSetup_Response"
                          }
                        }
                      }
                    ]
                  },
                  "examples": {
                    "TerminalSetup": {
                      "summary": "Terminal Setup",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <MerchantInformation>\n    <MerchantName>John Doe</MerchantName>\n    <Address1>123 OCT ST</Address1>\n    <Address2>123 OCT ST</Address2>\n    <City>KNOXVILLE</City>\n    <StateProvince>GA</StateProvince>\n    <PostalCode>37901</PostalCode>\n    <ContactName>John Doe</ContactName>\n    <ContactPhone1>9202209280</ContactPhone1>\n    <ContactPhone2>9202209280</ContactPhone2>\n    <ContactEmail>email@elavon.com</ContactEmail>\n    <TerminalEmail>email@elavon.com</TerminalEmail>\n    <SMSEmail>email@elavon.com</SMSEmail>\n    <MerchantURL>www.Convergepay.com</MerchantURL>\n    <MerchantLoyaltyURL></MerchantLoyaltyURL>\n    <BOSLanguage>FR</BOSLanguage>\n    <POSLanguage>EN</POSLanguage>\n  </MerchantInformation>\n  <TerminalInformation>\n    <vm_friendly_name>DCC 2 USA Internet</vm_friendly_name>\n    <vm_region>USA</vm_region>\n    <vm_time_zone>CST</vm_time_zone>\n    <vm_currency>USD</vm_currency>\n    <vm_market_segment>Internet</vm_market_segment>\n    <vm_status>ACTIVE</vm_status>\n    <vm_processing_type>Terminal Based</vm_processing_type>\n    <LegalName>aa</LegalName>\n    <LegalAddress1>aa</LegalAddress1>\n    <LegalAddress2>aa</LegalAddress2>\n    <LegalCity>aa</LegalCity>\n    <LegalState>aa</LegalState>\n    <LegalCountry>aa</LegalCountry>\n    <LegalPostalCode>aa</LegalPostalCode>\n    <ClientGroup>16</ClientGroup>\n    <KYC>\n      <VendorId/>\n      <InterfaceMethod/>\n      <IntegrationMethod/>\n    </KYC>\n    <vm_payment_types>\n      <Credit>Y</Credit>\n      <Debit>Y</Debit>\n      <Gift>Y</Gift>\n      <ECheck>Y</ECheck>\n      <FoodStamp>N</FoodStamp>\n      <CashBenefit>N</CashBenefit>\n      <Cash>N</Cash>\n      <Loyalty>N</Loyalty>\n      <CashAdvance>N</CashAdvance>\n    </vm_payment_types>\n    <vm_card_brands>\n      <MasterCard>Y</MasterCard>\n      <Visa>Y</Visa>\n      <AmEx>Y</AmEx>\n      <JCB>Y</JCB>\n      <CUP>Y</CUP>\n      <Discover>Y</Discover>\n    </vm_card_brands>\n    <vm_credit_option>\n      <AVS>Y</AVS>\n      <CVN>Y</CVN>\n      <PurchaseCard>Y</PurchaseCard>\n      <InvoiceNumber>Y</InvoiceNumber>\n      <DCC>N</DCC>\n      <MCC>N</MCC>\n      <Recurring>Y</Recurring>\n      <Last4digits>N</Last4digits>\n      <TravelData>N</TravelData>\n      <AccountUpdater>N</AccountUpdater>\n      <CreditSurcharge>N</CreditSurcharge>\n      <CreditSurchargePercent/>\n      <ServiceFee>\n        <ServiceFeeEnabled>N</ServiceFeeEnabled>\n        <ServiceFeeType>p</ServiceFeeType>\n        <ServiceFeeValue>1</ServiceFeeValue>\n        <ServiceFeeRefundable>N</ServiceFeeRefundable>\n      </ServiceFee>\n      <VisaAcquirerBIN/>\n      <MCAcquirerBIN/>\n    </vm_credit_option>\n    <vm_level3>N</vm_level3>\n    <vm_threeDS>N</vm_threeDS>\n    <vm_threeDS2>Y</vm_threeDS2>\n    <vm_catalog>N</vm_catalog>\n    <vm_dba>Y</vm_dba>\n    <vm_payfac>N</vm_payfac>\n    <vm_healthcare>Y</vm_healthcare>\n    <vm_recurring_option>\n      <Frequency/>\n      <Payments/>\n    </vm_recurring_option>\n    <vm_debit_option>\n      <Cashback>N</Cashback>\n      <CashbackMaxAmount/>\n      <Surcharge>N</Surcharge>\n      <SurchargeAmount/>\n      <PinlessDebitEnabled>N</PinlessDebitEnabled>\n      <OCTDisbursement>Y</OCTDisbursement>\n      <OCTBusinessAppID>FD</OCTBusinessAppID>\n      <OCTFunding>N</OCTFunding>\n      <DBPreAuth>N</DBPreAuth>\n      <AuthLifCycleIndicator/>\n      <AuthLifCycleDuration/>\n    </vm_debit_option>\n    <vm_echeck_option>\n      <CheckType>ACHECHECK</CheckType>\n      <TransactionType>CONVERSIONONLY</TransactionType>\n      <ImageUploadOption>A</ImageUploadOption>\n      <CheckProvider>P</CheckProvider>\n      <Recurring>Y</Recurring>\n    </vm_echeck_option>\n    <vm_transaction_entry>\n      <EnableHTTPSTransaction>Y</EnableHTTPSTransaction>\n      <EnableHTTPSBatch>Y</EnableHTTPSBatch>\n      <EnableVMM>Y</EnableVMM>\n    </vm_transaction_entry>\n    <vm_tokenization>Y</vm_tokenization>\n    <vm_gift_loyalty_option>\n      <security_code>N</security_code>\n    </vm_gift_loyalty_option>\n    <cvm_options>\n      <cvm_signature>enabled_all</cvm_signature>\n    </cvm_options>\n    <pinless_debit_threshold>50</pinless_debit_threshold>\n    <msd_contactless_enabled>N</msd_contactless_enabled>\n    <vm_export_script>Y</vm_export_script>\n    <vm_billing_invoice>\n      <billingInvoicingEnabled>Y</billingInvoicingEnabled>\n      <billingMerchantId>805591c4-71a5-4d04-b262-d0df75f2af86</billingMerchantId>\n    </vm_billing_invoice>\n    <vm_wallet>\n      <MasterPass>Y</MasterPass>\n      <VisaCheckout>N</VisaCheckout>\n      <PayPal>Y</PayPal>\n      <ApplePay>N</ApplePay>\n    </vm_wallet>\n  </TerminalInformation>\n</txn>\n"
                    },
                    "FieldSetup": {
                      "summary": "Field Setup",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <Section>\n    <Name>OrderSection</Name>\n    <DisplayName>Order Section</DisplayName>\n    <ShowinVT>Y</ShowinVT>\n    <ShowOnPaymentForm>Y</ShowOnPaymentForm>\n    <ShowinReceipt>Y</ShowinReceipt>\n    <CustomerEmail>Y</CustomerEmail>\n    <MerchantEmail>Y</MerchantEmail>\n    <Field>\n      <Name>ssl_account_data</Name>\n      <DisplayName>Order Section</DisplayName>\n      <Section>OrderSection</Section>\n      <FieldType>TEXT</FieldType>\n      <Min>0</Min>\n      <Max>19</Max>\n      <Required>Y</Required>\n      <ShowinVT>Y</ShowinVT>\n      <ChangedOnPaymentForm>N</ChangedOnPaymentForm>\n      <ShowOnPaymentForm>Y</ShowOnPaymentForm>\n      <ShowinReceipt>Y</ShowinReceipt>\n      <CustomerEmail>Y</CustomerEmail>\n      <MerchantEmail>Y</MerchantEmail>\n      <ForwardOnApproval>Y</ForwardOnApproval>\n      <ForwardOnDecline>Y</ForwardOnDecline>\n      <SystemField>Y</SystemField>\n    </Field>\n  </Section>\n  <Section>\n    <Name>CustomFields</Name>\n    <DisplayName>Custom Fields</DisplayName>\n    <ShowinVT>Y</ShowinVT>\n    <ShowOnPaymentForm>Y</ShowOnPaymentForm>\n    <ShowinReceipt>Y</ShowinReceipt>\n    <CustomerEmail>Y</CustomerEmail>\n    <MerchantEmail>Y</MerchantEmail>\n    <Field>\n      <Name>MyCustom</Name>\n      <DisplayName>Custom Fields</DisplayName>\n      <Section>CustomFields</Section>\n      <FieldType>TEXT</FieldType>\n      <Min>5</Min>\n      <Max>12</Max>\n      <Required>Y</Required>\n      <ShowinVT>Y</ShowinVT>\n      <ChangedOnPaymentForm>Y</ChangedOnPaymentForm>\n      <ShowOnPaymentForm>Y</ShowOnPaymentForm>\n      <ShowinReceipt>Y</ShowinReceipt>\n      <CustomerEmail>Y</CustomerEmail>\n      <MerchantEmail>Y</MerchantEmail>\n      <ForwardOnApproval>N</ForwardOnApproval>\n      <ForwardOnDecline>N</ForwardOnDecline>\n      <SystemField>N</SystemField>\n    </Field>\n  </Section>\n</txn>\n"
                    },
                    "PrinterSetup": {
                      "summary": "Printer Setup",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <PrinterOptions>\n    <PrinterType>No Printer</PrinterType>\n    <PaperType>Multi Ply</PaperType>\n  </PrinterOptions>\n  <ReceiptHeaderOptions>\n    <Justification>Left</Justification>\n    <HeaderLine1>WIE TEST</HeaderLine1>\n    <HeaderLine2/>\n    <HeaderLine3/>\n    <HeaderLine4/>\n    <HeaderLine5/>\n  </ReceiptHeaderOptions>\n  <ReceiptTrailerOptions>\n    <Justification>Center</Justification>\n    <TrailerLine1>WIETEST</TrailerLine1>\n    <TrailerLine2/>\n  </ReceiptTrailerOptions>\n  <ReceiptCustomFields>\n    <CustomLabel1/>\n    <CustomField1/>\n    <CustomLabel2/>\n    <CustomField2/>\n    <CustomLabel3/>\n    <CustomField3/>\n    <CustomLabel4/>\n    <CustomField4/>\n    <CustomLabel5/>\n    <CustomField5/>\n    <CustomLabel6/>\n    <CustomField6/>\n    <CustomLabel7/>\n    <CustomField7/>\n    <CustomLabel8/>\n    <CustomField8/>\n    <CustomLabel9/>\n    <CustomField9/>\n    <CustomLabel10/>\n    <CustomField10/>\n  </ReceiptCustomFields>\n</txn>\n"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Check for syntax errors or missing parameters"
            },
            "401": {
              "description": "Unauthorized - Invalid authentication credentials"
            },
            "403": {
              "description": "Forbidden - Check IP address has been whitelisted and you have permission to perform the request"
            },
            "404": {
              "description": "Not Found - The requested item is not found"
            },
            "5XX": {
              "description": "Server Error - Converge is experiencing an issue"
            }
          },
          "requestBody": {
            "$ref": "#/components/requestBodies/XMLAccount"
          }
        }
      },
      "/VirtualMerchantDemo/processxml.do": {
        "post": {
          "tags": [
            "Non-Elavon Certified Device"
          ],
          "summary": "In-Person Transaction",
          "operationId": "inperson",
          "servers": [
            {
              "url": "https://api.demo.convergepay.com",
              "description": "Demo"
            }
          ],
          "x-codeSamples": [
            {
              "lang": "cURL",
              "source": "curl -X POST 'https://api.demo.convergepay.com/VirtualMerchantDemo/processxml.do' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode \n'xmldata= \n<txn>\n  <ssl_transaction_type>ccsale</ssl_transaction_type>\n  <ssl_account_id>my_account_id</ssl_account_id>\n  <ssl_user_id>my_user_id</ssl_user_id>\n  <ssl_pin>my_pin</ssl_pin>\n  <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n  <ssl_track_data></ssl_track_data>\n  <ssl_amount>25.00</ssl_amount>\n  <ssl_mobile_id>123 Main St</ssl_mobile_id>\n  <ssl_pos_mode>01</ssl_pos_mode>\n  <ssl_entry_mode>03</ssl_entry_mode>\n</txn>'\n"
            }
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/XMLProcessInPerson"
          },
          "responses": {
            "200": {
              "description": "Successful Operation",
              "content": {
                "text/xml": {
                  "schema": {
                    "allOf": [
                      {
                        "properties": {
                          "Transaction Response": {
                            "$ref": "#/components/schemas/Transaction_Response"
                          },
                          "Token Response": {
                            "$ref": "#/components/schemas/Token_Response"
                          },
                          "Token Query Response": {
                            "$ref": "#/components/schemas/TokenQuery_Response"
                          },
                          "End of Day Summary Response": {
                            "$ref": "#/components/schemas/EODSummary_Response"
                          },
                          "Tip Response": {
                            "$ref": "#/components/schemas/Tip_Response"
                          },
                          "Address Verification Response": {
                            "$ref": "#/components/schemas/Address_Response"
                          },
                          "Paper Check Response": {
                            "$ref": "#/components/schemas/Paper_Check_Response"
                          },
                          "Bin Lookup Response": {
                            "$ref": "#/components/schemas/BinLookup_Response"
                          },
                          "Error Response": {
                            "$ref": "#/components/schemas/Error_Response"
                          }
                        }
                      }
                    ]
                  },
                  "examples": {
                    "CC_Sale": {
                      "summary": "Credit Card Sale",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_amount>1.00</ssl_amount>\n  <ssl_result>0</ssl_result>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_txn_id>my_txn_id</ssl_txn_id>\n  <ssl_approval_code>CMC142</ssl_approval_code>\n  <ssl_account_balance>1.00</ssl_account_balance>\n  <ssl_txn_time>10/20/2025 01:07:23 PM</ssl_txn_time>\n</txn>\n"
                    },
                    "CC_Sale_UseToken": {
                      "summary": "Credit Card Sale (using Token)",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n    <ssl_cit_mit_cof_indicator>M01</ssl_cit_mit_cof_indicator>\n    <ssl_issuer_response>00</ssl_issuer_response>\n    <ssl_last_name></ssl_last_name>\n    <ssl_company></ssl_company>\n    <ssl_phone></ssl_phone>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_departure_date></ssl_departure_date>\n    <ssl_merchant_txn_id></ssl_merchant_txn_id>\n    <ssl_oar_data>12345678998765008170000047554200000000000388956327020112608</ssl_oar_data>\n    <ssl_result>0</ssl_result>\n    <ssl_txn_id>my_txn_id</ssl_txn_id>\n    <ssl_avs_response>Z</ssl_avs_response>\n    <ssl_approval_code>11116</ssl_approval_code>\n    <ssl_email></ssl_email>\n    <ssl_amount>1.50</ssl_amount>\n    <ssl_avs_zip>12345</ssl_avs_zip>\n    <ssl_txn_time>09/27/2030 04:08:17 PM</ssl_txn_time>\n    <ssl_description></ssl_description>\n    <ssl_vendor_id>Jim</ssl_vendor_id>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_card_short_description>VISA</ssl_card_short_description>\n    <ssl_get_token>N</ssl_get_token>\n    <ssl_completion_date></ssl_completion_date>\n    <ssl_address2></ssl_address2>\n    <ssl_token_response>SUCCESS</ssl_token_response>\n    <ssl_credit_surcharge_amount></ssl_credit_surcharge_amount>\n    <ssl_customer_code></ssl_customer_code>\n    <ssl_country></ssl_country>\n    <ssl_card_type>CREDITCARD</ssl_card_type>\n    <ssl_token_format>N</ssl_token_format>\n    <ssl_token_provider>V</ssl_token_provider>\n    <ssl_transaction_type>SALE</ssl_transaction_type>\n    <ssl_salestax></ssl_salestax>\n    <ssl_avs_address>123 Main St</ssl_avs_address>\n    <ssl_account_balance>0.00</ssl_account_balance>\n    <ssl_ps2000_data>my_ps2000_data</ssl_ps2000_data>\n    <ssl_state></ssl_state>\n    <ssl_city></ssl_city>\n    <ssl_result_message>APPROVAL</ssl_result_message>\n    <ssl_first_name></ssl_first_name>\n    <ssl_invoice_number>INV001</ssl_invoice_number>\n    <ssl_cvv2_response></ssl_cvv2_response>\n    <ssl_token>my_token</ssl_token>\n    <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "CC_Sale_Token": {
                      "summary": "Credit Card Sale (with Token Generation)",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n    <ssl_approval_code>CVI194</ssl_approval_code>\n    <ssl_dynamic_dba/>21, 17, or 12 length>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_server />\n    <ssl_account_balance>12.00</ssl_account_balance>\n    <ssl_token>my_token</ssl_token>\n    <ssl_get_token>Y</ssl_get_token>\n    <ssl_result_message>APPROVAL</ssl_result_message>\n    <ssl_token_response>SUCCESS</ssl_token_response>\n    <ssl_base_amount>12.00</ssl_base_amount>\n    <ssl_amount>12.00</ssl_amount>\n    <ssl_txn_id>my_txn_id</ssl_txn_id>\n    <ssl_result>0</ssl_result>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_txn_time>09/26/2025 02:50:56 PM</ssl_txn_time>\n    <ssl_avs_response>S</ssl_avs_response>\n    <ssl_cvv2_response>M</ssl_cvv2_response>\n</txn>\n"
                    },
                    "CC_AuthOnly": {
                      "summary": "Credit Card Auth Only",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_oar_data>010013241303160120280000047554200000000000939515407601132413</ssl_oar_data>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>150324C55-64845CF5-B028-4668-A49E-ABA438BA6080</ssl_txn_id>\n  <ssl_avs_response> </ssl_avs_response>\n  <ssl_approval_code>939515</ssl_approval_code>\n  <ssl_amount>1.00</ssl_amount>\n  <ssl_txn_time>03/15/2024 08:20:28 PM</ssl_txn_time>\n  <ssl_exp_date>1249</ssl_exp_date>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_completion_date/>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_customer_code/>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_transaction_type>AUTHONLY</ssl_transaction_type>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_ps2000_data>A7540760482850875100A</ssl_ps2000_data>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_invoice_number>INV001</ssl_invoice_number>\n  <ssl_cvv2_response>M</ssl_cvv2_response>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "CC_Verify": {
                      "summary": "Credit Card Verify",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>      \n<txn>\n  <ssl_issuer_response>85</ssl_issuer_response>\n  <ssl_transaction_type>CARDVERIFICATION</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_oar_data>010001417004271858400427027344400000000000669325MCC244536</ssl_oar_data>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>270422A41-376C2756-F972-49EB-8BDD-A78F4C301F73</ssl_txn_id>\n  <ssl_brand_token_eligibility_indicator>1</ssl_brand_token_eligibility_indicator>\n  <ssl_avs_response>A</ssl_avs_response>\n  <ssl_approval_code>669325</ssl_approval_code>\n  <ssl_txn_time>04/27/2022 02:58:40 PM</ssl_txn_time>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_ps2000_data>MMCC244536      0427</ssl_ps2000_data>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_card_short_description>MC</ssl_card_short_description>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_cvv2_response>M</ssl_cvv2_response>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>   \n"
                    },
                    "CC_Balinquiry": {
                      "summary": "Credit Card Balance Inquiry",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<txn>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>200324C55-27E69C3A-B704-4F5C-973E-ED49EF55946B</ssl_txn_id>\n  <ssl_avs_response> </ssl_avs_response>\n  <ssl_approval_code>273201</ssl_approval_code>\n  <ssl_txn_time>03/20/2024 10:02:12 AM</ssl_txn_time>\n  <ssl_exp_date>1234</ssl_exp_date>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_transaction_type>INQUIRY</ssl_transaction_type>\n  <ssl_avs_address/>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "CC_UpdateTip": {
                      "summary": "Credit Card Update Tip",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<txn>\n  <ssl_result_message>SUCCESS</ssl_result_message>\n  <ssl_transaction_type>UPDATETIP</ssl_transaction_type>\n  <ssl_base_amount>1.00</ssl_base_amount>\n  <ssl_card_short_description/>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>220324C55-5703A3F5-CA40-421A-B734-1D1C4545FF6E</ssl_txn_id>\n  <ssl_tip_amount>1.50</ssl_tip_amount>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_amount>2.50</ssl_amount>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "CC_Signature": {
                      "summary": "Credit Card Signature",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_transaction_type>CCSIGNATURE</ssl_transaction_type>\n  <ssl_result>0</ssl_result>\n  <ssl_result_message>SUCCESS</ssl_result_message>\n</txn>\n"
                    },
                    "Token_Generate": {
                      "summary": "Token Generate (with Verification)",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_cit_mit_cof_indicator>M01</ssl_cit_mit_cof_indicator>\n  <ssl_last_name>Smith</ssl_last_name>\n  <ssl_company></ssl_company>\n  <ssl_phone></ssl_phone>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_merchant_txn_id></ssl_merchant_txn_id>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>my_txn_id</ssl_txn_id>\n  <ssl_avs_response>Z</ssl_avs_response>\n  <ssl_approval_code>000000</ssl_approval_code>\n  <ssl_email></ssl_email>\n  <ssl_avs_zip>12345</ssl_avs_zip>\n  <ssl_txn_time>09/19/2030 03:42:58 PM</ssl_txn_time>\n  <ssl_description></ssl_description>\n  <ssl_vendor_id>My ID</ssl_vendor_id>\n  <ssl_exp_date>1230</ssl_exp_date>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_address2></ssl_address2>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_token_response>SUCCESS</ssl_token_response>\n  <ssl_credit_surcharge_amount></ssl_credit_surcharge_amount>\n  <ssl_customer_code></ssl_customer_code>\n  <ssl_country></ssl_country>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_token_format>N</ssl_token_format>\n  <ssl_token_provider>V</ssl_token_provider>\n  <ssl_transaction_type>GETTOKEN</ssl_transaction_type>\n  <ssl_salestax></ssl_salestax>\n  <ssl_avs_address>123 Main St</ssl_avs_address>\n  <ssl_customer_id></ssl_customer_id>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_state></ssl_state>\n  <ssl_city></ssl_city>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_first_name></ssl_first_name>\n  <ssl_invoice_number></ssl_invoice_number>\n  <ssl_cvv2_response>M</ssl_cvv2_response>\n  <ssl_token>my_token</ssl_token>\n  <ssl_add_token_response>Card Added</ssl_add_token_response>\n</txn>\n"
                    },
                    "DB_OctDisbursement_Transaction": {
                      "summary": "Debit Card Straight Send",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n    <ssl_cit_mit_cof_indicator>M01</ssl_cit_mit_cof_indicator>\n    <ssl_issuer_response>00</ssl_issuer_response>\n    <ssl_token_format>U</ssl_token_format>\n    <ssl_token_provider>P</ssl_token_provider>\n    <ssl_transaction_type>OCTDISBURSEMENT</ssl_transaction_type>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_oar_data/>\n    <ssl_result>0</ssl_result>\n    <ssl_txn_id>050723OE-15DC810B-C841-4834-BD7E-C8B3D2589EC6</ssl_txn_id>\n    <ssl_approval_code>UOC003</ssl_approval_code>\n    <ssl_amount>30.00</ssl_amount>\n    <ssl_txn_time>07/05/2023 10:39:25 AM</ssl_txn_time>\n    <ssl_account_balance>0.00</ssl_account_balance>\n    <ssl_ps2000_data/>\n    <ssl_oct_ref_number>1234531822</ssl_oct_ref_number>\n    <ssl_reference_number>765003</ssl_reference_number>\n    <ssl_result_message>APPROVAL</ssl_result_message>\n    <ssl_base_amount>30.00</ssl_base_amount>\n    <ssl_card_short_description>MC</ssl_card_short_description>\n    <ssl_get_token>Y</ssl_get_token>\n    <ssl_token_response>SUCCESS</ssl_token_response>\n    <ssl_card_type>DEBITCARD</ssl_card_type>\n    <ssl_token>5849014710221002</ssl_token>\n    <ssl_add_token_response>Card Added</ssl_add_token_response>\n    <ssl_partner_app_id>01</ssl_partner_app_id>\n    <ssl_middle_name>Middle</ssl_middle_name>\n    <ssl_name_verification>ANVF</ssl_name_verification>\n</txn>\n"
                    },
                    "DB_Authonly_Transaction": {
                      "summary": "Debit Card Auth Only",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_oar_data>01007021562403201452170320114080967937143704008*1FS018101905</ssl_oar_data>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>200324C55-59B0BF38-7ECC-4DA1-8CB2-102273C33C23</ssl_txn_id>\n  <ssl_approval_code>CFS408</ssl_approval_code>\n  <ssl_amount>10.00</ssl_amount>\n  <ssl_auth_lifecycle_duration>11</ssl_auth_lifecycle_duration>\n  <ssl_txn_time>03/20/2024 02:52:17 PM</ssl_txn_time>\n  <ssl_card_short_description>MC</ssl_card_short_description>\n  <ssl_card_type>DEBITCARD</ssl_card_type>\n  <ssl_transaction_type>AUTHONLY</ssl_transaction_type>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_ps2000_data>P117534458229 240320</ssl_ps2000_data>\n  <ssl_auth_lifecycle_indicator>2</ssl_auth_lifecycle_indicator>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n</txn>\n"
                    },
                    "BIN_Lookup_Transaction": {
                      "summary": "Bin Lookup",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <cardNumber>4485********6668</cardNumber>\n  <debit>Y</debit>\n  <surchargeAllowed>Y</surchargeAllowed>\n  <fundingSource>C</fundingSource>\n  <pinlessDebitEnabled>N</pinlessDebitEnabled>\n  <hsa>N</hsa>\n  <billPaymentSupport>N</billPaymentSupport>\n  <businessCard>N</businessCard>\n  <cardProductTypeCode/>\n  <countryCode/>\n  <dbIntchFraudInd/>\n  <ecommSupport>N</ecommSupport>\n  <institutionName/>\n  <internationalSupport>N</internationalSupport>\n  <networkRoutingCode/>\n  <posEligible>N</posEligible>\n  <prepaidSupport>N</prepaidSupport>\n  <signatureSupport>N</signatureSupport>\n  <quickServeSupport>N</quickServeSupport>\n  <pinlessDebitThreshold>50</pinlessDebitThreshold>\n  <octeligible>N</octeligible>\n  <accountRequestStatus>00</accountRequestStatus>\n  <fullNameResult>01</fullNameResult>\n  <firstNameResult>01</firstNameResult>\n  <middleNameResult>01</middleNameResult>\n  <lastNameResult>01</lastNameResult>\n</txn>\n"
                    },
                    "EMV_Swipe_Authonly": {
                      "summary": "EMV Swipe Auth Only",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_transaction_type>emvswipeauthonly<ssl_transaction_type>\n  <ssl_response_code><ssl_response_code>\n  <ssl_txn_id>280223C4A-6D9F0B37-B5BB-46BF-9F22-10F27A8C1B64<ssl_txn_id>\n  <ssl_txn_time>02/28/2023 04:53:56 PM</ssl_txn_time>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_issuer_response></ssl_issuer_response>\n  <ssl_account_balance></ssl_account_balance>\n  <ssl_ps2000_data><ssl_ps2000_data>\n  <ssl_oar_data></ssl_oar_data>\n  <ssl_card_scheme>MASTERCARD</ssl_card_scheme>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_result>0</ssl_result>\n  <ssl_approval_code></ssl_approval_code>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_exp_date>1225</ssl_exp_date>\n  <ssl_base_amount>7.00</ssl_base_amount>\n  <ssl_tip_amount/>\n  <ssl_amount>7.00</ssl_amount>\n  <ssl_card_short_description>MC</ssl_card_short_description>\n  <ssl_customer_code></ssl_customer_code>\n  <ssl_salestax></ssl_salestax>\n  <ssl_invoice_number>52164</ssl_invoice_number>\n  <ssl_description>Test Description</ssl_description>\n  <ssl_server>Test</ssl_server>\n  <ssl_shift>Dinner</ssl_shift>\n  <ssl_partial_shipment_flag>N</ssl_partial_shipment_flag>\n  <ssl_company>Elavon</ssl_company>\n  <ssl_first_name/><ssl_last_name/>\n  <ssl_avs_address>Test Address</ssl_avs_address>\n  <ssl_address2>Second Address</ssl_address2>\n  <ssl_city>Atlanta</ssl_city>\n  <ssl_state>GA</ssl_state>\n  <ssl_avs_zip></ssl_avs_zip>\n  <ssl_country></ssl_country>\n  <ssl_phone></ssl_phone>\n  <ssl_email></ssl_email>\n  <ssl_ship_to_company></ssl_ship_to_company>\n  <ssl_ship_to_first_name></ssl_ship_to_first_name>\n  <ssl_ship_to_last_name></ssl_ship_to_last_name>\n  <ssl_ship_to_address1></ssl_ship_to_address1>\n  <ssl_ship_to_address2></ssl_ship_to_address2>\n  <ssl_ship_to_city></ssl_ship_to_city>\n  <ssl_ship_to_state></ssl_ship_to_state>\n  <ssl_ship_to_zip></ssl_ship_to_zip>\n  <ssl_ship_to_country></ssl_ship_to_country>\n  <ssl_ship_to_phone></ssl_ship_to_phone>\n  <CustomField1/>\n  <ssl_token_response>SUCCESS</ssl_token_response>\n  <ssl_token></ssl_token>\n  <ssl_get_token>Y</ssl_get_token>\n  <ssl_add_token_response>Card Updated</ssl_add_token_response>\n  <ssl_partner_app_id></ssl_partner_app_id>\n</txn>    \n"
                    },
                    "EMV_Chip_Authonly": {
                      "summary": "EMV Chip Auth Only",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_transaction_type>emvchipauthonly</ssl_transaction_type>\n  <ssl_response_code></ssl_response_code>\n  <ssl_icc_csn></ssl_icc_csn>\n  <ssl_icc_atc></ssl_icc_atc>\n  <ssl_icc_arpc></ssl_icc_arpc>\n  <ssl_icc_issuerscript/>\n  <ssl_icc_cardtype>CREDITCARD</ssl_icc_cardtype>\n  <ssl_icc_aid></ssl_icc_aid>\n  <ssl_icc_iad></ssl_icc_iad>\n  <ssl_icc_tvr></ssl_icc_tvr>\n  <ssl_icc_tsi></ssl_icc_tsi>\n  <ssl_icc_app_name>MastercardCredit/MasterCard</ssl_icc_app_name>\n  <ssl_icc_arc></ssl_icc_arc>\n  <ssl_icc_cvmr></ssl_icc_cvmr>\n  <ssl_txn_id>280223C4A-EC337BA7-E554-48EA-A712-A71592A82565</ssl_txn_id>\n  <ssl_txn_time>02/28/2023 04:49:24 PM</ssl_txn_time>\n  <ssl_card_type>CREDITCARD</ssl_card_type>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_ps2000_data></ssl_ps2000_data>\n  <ssl_oar_data>010001398302282149240228000173400000000000039166MCC142278</ssl_oar_data>\n  <ssl_card_scheme></ssl_card_scheme>\n  <ssl_result_message></ssl_result_message>\n  <ssl_result>0</ssl_result>\n  <ssl_update_emv_keys>N</ssl_update_emv_keys>\n  <ssl_approval_code></ssl_approval_code>\n  <ssl_exp_date></ssl_exp_date>\n  <ssl_base_amount></ssl_base_amount>\n  <ssl_tip_amount/>\n  <ssl_amount></ssl_amount>\n  <ssl_card_short_description>MC</ssl_card_short_description>\n  <ssl_customer_code></ssl_customer_code>\n  <ssl_salestax></ssl_salestax>\n  <ssl_invoice_number></ssl_invoice_number>\n  <ssl_description></ssl_description>\n  <ssl_server></ssl_server>\n  <ssl_shift></ssl_shift>\n  <ssl_partial_shipment_flag></ssl_partial_shipment_flag>\n  <ssl_company>/ssl_company>\n  <ssl_first_name></ssl_first_name>\n  <ssl_last_name></ssl_last_name>\n  <ssl_avs_address></ssl_avs_address>\n  <ssl_address2>/ssl_address2>\n  <ssl_city></ssl_city>\n  <ssl_state></ssl_state>\n  <ssl_avs_zip></ssl_avs_zip>\n  <ssl_country></ssl_country>\n  <ssl_phone></ssl_phone>\n  <ssl_email></ssl_email>\n  <ssl_ship_to_company></ssl_ship_to_company>\n  <ssl_ship_to_first_name></ssl_ship_to_first_name>\n  <ssl_ship_to_last_name></ssl_ship_to_last_name>\n  <ssl_ship_to_address1></ssl_ship_to_address1>\n  <ssl_ship_to_address2></ssl_ship_to_address2>\n  <ssl_ship_to_city></ssl_ship_to_city>\n  <ssl_ship_to_state></ssl_ship_to_state>\n  <ssl_ship_to_zip></ssl_ship_to_zip>\n  <ssl_ship_to_country></ssl_ship_to_country>\n  <ssl_ship_to_phone></ssl_ship_to_phone>\n  <CustomField1/>\n  <ssl_token_response></ssl_token_response>\n  <ssl_token></ssl_token>\n  <ssl_get_token></ssl_get_token>\n  <ssl_add_token_response></ssl_add_token_response>\n  <ssl_partner_app_id></ssl_partner_app_id>\n</txn>\n"
                    },
                    "EMV_DCC_Check": {
                      "summary": "EMV DCC Check (For DCC Eligible)",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_result>0</ssl_result>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_txn_time>06/13/2024 10:48:10 AM</ssl_txn_time>\n  <ssl_conversion_rate></ssl_conversion_rate>\n  <ssl_dcc_exponent></ssl_dcc_exponent>\n  <ssl_amount></ssl_amount>\n  <ssl_cardholder_amount></ssl_cardholder_amount>\n  <ssl_cardholder_currency></ssl_cardholder_currency>\n  <ssl_merchant_currency></ssl_merchant_currency>\n  <ssl_markup></ssl_markup>\n  <ssl_dcc_rate_provider></ssl_dcc_rate_provider>\n  <ssl_dcc_token></ssl_dcc_token>\n</txn>   \n"
                    },
                    "EBT_Purchase": {
                      "summary": "EBT Food Stamp Purchase",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_transaction_type>PURCHASE</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_oar_data/>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>250324O24-B1FE06CF-E61B-4041-9C95-E781A2FE800F</ssl_txn_id>\n  <ssl_approval_code>702568</ssl_approval_code>\n  <ssl_amount>1.00</ssl_amount>\n  <ssl_txn_time>03/25/2024 11:23:51 AM</ssl_txn_time>\n  <ssl_account_balance>100.00</ssl_account_balance>\n  <ssl_ps2000_data/>\n  <ssl_reference_number>41031</ssl_reference_number>\n  <ssl_exp_date>1224</ssl_exp_date>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_card_type>FOODSTAMP</ssl_card_type>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "EBT_Return": {
                      "summary": "EBT Food Stamp Return",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_transaction_type>RETURN</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>250324O24-ECD32CF6-16D2-4482-B1AE-8FB31D86727B</ssl_txn_id>\n  <ssl_approval_code>702603</ssl_approval_code>\n  <ssl_amount>1.00</ssl_amount>\n  <ssl_txn_time>03/25/2024 04:14:26 PM</ssl_txn_time>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_reference_number>58466</ssl_reference_number>\n  <ssl_exp_date>1224</ssl_exp_date>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_card_type>FOODSTAMP</ssl_card_type>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "EBT_Inquiry": {
                      "summary": "EBT Food Stamp Inquiry",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_transaction_type>INQUIRY</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>250324O25-4D0EDDD9-4483-482B-A38E-994310799F62</ssl_txn_id>\n  <ssl_approval_code>702605</ssl_approval_code>\n  <ssl_txn_time>03/25/2024 04:21:43 PM</ssl_txn_time>\n  <ssl_account_balance>100.00</ssl_account_balance>\n  <ssl_reference_number>58903</ssl_reference_number>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_card_type>FOODSTAMP</ssl_card_type>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n  </txn>\n"
                    },
                    "EBT_ForcePurchase": {
                      "summary": "EBT Food Stamp Force Purchase",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_transaction_type>FORCEPURCHASE</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_oar_data/>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>250324C4A-B071C5B5-F90C-48DB-B99D-2FCE7755738F</ssl_txn_id>\n  <ssl_approval_code>702607</ssl_approval_code>\n  <ssl_amount>1.00</ssl_amount>\n  <ssl_txn_time>03/25/2024 04:36:53 PM</ssl_txn_time>\n  <ssl_account_balance>100.00</ssl_account_balance>\n  <ssl_ps2000_data/>\n  <ssl_reference_number>59813</ssl_reference_number>\n  <ssl_voucher_number>501398600014659</ssl_voucher_number>\n  <ssl_exp_date>1225</ssl_exp_date>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_card_type>FOODSTAMP</ssl_card_type>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "EBT_ForceReturn": {
                      "summary": "EBT Food Stamp Force Return",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_transaction_type>FORCERETURN</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>250324C4B-172A135D-DA01-41CF-BDD6-FC71251D3128</ssl_txn_id>\n  <ssl_approval_code>702606</ssl_approval_code>\n  <ssl_amount>1.00</ssl_amount>\n  <ssl_txn_time>03/25/2024 04:36:42 PM</ssl_txn_time>\n  <ssl_account_balance>0.00</ssl_account_balance>\n  <ssl_reference_number>59802</ssl_reference_number>\n  <ssl_voucher_number>501398600014659</ssl_voucher_number>\n  <ssl_exp_date>1225</ssl_exp_date>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_card_short_description>VISA</ssl_card_short_description>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_card_type>FOODSTAMP</ssl_card_type>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "EBT_CashBenefit_Purchase": {
                      "summary": "EBT Cash Benefit Purchase",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_transaction_type>PURCHASE</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>160121AD4-63FCCB56-7399-40AF-AD2E-\n  46ED7B604D58</ssl_txn_id>\n  <ssl_approval_code>500415</ssl_approval_code>\n  <ssl_email/>\n  <ssl_amount>2.00</ssl_amount>\n  <ssl_txn_time>04/01/2024 12:34:19 PM</ssl_txn_time>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_card_type>CASHBENEFIT</ssl_card_type>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "EBT_CashBenefit_Inquiry": {
                      "summary": "Cash Benefit Inquiry",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_issuer_response>00</ssl_issuer_response>\n  <ssl_transaction_type>INQUIRY</ssl_transaction_type>\n  <ssl_card_number>4000000000000002</ssl_card_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>010424C55-75C44D44-CB11-4EAE-84D7-387600B61B64</ssl_txn_id>\n  <ssl_approval_code>703115</ssl_approval_code>\n  <ssl_amount>0.00</ssl_amount>\n  <ssl_txn_time>04/01/2024 12:19:19 PM</ssl_txn_time>\n  <ssl_account_balance>100.00</ssl_account_balance>\n  <ssl_reference_number>44359</ssl_reference_number>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_base_amount>0</ssl_base_amount>\n  <ssl_card_type>CASHBENEFIT</ssl_card_type>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>                    \n"
                    },
                    "PaperCheck_Purchase": {
                      "summary": "Check Purchase",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_approval_code>NACREN</ssl_approval_code>\n  <ssl_agree>1</ssl_agree>\n  <ssl_transaction_type>CONVERSIONONLY</ssl_transaction_type>\n  <ssl_card_type>ELECTRONICCHECK</ssl_card_type>\n  <ssl_micr_data>T1**********1234</ssl_micr_data>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_aba_number>490000018</ssl_aba_number>\n  <ssl_reference_number>212182533</ssl_reference_number>\n  <ssl_base_amount>20.00</ssl_base_amount>\n  <ssl_amount>20.00</ssl_amount>\n  <ssl_txn_id>AA49315-2C70E99A-F9E0-4C65-9339- F8E6AB917B4A</ssl_txn_id>\n  <ssl_drivers_license_state>ON</ssl_drivers_license_state>\n  <ssl_drivers_license_number>*******1234</ssl_drivers_license_number>\n  <ssl_drivers_license_phone_number>1234567890</ssl_drivers_license_phone_number>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_time>02/12/2024 11:25:33 AM</ssl_txn_time>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n</txn>\n"
                    },
                    "Cash_Sale": {
                      "summary": "Cash Sale",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_transaction_type>SALE</ssl_transaction_type>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>200324C55-F1C96645-9627-4635-AA43-85AAF3C4CDE1</ssl_txn_id>\n  <ssl_amount>13.00</ssl_amount>\n  <ssl_txn_time>03/20/2024 03:08:06 PM</ssl_txn_time>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_base_amount>10.00</ssl_base_amount>\n  <ssl_card_short_description/>\n  <ssl_get_token>N</ssl_get_token>\n  <ssl_server/>\n  <ssl_tip_amount>3.00</ssl_tip_amount>\n  <ssl_card_type>CASH</ssl_card_type>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n  <ssl_first_name>Test First</ssl_first_name>\n  <ssl_last_name>Test Last</ssl_last_name>\n</txn>                  \n"
                    },
                    "Cash_Refund": {
                      "summary": "Cash Return/Credit",
                      "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<txn>\n  <ssl_txn_time>03/20/2024 03:06:53 PM</ssl_txn_time>\n  <ssl_result_message>APPROVAL</ssl_result_message>\n  <ssl_transaction_type>RETURN</ssl_transaction_type>\n  <ssl_result>0</ssl_result>\n  <ssl_txn_id>200324C55-52DC4183-58FB-476E-8671-AF47CC55217C</ssl_txn_id>\n  <ssl_card_type>CASH</ssl_card_type>\n  <ssl_amount>10.00</ssl_amount>\n  <ssl_partner_app_id>01</ssl_partner_app_id>\n  <ssl_first_name>Test First</ssl_first_name>\n  <ssl_last_name>Test Last</ssl_last_name>\n</txn>    \n"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "requestBodies": {
        "Session": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "discriminator": {
                  "propertyName": "Schema",
                  "mapping": {
                    "Credit Card Sale - ccsale": "#/components/schemas/Token_CC_Sale",
                    "Credit Card Auth Only - ccauthonly": "#/components/schemas/Token_CC_AuthOnly",
                    "Credit Card Verify - ccverify": "#/components/schemas/Token_CC_Verify",
                    "Credit Card Add Recurring - ccaddrecurring": "#/components/schemas/Token_CC_AddRecurring",
                    "Credit Card Add Installment - ccaddinstall": "#/components/schemas/Token_CC_AddInstall",
                    "Credit Card Generate Token - ccgettoken": "#/components/schemas/Token_CC_Get",
                    "Electronic Check Purchase - ecspurchase": "#/components/schemas/Token_ECS_Purchase",
                    "Electronic Check Add Recurring - ecsaddrecurring": "#/components/schemas/Token_ECS_AddRecurring",
                    "Electronic Check Add Installment - ecsaddinstall": "#/components/schemas/Token_ECS_AddInstall",
                    "Electronic Gift Card Redemption - egcsale": "#/components/schemas/Token_EGC_Sale",
                    "POS Lending with Checkout.js - ccsale": "#/components/schemas/Token_POSL_Sale",
                    "Google Pay with Checkout.js - ccsale": "#/components/schemas/Token_Google_Sale",
                    "Click to Pay with Checkout.js - ccsale": "#/components/schemas/Token_ClicktoPay_Sale",
                    "PayPal with Checkout.js - ccsale": "#/components/schemas/Token_PayPal_Sale",
                    "Surcharge with Checkout.js - ccsale": "#/components/schemas/Token_Surcharge_Sale",
                    "3D Secure2 with Checkout.js - ccsale": "#/components/schemas/Token_3DSecure_Sale"
                  }
                }
              },
              "examples": {
                "Session_Token": {
                  "summary": "Credit Card Sale",
                  "value": "ssl_transaction_type: \"ccsale\" \nssl_account_id: \"my_account_id\"\nssl_user_id: \"my_user_id\"\nssl_pin: \"my_pin\"\nssl_vendor_id: \"my_vendor_id\"\nssl_amount: \"1.00\"\nssl_first_name: \"John\"\nssl_last_name: \"Smith\"\nssl_company: \"my_company\"\nssl_avs_address: \"my_street\"\nssl_address2: \"123\"\nssl_city: \"anywhere\"\nssl_state: \"AZ\"\nssl_avs_zip: \"00000\"\nssl_country: \"USA\"\nssl_get_token: \"Y\"\nssl_add_token: \"Y\"\nssl_email:\nssl_phone: \"111-111-1111\"\nssl_invoice_number: \"INV123\"\n"
                },
                "Session_Token_Recurring": {
                  "summary": "Credit Card Add Recurring",
                  "value": "ssl_transaction_type: \"ccaddrecurring\" \nssl_account_id: \"my_account_id\"\nssl_user_id: \"my_user_id\"\nssl_pin: \"my_pin\"\nssl_vendor_id: \"my_vendor_id\"\nssl_next_payment_date: \"12/25/2035\"\nssl_billing_cycle: \"MONTHLY\"        \n"
                }
              }
            }
          }
        },
        "HPP": {
          "content": {
            "text/html": {
              "schema": {
                "discriminator": {
                  "propertyName": "Schema",
                  "mapping": {
                    "Credit Card Sale - ccsale": "#/components/schemas/HPP",
                    "Credit Card Auth Only - ccauthonly": "#/components/schemas/HPP",
                    "Credit Card Add Recurring - ccaddrecurring": "#/components/schemas/HPP",
                    "Credit Card Add Installment - ccaddinstall": "#/components/schemas/HPP",
                    "Credit Card Verify - ccverify": "#/components/schemas/HPP",
                    "Token Generate - ccgettoken": "#/components/schemas/HPP",
                    "Electronic Check Purchase - ecspurchase": "#/components/schemas/HPP",
                    "Electronic Check Add Recurring - ecsaddrecurring": "#/components/schemas/HPP",
                    "Electronic Check Add Installment - ecsaddinstall": "#/components/schemas/HPP",
                    "Gift Card Redemption - egcsale": "#/components/schemas/HPP"
                  }
                }
              }
            }
          }
        },
        "Lightbox": {
          "content": {
            "text/html": {
              "schema": {
                "discriminator": {
                  "propertyName": "Schema",
                  "mapping": {
                    "Credit Card Sale - ccsale": "#/components/schemas/Lightbox_CC_Sale",
                    "Credit Card Auth Only - ccauthonly": "#/components/schemas/Lightbox_CC_AuthOnly",
                    "Credit Card Verify - ccverify": "#/components/schemas/Lightbox_CC_Verification",
                    "Token Generate - ccgettoken": "#/components/schemas/Lightbox_CC_Generate_Token",
                    "Electronic Check Purchase - ecspurchase": "#/components/schemas/Lightbox_ECS_Purchase",
                    "Gift Card Redemption - egcsale": "#/components/schemas/Lightbox_EGC_Sale"
                  }
                }
              }
            }
          }
        },
        "Checkout": {
          "content": {
            "text/html": {
              "schema": {
                "discriminator": {
                  "propertyName": "Schema",
                  "mapping": {
                    "Credit Card Sale - ccsale": "#/components/schemas/Checkout_CC_Sale",
                    "Credit Card Auth Only - ccauthonly": "#/components/schemas/Checkout_CC_AuthOnly",
                    "Credit Card Verify - ccverify": "#/components/schemas/Checkout_CC_Verification",
                    "Credit Card Add Recurring - ccaddrecurring": "#/components/schemas/Checkout_CC_AddRecurring",
                    "Credit Card Add Installment - ccaddinstall": "#/components/schemas/Checkout_CC_AddInstall",
                    "Token Generate - ccgettoken": "#/components/schemas/Checkout_CC_Generate_Token",
                    "Electronic Check Purchase - ecspurchase": "#/components/schemas/Checkout_ECS_Purchase",
                    "Electronic Check Add Recurring - ecsaddrecurring": "#/components/schemas/Checkout_ECS_AddRecurring",
                    "Gift Card Redemption - egcsale": "#/components/schemas/Checkout_EGC_Sale",
                    "POS Lending - ccsale": "#/components/schemas/Checkout_POSL_Sale",
                    "Apple Pay Sale - ccsale": "#/components/schemas/Checkout_Apple_Sale",
                    "Click to Pay Sale - ccsale": "#/components/schemas/Checkout_Click_Sale",
                    "Google Pay Sale - ccsale": "#/components/schemas/Checkout_Google_Sale",
                    "PayPal Sale - ccsale": "#/components/schemas/Checkout_PayPal_Sale",
                    "Surcharge - ccsale": "#/components/schemas/Checkout_Surcharge_Sale",
                    "3D Secure2 - ccsale": "#/components/schemas/Checkout_3DSecure_Sale"
                  }
                }
              }
            }
          }
        },
        "XMLProcessOnline": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "discriminator": {
                  "propertyName": "Schema",
                  "mapping": {
                    "Credit Card Sale": "#/components/schemas/XML_CC_Sale_Online",
                    "Credit Card Auth Only": "#/components/schemas/XML_CC_AuthOnly_Online",
                    "Credit Card Auth Only Increment": "#/components/schemas/XML_CC_AuthOnlyIncrement",
                    "Credit Card Completion": "#/components/schemas/XML_CC_Completion",
                    "Credit Card Verify": "#/components/schemas/XML_CC_Verification_Online",
                    "Credit Card Refund": "#/components/schemas/XML_CC_Return",
                    "Credit Card Void": "#/components/schemas/XML_CC_Void",
                    "Credit Card Delete": "#/components/schemas/XML_CC_Delete",
                    "Credit Card Balance Inquiry": "#/components/schemas/XML_CC_CreditBalance_Online",
                    "Credit Card Add Recurring": "#/components/schemas/XML_CC_AddRecurring",
                    "Credit Card Update Recurring": "#/components/schemas/XML_CC_UpdateRecurring",
                    "Credit Card Delete Recurring": "#/components/schemas/XML_CC_DeleteRecurring",
                    "Credit Card Submit Recurring": "#/components/schemas/XML_CC_SubmitRecurring",
                    "Credit Card Add Installment": "#/components/schemas/XML_CC_AddInstall",
                    "Credit Card Update Installment": "#/components/schemas/XML_CC_UpdateInstall",
                    "Credit Card Delete Installment": "#/components/schemas/XML_CC_DeleteInstall",
                    "Credit Card Submit Installment": "#/components/schemas/XML_CC_SubmitInstall",
                    "Credit Card Force": "#/components/schemas/XML_CC_Force",
                    "Credit Card Credit": "#/components/schemas/XML_CC_Credit",
                    "Token Generate": "#/components/schemas/XML_TokenGenerate_Online",
                    "Token Update": "#/components/schemas/XML_TokenUpdate",
                    "Token Query": "#/components/schemas/XML_TokenQuery",
                    "Token Delete": "#/components/schemas/XML_TokenDelete",
                    "Apple Pay on the Web Session Request": "#/components/schemas/XML_ApplePay_Session",
                    "Apple Pay on the Web Sale": "#/components/schemas/XML_ApplePay_Transaction",
                    "Apple Pay In App Sale": "#/components/schemas/XML_ApplePay_InApp_Transaction",
                    "Google Pay Sale": "#/components/schemas/XML_Google_Sale",
                    "PayPal Sale": "#/components/schemas/XML_PayPal_Sale",
                    "PayPal Auth Only": "#/components/schemas/XML_PayPal_AuthOnly",
                    "PayPal Complete": "#/components/schemas/XML_PayPal_Completion",
                    "PayPal Refund": "#/components/schemas/XML_PayPal_Return",
                    "PayPal Void": "#/components/schemas/XML_PayPal_Void",
                    "POS Lending Get Link": "#/components/schemas/XML_POSL_GetLink",
                    "POS Lending Query Status": "#/components/schemas/XML_POSL_Status",
                    "POS Lending Void": "#/components/schemas/XML_POSL_Void",
                    "POS Lending Delete": "#/components/schemas/XML_POSL_Delete",
                    "POS Lending Return": "#/components/schemas/XML_POSL_Return",
                    "BIN Lookup": "#/components/schemas/XML_DB_BINLookup_Online",
                    "PINless Debit Bill Pay": "#/components/schemas/XML_DB_PinlessBill",
                    "PINless Debit Purchase": "#/components/schemas/XML_DB_PinlessPurchase",
                    "3D Secure2 EFS Token": "#/components/schemas/XML_3DSecure",
                    "3D Secure2 Sale": "#/components/schemas/XML_3DSecure_Sale",
                    "Surcharge Sale": "#/components/schemas/XML_Surcharge_Sale",
                    "Account Update Query": "#/components/schemas/XML_AccountUpdate",
                    "Batch Import Transaction Query": "#/components/schemas/XML_BatchQuery",
                    "End of Day Transaction Email": "#/components/schemas/XML_EOD_Email",
                    "End of Day Transaction Query": "#/components/schemas/XML_EOD_Query",
                    "End of Day Total/Summary": "#/components/schemas/XML_EOD_Total",
                    "End of Day Settlement": "#/components/schemas/XML_EOD_Settlement",
                    "End of Day Settlement Query": "#/components/schemas/XML_EOD_SettlementQuery",
                    "End of Day Recurring Query": "#/components/schemas/XML_EOD_RecurringQuery",
                    "Electronic Check Purchase": "#/components/schemas/XML_EC_Purchase_Online",
                    "Electronic Check Void": "#/components/schemas/XML_EC_Void",
                    "Electronic Check Add Recurring": "#/components/schemas/XML_EC_AddRecurring",
                    "Electronic Check Update Recurring": "#/components/schemas/XML_EC_UpdateRecurring",
                    "Electronic Check Delete Recurring": "#/components/schemas/XML_EC_DeleteRecurring",
                    "Electronic Check Recurring Additional Payment": "#/components/schemas/XML_EC_SubmitRecurring",
                    "Electronic Check Add Installment": "#/components/schemas/XML_EC_AddInstall",
                    "Electronic Check Update Installment": "#/components/schemas/XML_EC_UpdateInstall",
                    "Electronic Check Delete Installment": "#/components/schemas/XML_EC_DeleteInstall",
                    "Electronic Check Installment Additional Payment": "#/components/schemas/XML_EC_SubmitInstall",
                    "Electronic Gift Card Activation": "#/components/schemas/XML_EGC_Activation",
                    "Electronic Gift Card Generate Token": "#/components/schemas/XML_EGC_Token",
                    "Electronic Gift Card Redemption": "#/components/schemas/XML_EGC_Redemption",
                    "Electronic Gift Card Return": "#/components/schemas/XML_EGC_Refund",
                    "Electronic Gift Card Credit": "#/components/schemas/XML_EGC_Credit",
                    "Electronic Gift Card Balance Inquiry": "#/components/schemas/XML_EGC_BalanceInquiry",
                    "Electronic Gift Card Reload": "#/components/schemas/XML_EGC_Reload"
                  }
                }
              },
              "examples": {
                "CC_Sale": {
                  "summary": "Credit Card Sale",
                  "value": "xmldata= \n  \"<txn>\n    <ssl_transaction_type>ccsale</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>1.50</ssl_amount>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_cvv2cvc2_indicator>1</ssl_cvv2cvc2_indicator>\n    <ssl_cvv2cvc2>123</ssl_cvv2cvc2>\n    <ssl_avs_zip>12345</ssl_avs_zip>\n    <ssl_avs_address>1234 Street</ssl_avs_address>\n    <ssl_get_token>Y</ssl_get_token>\n    <ssl_add_token>Y</ssl_add_token>\n    <ssl_invoice_number>INV001</ssl_invoice_number>\n    <ssl_first_name>John</ssl_first_name>\n    <ssl_last_name>Smith</ssl_last_name>\n    <ssl_avs_address>My Street</ssl_avs_address>\n    <ssl_address2>Address 2</ssl_address2>\n    <ssl_city>My City</ssl_city>\n    <ssl_state>GA</ssl_state>\n    <ssl_avs_zip>00000</ssl_avs_zip>\n    <ssl_country>USA</ssl_country>\n    <ssl_email></ssl_email>\n    <ssl_phone>888-888-8888</ssl_phone>\n    <ssl_ship_to_company>Company Name</ssl_ship_to_company>\n    <ssl_ship_to_first_name>John</ssl_ship_to_first_name>\n    <ssl_ship_to_last_name>Smith</ssl_ship_to_last_name>\n    <ssl_ship_to_address1>Address 1</ssl_ship_to_address1>\n    <ssl_ship_to_address2>Address 2</ssl_ship_to_address2>\n    <ssl_ship_to_city>My City</ssl_ship_to_city>\n    <ssl_ship_to_state>GA</ssl_ship_to_state>\n    <ssl_ship_to_zip>00000</ssl_ship_to_zip>\n    <ssl_ship_to_country>USA</ssl_ship_to_country>\n    <ssl_ship_to_phone>111-111-1111</ssl_ship_to_phone>\n    <ssl_customer_code>MyCustomerCode</ssl_customer_code>\n    <ssl_salestax>2.25</ssl_salestax>\n    <ssl_merchant_txn_id>MyTxnID</ssl_merchant_txn_id>\n    <ssl_description>MyDescription</ssl_description>\n    <ssl_dynamic_dba>MANYMAG*BAKERS</ssl_dynamic_dba>\n  </txn>\" \n"
                },
                "CC_Sale_UseToken": {
                  "summary": "Credit Card Sale using Token",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccsale</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>1.50</ssl_amount>\n    <ssl_token>my_token</ssl_token>\n    <ssl_invoice_number>INV001</ssl_invoice_number>\n  </txn>\"\n"
                },
                "CC_Sale_Recurring": {
                  "summary": "Credit Card Sale with Recurring",
                  "description": "Use if you're managing your own recurring payments and NOT Converge's built in Recurring tool",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccsale</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>1.50</ssl_amount>\n    <ssl_token>my_token</ssl_token>\n    <ssl_recurring_flag>1</ssl_recurring_flag>\n    <ssl_cit_mit_cof_indicator>M01</ssl_cit_mit_cof_indicator>\n  </txn>\"\n"
                },
                "CC_Sale_Installment": {
                  "summary": "Credit Card Sale with Installment",
                  "description": "Use if you're managing your own installment payments and NOT Converge's built in Recurring tool",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccsale</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>1.50</ssl_amount>\n    <ssl_token>my_token</ssl_token>\n    <ssl_recurring_flag>2</ssl_recurring_flag>\n    <ssl_payment_number>2</ssl_payment_number>\n    <ssl_payment_count>4</ssl_payment_count>\n    <ssl_cit_mit_cof_indicator>M01</ssl_cit_mit_cof_indicator>\n  </txn>\"\n"
                },
                "CC_Sale_DCC": {
                  "summary": "Credit Card Sale with DCC Customer Response",
                  "value": "xmldata=\n  \"<txn>\n    <id>my_dcc_id</id>\n    <dccoption>Y</dccoption>\n  </txn>\"\n"
                },
                "CC_AuthOnly": {
                  "summary": "Credit Card Auth Only",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccauthonly</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1249</ssl_exp_date>\n    <ssl_amount>1.00</ssl_amount>\n    <ssl_cvv2cvc2_indicator>1</ssl_cvv2cvc2_indicator>\n    <ssl_cvv2cvc2>123</ssl_cvv2cvc2>\n    <ssl_invoice_number>INV001</ssl_invoice_number>\n  </txn>\"\n"
                },
                "CC_AuthOnly_Increment": {
                  "summary": "Credit Card Auth Only Increment",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccauthonly</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_txn_id>260324C55-786E7391-A8DC-4D3F-92BC-B7BD9C11F91D</ssl_txn_id>\n    <ssl_amount>4.00</ssl_amount>\n  </txn>\"\n"
                },
                "CC_Complete": {
                  "summary": "Credit Card Completion",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>cccomplete</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_txn_id>******</ssl_txn_id>\n    <ssl_amount>1.50</ssl_amount>\n  </txn>\"                  \n"
                },
                "CC_Verify": {
                  "summary": "Credit Card Verify",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccverify</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_avs_address>2 Concourse Parkway</ssl_avs_address>\n    <ssl_city>Atlanta</ssl_city>\n    <ssl_state>GA</ssl_state>\n    <ssl_avs_zip>12345</ssl_avs_zip>\n    <ssl_country>USA</ssl_country>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_cvv2cvc2>123</ssl_cvv2cvc2>\n    <ssl_first_name>John</ssl_first_name>\n    <ssl_last_name>Smith</ssl_last_name>                   \n  </txn>\"\n"
                },
                "CC_Verification": {
                  "summary": "Credit Card CVV/Address Verification",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccsale</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_card_number>4000000000000002</ssl_card_number>\\n\",\n    <ssl_exp_date>1230</ssl_exp_date>\\n\",\n    <ssl_cvv2cvc2>123</ssl_cvv2cvc2>\\n\",\n    <ssl_avs_zip>12345</ssl_avs_zip>\\n\",\n    <ssl_avs_address>1234 Street</ssl_avs_address>\\n\",\n  </txn>\"      \n"
                },
                "CC_Return_Full": {
                  "summary": "Credit Card Refund (Full)",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccreturn</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>                   \n    <ssl_txn_id>******</ssl_txn_id>\n  </txn>\"\n"
                },
                "CC_Return": {
                  "summary": "Credit Card Refund (Partial)",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccreturn</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_txn_id>******</ssl_txn_id>\n    <ssl_amount>1.50</ssl_amount>\n  </txn>\"\n"
                },
                "CC_Void": {
                  "summary": "Credit Card Void",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccvoid</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_txn_id>******</ssl_txn_id>\n  </txn>\"\n"
                },
                "CC_Delete": {
                  "summary": "Credit Card Delete",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccdelete</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_txn_id>******</ssl_txn_id>\n  </txn>\"\n"
                },
                "CC_Balinquiry": {
                  "summary": "Credit Card Balance Inquiry",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccbalinquiry</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date></ssl_exp_date>\n    <ssl_cvv2cvc2></ssl_cvv2cvc2>\n    <ssl_cvv2cvc2_indicator></ssl_cvv2cvc2_indicator>\n  </txn>\"\n"
                },
                "CC_AddRecurring": {
                  "summary": "Credit Card Add Recurring",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccaddrecurring</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>1.50</ssl_amount>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_next_payment_date>01/06/2030</ssl_next_payment_date>\n    <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n    <ssl_end_of_month>N</ssl_end_of_month>\n  </txn>\"\n"
                },
                "CC_UpdateRecurring": {
                  "summary": "Credit Card Update Recurring",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccupdaterecurring</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>1.50</ssl_amount>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_next_payment_date>01/06/2030</ssl_next_payment_date>\n    <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n    <ssl_end_of_month>N</ssl_end_of_month>\n    <ssl_recurring_id>AA484C3-8E5D1201-A05E-824D-9DAD-E3534E83F078</ssl_recurring_id>\n  </txn>\"\n"
                },
                "CC_DeleteRecurring": {
                  "summary": "Credit Card Delete Recurring",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccdeleterecurring</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_recurring_id>AA484C3-8E5D1201-A05E-824D-9DAD-E3534E83F078</ssl_recurring_id>\n  </txn>\"\n"
                },
                "CC_SubmitRecurring": {
                  "summary": "Credit Card Submit Recurring",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccrecurringsale</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_recurring_id>AA484C3-8E5D1201-A05E-824D-9DAD-E3534E83F078</ssl_recurring_id>\n  </txn>\"\n"
                },
                "CC_AddInstall": {
                  "summary": "Credit Card Add Installment",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccaddinstall</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>1.50</ssl_amount>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_next_payment_date>01/06/2030</ssl_next_payment_date>\n    <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n    <ssl_end_of_month>N</ssl_end_of_month>\n    <ssl_total_installments>12</ssl_total_installments>\n  </txn>\"\n"
                },
                "CC_UpdateInstall": {
                  "summary": "Credit Card Update Installment",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccupdateinstall</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>1.50</ssl_amount>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_next_payment_date>01/06/2030</ssl_next_payment_date>\n    <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n    <ssl_end_of_month>N</ssl_end_of_month>\n    <ssl_total_installments>12</ssl_total_installments>\n    <ssl_installment_id>AA484C3-8E5D1201-A05E-824D-9DAD-E3534E83F078</ssl_installment_id>\n  </txn>\"\n"
                },
                "CC_DeleteInstall": {
                  "summary": "Credit Card Delete Installment",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccdeleteinstall</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_installment_id>AA484C3-8E5D1201-A05E-824D-9DAD-E3534E83F078</ssl_installment_id>\n  </txn>\"\n"
                },
                "CC_SubmitInstall": {
                  "summary": "Credit Card Submit Installment",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccsubmitinstall</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_installment_id>AA484C3-8E5D1201-A05E-824D-9DAD-E3534E83F078</ssl_installment_id>\n  </txn>\"\n"
                },
                "Token_Generate": {
                  "summary": "Token Generate with Verification from card number",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccgettoken</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_verify>Y</ssl_verify>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_cvv2cvc2>123</ssl_cvv2cvc2>\n    <ssl_first_name>John</ssl_first_name>\n    <ssl_last_name>Smith</ssl_last_name>\n    <ssl_avs_address>123 Main St</ssl_avs_address>\n    <ssl_avs_zip>12345</ssl_avs_zip>\n  </txn>\"\n"
                },
                "Token_Generate_RecurringID": {
                  "summary": "Token Generate with Verification from recurring id",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccgettoken</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_verify>Y</ssl_verify>\n    <ssl_recurring_id></ssl_recurring_id>\n  </txn>\"\n"
                },
                "Token_Update": {
                  "summary": "Token Update",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccupdatetoken</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_token>41**********9990</ssl_token>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_cvv2cvc2>123</ssl_cvv2cvc2>\n    <ssl_company>Elavon</ssl_company>\n    <ssl_first_name>John</ssl_first_name>\n    <ssl_last_name>Smith</ssl_last_name>\n    <ssl_country>USA</ssl_country>\n    <ssl_city>Atlanta</ssl_city>\n    <ssl_state>GA</ssl_state>\n    <ssl_phone>1234567890</ssl_phone>\n    <ssl_avs_zip>30000</ssl_avs_zip>\n    <ssl_address2>Second Address</ssl_address2>\n    <ssl_avs_address>Test Address</ssl_avs_address>\n    <ssl_ship_to_company>Company Name</ssl_ship_to_company>\n    <ssl_ship_to_first_name>John</ssl_ship_to_first_name>\n    <ssl_ship_to_last_name>Smith</ssl_ship_to_last_name>\n    <ssl_ship_to_address1>Address 1</ssl_ship_to_address1>\n    <ssl_ship_to_address2>Address 2</ssl_ship_to_address2>\n    <ssl_ship_to_city>My City</ssl_ship_to_city>\n    <ssl_ship_to_state>GA</ssl_ship_to_state>\n    <ssl_ship_to_zip>00000</ssl_ship_to_zip>\n    <ssl_ship_to_country>USA</ssl_ship_to_country>\n    <ssl_ship_to_phone>111-111-1111</ssl_ship_to_phone>\n  </txn>\"\n"
                },
                "Token_Query": {
                  "summary": "Token Query",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccquerytoken</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_token>41**********9990</ssl_token>\n  </txn>\"\n"
                },
                "Token_Delete": {
                  "summary": "Token Delete",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccdeletetoken</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_token>41**********9990</ssl_token>\n  </txn>\"\n"
                },
                "ApplePay_Session": {
                  "summary": "Apple Pay on the Web Session Request",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ewalletinquiry</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n\n    <ewalletaction>applepaySession</ewalletaction>\n    <applepayUrl>https://apple-pay-gateway-cert.apple.com/paymentservices/startSession</applepayUrl>\n    <applepayDomain>my_domain</applepayDomain>\n  </txn>\"\n"
                },
                "ApplePay_Transaction": {
                  "summary": "Apple Pay on the Web Sale",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccsale</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_transaction_source>X_HPP</ssl_transaction_source>\n    <ssl_applepay_web>\n      {\"version\":\"EC_v1\",\"data\":\"51ZPGwbuhhtfJ/839ksS6voUzAU34g/DWZaikfZ0velZQonWvcIuqQcKjLlobCiOG8RRN6bq5V9rF3hkhxU1GBem4LHtZ/+eYttjSA6YGNZjObCfNaFFJQdvRtBkmNNdMoiCE2FRotwjKJGgKTbGh46a3kFHUr/sFZeGdNue75CuICs58DTmfIhRSdKFq0yrc0Mb2bxDUHzIDnTvns4Pyu5Vbzjr8IAh9+DCms2oVJrvwwucjV3G6y8/ZG/gAB8lskw33IAlkKSsdoQ37zT2saRWCDt2ycwuIHz7/7Nd1oiWJ/sFO/aRePsK1kZn75sjOqsX4Ee1o9Y9bOElsOFI5fwAyUAX8yzSJSv5V+v0UOQRJaW50kAvA5u4A18oePMiTHnRwZaBeYzYKjPR\",\"signature\":\"MIAGCSqGSIb3DQEHAqCAMIACAQExDzANBglghkgBZQMEAgEFADCABgkqhkiG9w0BBwEAAKCAMIID4jCCA4igAwIBAgIIJEPyqAad9XcwCgYIKoZIzj0EAwIwejEuMCwGA1UEAwwlQXBwbGUgQXBwbGljYXRpb24gSW50ZWdyYXRpb24gQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMB4XDTE0MDkyNTIyMDYxMVoXDTE5MDkyNDIyMDYxMVowXzElMCMGA1UEAwwcZWNjLXNtcC1icm9rZXItc2lnbl9VQzQtUFJPRDEUMBIGA1UECwwLaU9TIFN5c3RlbXMxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEwhV37evWx7Ihj2jdcJChIY3HsL1vLCg9hGCV2Ur0pUEbg0IO2BHzQH6DMx8cVMP36zIg1rrV1O/0komJPnwPE6OCAhEwggINMEUGCCsGAQUFBwEBBDkwNzA1BggrBgEFBQcwAYYpaHR0cDovL29jc3AuYXBwbGUuY29tL29jc3AwNC1hcHBsZWFpY2EzMDEwHQYDVR0OBBYEFJRX22/VdIGGiYl2L35XhQfnm1gkMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUI/JJxE+T5O8n5sT2KGw/orv9LkswggEdBgNVHSAEggEUMIIBEDCCAQwGCSqGSIb3Y2QFATCB/jCBwwYIKwYBBQUHAgIwgbYMgbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjA2BggrBgEFBQcCARYqaHR0cDovL3d3dy5hcHBsZS5jb20vY2VydGlmaWNhdGVhdXRob3JpdHkvMDQGA1UdHwQtMCswKaAnoCWGI2h0dHA6Ly9jcmwuYXBwbGUuY29tL2FwcGxlYWljYTMuY3JsMA4GA1UdDwEB/wQEAwIHgDAPBgkqhkiG92NkBh0EAgUAMAoGCCqGSM49BAMCA0gAMEUCIHKKnw+Soyq5mXQr1V62c0BXKpaHodYu9TWXEPUWPpbpAiEAkTecfW6+W5l0r0ADfzTCPq2YtbS39w01XIayqBNy8bEwggLuMIICdaADAgECAghJbS+/OpjalzAKBggqhkjOPQQDAjBnMRswGQYDVQQDDBJBcHBsZSBSb290IENBIC0gRzMxJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzAeFw0xNDA1MDYyMzQ2MzBaFw0yOTA1MDYyMzQ2MzBaMHoxLjAsBgNVBAMMJUFwcGxlIEFwcGxpY2F0aW9uIEludGVncmF0aW9uIENBIC0gRzMxJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABPAXEYQZ12SF1RpeJYEHduiAou/ee65N4I38S5PhM1bVZls1riLQl3YNIk57ugj9dhfOiMt2u2ZwvsjoKYT/VEWjgfcwgfQwRgYIKwYBBQUHAQEEOjA4MDYGCCsGAQUFBzABhipodHRwOi8vb2NzcC5hcHBsZS5jb20vb2NzcDA0LWFwcGxlcm9vdGNhZzMwHQYDVR0OBBYEFCPyScRPk+TvJ+bE9ihsP6K7/S5LMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUu7DeoVgziJqkipnevr3rr9rLJKswNwYDVR0fBDAwLjAsoCqgKIYmaHR0cDovL2NybC5hcHBsZS5jb20vYXBwbGVyb290Y2FnMy5jcmwwDgYDVR0PAQH/BAQDAgEGMBAGCiqGSIb3Y2QGAg4EAgUAMAoGCCqGSM49BAMCA2cAMGQCMDrPcoNRFpmxhvs1w1bKYr/0F+3ZD3VNoo6+8ZyBXkK3ifiY95tZn5jVQQ2PnenC/gIwMi3VRCGwowV3bF3zODuQZ/0XfCwhbZZPxnJpghJvVPh6fRuZy5sJiSFhBpkPCZIdAAAxggGLMIIBhwIBATCBhjB6MS4wLAYDVQQDDCVBcHBsZSBBcHBsaWNhdGlvbiBJbnRlZ3JhdGlvbiBDQSAtIEczMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMCCCRD8qgGnfV3MA0GCWCGSAFlAwQCAQUAoIGVMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE4MDYwNDE0NDgxNVowKgYJKoZIhvcNAQk0MR0wGzANBglghkgBZQMEAgEFAKEKBggqhkjOPQQDAjAvBgkqhkiG9w0BCQQxIgQg+gMuB49ikDOzct/8jj1C77ZCENRf4bB40t18ROW4l1gwCgYIKoZIzj0EAwIERjBEAiAP9wNxQpKQhJGyiJP9UpnGgjCM+Deii+RJT6JuwyahSAIgXNMqNaZo653bpqWbhqC+Vs/5qA8/QwZrZGlD+Q6/6ycAAAAAAAA=\",\"header\":{\"ephemeralPublicKey\":\"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEr5QHLJ2aSOI+xJC0UKluE8/PqjDHuCjUsEGfnkDKAtBMy/vqs/3tGvakoKKB5OMhP9qZPQ0Dy+lCFe0aSkTBFg==\",\"publicKeyHash\":\"HtzEQzrtccElcDdut4iVHvyf1PiwiHCEo2yvFyuCtqE=\",\"transactionId\":\"9230d92ffcb5ded6b25f6928652505155f33dff2b1837819a79122c890f66935\"}}\n    </ssl_applepay_web>\n   </txn>\"\n"
                },
                "ApplePay_InApp_Transaction": {
                  "summary": "Apple Pay In App Sale",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccsale</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ApplePayInApp>\n      <data>1r4qZlv9CC7mYTd1qHQIQN8OUI5Ec0d+pp8nS0w+MsYhGQqOP35cTjhfpgvBnBQKzycahBPpJhDZgp8LU/ny/Jftew8wlx94KeOWf6GxjOkgUx9VYIBrnQicpi+jD4F2hrnaW3jeHH3NcBmeZK+w0amS9rVleqaT3UPVN84mGB2kq4fNrAH//cxCoR9xmbePin17XtxETz6bV1Jh0SxkucL6PkcPCux3TgBGqAtEQUtdmqOqiDWeYScddVJU2JMIuxGGzHqsQ43W/NXDKh4Ro17a8G4RC8NfQXAWYpkWqgtvlnJZw9KYndMg7sJmQo4m/57TaShVtMLXwVLJpUnA1p+PUTdxKnUreFyUW/Ftu8P5UXn3yyUAsTk9a5sA6NANYsTLDDbC3w7xnm2U</data>\n      <signature>MIAGCSqGSIb3DQEHAqCAMIACAQExDzANBglghkgBZQMEAgEFADCABgkqhkiG9w0BBwEAAKCAMIID5DCCA4ugAwIBAgIIWdihvKr0480wCgYIKoZIzj0EAwIwejEuMCwGA1UEAwwlQXBwbGUgQXBwbGljYXRpb24gSW50ZWdyYXRpb24gQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMB4XDTIxMDQyMDE5MzcwMFoXDTI2MDQxOTE5MzY1OVowYjEoMCYGA1UEAwwfZWNjLXNtcC1icm9rZXItc2lnbl9VQzQtU0FOREJPWDEUMBIGA1UECwwLaU9TIFN5c3RlbXMxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEgjD9q8Oc914gLFDZm0US5jfiqQHdbLPgsc1LUmeY+M9OvegaJajCHkwz3c6OKpbC9q+hkwNFxOh6RCbOlRsSlaOCAhEwggINMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUI/JJxE+T5O8n5sT2KGw/orv9LkswRQYIKwYBBQUHAQEEOTA3MDUGCCsGAQUFBzABhilodHRwOi8vb2NzcC5hcHBsZS5jb20vb2NzcDA0LWFwcGxlYWljYTMwMjCCAR0GA1UdIASCARQwggEQMIIBDAYJKoZIhvdjZAUBMIH+MIHDBggrBgEFBQcCAjCBtgyBs1JlbGlhbmNlIG9uIHRoaXMgY2VydGlmaWNhdGUgYnkgYW55IHBhcnR5IGFzc3VtZXMgYWNjZXB0YW5jZSBvZiB0aGUgdGhlbiBhcHBsaWNhYmxlIHN0YW5kYXJkIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHVzZSwgY2VydGlmaWNhdGUgcG9saWN5IGFuZCBjZXJ0aWZpY2F0aW9uIHByYWN0aWNlIHN0YXRlbWVudHMuMDYGCCsGAQUFBwIBFipodHRwOi8vd3d3LmFwcGxlLmNvbS9jZXJ0aWZpY2F0ZWF1dGhvcml0eS8wNAYDVR0fBC0wKzApoCegJYYjaHR0cDovL2NybC5hcHBsZS5jb20vYXBwbGVhaWNhMy5jcmwwHQYDVR0OBBYEFAIkMAua7u1GMZekplopnkJxghxFMA4GA1UdDwEB/wQEAwIHgDAPBgkqhkiG92NkBh0EAgUAMAoGCCqGSM49BAMCA0cAMEQCIHShsyTbQklDDdMnTFB0xICNmh9IDjqFxcE2JWYyX7yjAiBpNpBTq/ULWlL59gBNxYqtbFCn1ghoN5DgpzrQHkrZgTCCAu4wggJ1oAMCAQICCEltL786mNqXMAoGCCqGSM49BAMCMGcxGzAZBgNVBAMMEkFwcGxlIFJvb3QgQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMB4XDTE0MDUwNjIzNDYzMFoXDTI5MDUwNjIzNDYzMFowejEuMCwGA1UEAwwlQXBwbGUgQXBwbGljYXRpb24gSW50ZWdyYXRpb24gQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE8BcRhBnXZIXVGl4lgQd26ICi7957rk3gjfxLk+EzVtVmWzWuItCXdg0iTnu6CP12F86Iy3a7ZnC+yOgphP9URaOB9zCB9DBGBggrBgEFBQcBAQQ6MDgwNgYIKwYBBQUHMAGGKmh0dHA6Ly9vY3NwLmFwcGxlLmNvbS9vY3NwMDQtYXBwbGVyb290Y2FnMzAdBgNVHQ4EFgQUI/JJxE+T5O8n5sT2KGw/orv9LkswDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBS7sN6hWDOImqSKmd6+veuv2sskqzA3BgNVHR8EMDAuMCygKqAohiZodHRwOi8vY3JsLmFwcGxlLmNvbS9hcHBsZXJvb3RjYWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwEAYKKoZIhvdjZAYCDgQCBQAwCgYIKoZIzj0EAwIDZwAwZAIwOs9yg1EWmbGG+zXDVspiv/QX7dkPdU2ijr7xnIFeQreJ+Jj3m1mfmNVBDY+d6cL+AjAyLdVEIbCjBXdsXfM4O5Bn/Rd8LCFtlk/GcmmCEm9U+Hp9G5nLmwmJIWEGmQ8Jkh0AADGCAYwwggGIAgEBMIGGMHoxLjAsBgNVBAMMJUFwcGxlIEFwcGxpY2F0aW9uIEludGVncmF0aW9uIENBIC0gRzMxJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUwIIWdihvKr0480wDQYJYIZIAWUDBAIBBQCggZUwGAYJKoZIhvcNAQkDMQsGCSqGSIb3DQEHATAcBgkqhkiG9w0BCQUxDxcNMjEwNTExMTQxOTQyWjAqBgkqhkiG9w0BCTQxHTAbMA0GCWCGSAFlAwQCAQUAoQoGCCqGSM49BAMCMC8GCSqGSIb3DQEJBDEiBCBzUbpJkNygFIRynB0NtJrgbj633B2ulEwPDJr0YUVhPDAKBggqhkjOPQQDAgRHMEUCIBFT6jhArwtX4QFtM40p5SIzyX+G4yqm1JoKmIima3GfAiEAhmnjlcmJoGTBjfqdcv47rkiwqbOeAjNWSx8QAZdpVtIAAAAAAAA=</signature>\n      <header>\n        <publicKeyHash>9lfK7LpXV+etBz1eet7qN4FMeWsukECnktKcXCvpO3w=</publicKeyHash>\n        <ephemeralPublicKey>MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAECqoo49AcIQheLFzu92r/coDEK9auubaP/IKhJrHPzV+Bn/gfpV1pyrFudgS+6+YeNQxw7xgvXEzFr+19hFLmRQ==</ephemeralPublicKey>\n        <transactionId>2623dbd03780d71208dd84df9defb681c7e3f048d8e9741887e091a13445e943</transactionId>\n      </header>\n    <version>EC_v1</version>\n    </ApplePayInApp>\n   </txn>\"\n"
                },
                "Google_Pay_Transaction": {
                  "summary": "Google Pay Sale",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccsale</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_transaction_source>X_HPP</ssl_transaction_source>\n    <ssl_amount>6.23</ssl_amount>\n    <ssl_google_pay>{\"apiVersionMinor\":0,\"apiVersion\":2,\"paymentMethodData\":{\"description\":\"Mastercardâ€†â€¢â€¢â€¢â€¢â€†1234\",\"tokenizationData\":{\"type\":\"PAYMENT_GATEWAY\",\"token\":\"{\\\"signature\\\":\\\"MEQCIDjr+WRi6hfeu6Gm7DqgNGtFvaFuTwKYWHkCir75Wc9+AiBAhgI0JIl24UKtCbP5JNXg0yfyec7V0XrwJB8u5oOhvw\\\\u003d\\\\u003d\\\",\\\"intermediateSigningKey\\\":{\\\"signedKey\\\":\\\"{\\\\\\\"keyValue\\\\\\\":\\\\\\\"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEim7XiHFP7qYM6rzUxgN7vftdcJS796dOSTbjszxGv9FLPciMrI+JiW7os0Z/5Gc0UCCU8EsmVh8xHVD5FzozIg\\\\\\\\u003d\\\\\\\\u003d\\\\\\\",\\\\\\\"keyExpiration\\\\\\\":\\\\\\\"1645120118000\\\\\\\"}\\\",\\\"signatures\\\":[\\\"MEYCIQC97zOpzAfgqg/tWudyFxX+9YXCR5/+mKmxQuGTqOaHXwIhAMstaaH+eSgfudyaaGkFTgQZiTV167eSSVEJprUIFOcx\\\"]},\\\"protocolVersion\\\":\\\"ECv2\\\",\\\"signedMessage\\\":\\\"{\\\\\\\"encryptedMessage\\\\\\\":\\\\\\\"NQCA9L14WClLFq2Xbs//V6xz+UHQdsjnbMYQTbxQZVppZP1ukT3HACR5RQQx425W4eK3TpjIElv5C4dk/EpNv7Rou3nRTHDQ4iIKHEdhUlpr52OF5D3XdZ/V1cnDb6nY9kAstEonzbPYb7qBcW7EOP9Ofc/gkzi5td+Ww2JIlM54f93uZwlPyB/b7OQs/bd0qCGa6otIQwkGbD8LEBOiX4EoHGxyG6cR378/jW2lGZw+JZjwcfmVcRCfHxLeDolOvhsViTwbp7Th/nmmlc1nmVhatvrq1jDihDhgy8cXwwx7srClFBVx2/hvTMEUBEMKWYRvIbmgzM5gMGkKBOsNCq3ePd2corz7sQd2izEz8EEAOqeCJuqrEH9tPaeyp/WXy1AbH3fU80ac9BJOgjrS0ZrJvoqUUHcZWIOFN4/2EZNLlKV6sHoOnXq+4m4g7+sEfDY1SP9a0NxX/IPcdQJo5LqMr6yNqbNuUVrf0YTe2YPh6pir5e3UQEs1QV7qAbTeMRS3VYIfxlJbs3Mx2cRFYGcZNeGkP/RVFd77fN+UyRbHSMaV7lXs/FgSspPD9tvOUXj5VG66H9o3\\\\\\\",\\\\\\\"ephemeralPublicKey\\\\\\\":\\\\\\\"BLQRt9gDcei/S+rbGAldS41ZTzZzI77zL6fd2eS44D3yqDWMXRQm10QZK+9YCsqIdxuvZkEtoHUkmAcgJ9k7qFc\\\\\\\\u003d\\\\\\\",\\\\\\\"tag\\\\\\\":\\\\\\\"qDdXMG2cmcwoHU7f9Ysxl4GJR9kq8e6jTxr/eI2FVLk\\\\\\\\u003d\\\\\\\"}\\\"}\"},\"type\":\"CARD\",\"info\":{\"cardNetwork\":\"MASTERCARD\",\"cardDetails\":\"3954\",\"billingAddress\":{\"address3\":\"\",\"sortingCode\":\"\",\"address2\":\"\",\"countryCode\":\"\",\"address1\":\"\",\"postalCode\":\"\",\"name\":\"\",\"locality\":\"\",\"administrativeArea\":\"ON\"}}}}</ssl_google_pay>\n  </txn>\"\n"
                },
                "PayPal_Sale_Transaction": {
                  "summary": "PayPal Sale",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>pesale</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>10</ssl_amount>\n  </txn>\"\n"
                },
                "PayPal_Authonly_Transaction": {
                  "summary": "Paypal Auth Only",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>peauthonly</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>10</ssl_amount>\n  </txn>\"\n"
                },
                "Paypal_Complete_Transaction": {
                  "summary": "Paypal Complete",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>pecomplete</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_txn_id>140324MBA-B94783FC-9DE4-4E70-91C1-071E29468F</ssl_txn_id>\n    <ssl_partial_shipment_flag>Y</ssl_partial_shipment_flag>\n    <ssl_amount>10</ssl_amount>\n  </txn>\"\n"
                },
                "Paypal_Refund_Transaction": {
                  "summary": "Paypal Refund",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>pereturn</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_txn_id>140324MBA-B94783FC-9DE4-4E70-91C1-071E29468F</ssl_txn_id>\n    <ssl_amount>10</ssl_amount>\n  </txn>\"\n"
                },
                "Paypal_Void_Transaction": {
                  "summary": "Paypal Void",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>pevoid</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>                  \n    <ssl_txn_id>140324MBA-B94783FC-9DE4-4E70-91C1-071E29468F</ssl_txn_id>\n  </txn>\"\n"
                },
                "POSL_Get_Link": {
                  "summary": "POS Lending Get Link",
                  "value": "xmldata:  \n  \"<txn>\n    <ssl_transaction_type>poslgetlink</ssl_transaction_type>\n    <ssl_merchant_id>my_merchant_id</ssl_merchant_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>1000.00</ssl_amount>\n    <ssl_invoice_number>INV001</ssl_invoice_number>\n    <ssl_first_name>John</ssl_first_name>\n    <ssl_last_name>Smith</ssl_last_name>\n    <ssl_email>email@email.com</ssl_email>\n    <ssl_phone>888-888-8888</ssl_phone>\n    <ssl_posl_email>Y</ssl_posl_email>\n    <ssl_posl_sms>Y</ssl_posl_sms>\n\n    <ssl_return_url>http://www.elavon.com</ssl_return_url>\n  </txn>\"  \n"
                },
                "POSL_Query_Status": {
                  "summary": "POS Lending Query Status",
                  "value": "xmldata:  \n  \"<txn>\n    <ssl_transaction_type>poslgetlink</ssl_transaction_type>\n    <ssl_merchant_id>my_merchant_id</ssl_merchant_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_posl_id>A1957317f25aadf8d14075762c5e0ef1010316475</ssl_posl_id>\n  </txn>\"  \n"
                },
                "POSL_Return": {
                  "summary": "POS Lending Return",
                  "value": "xmldata:  \n  \"<txn>\n    <ssl_transaction_type>poslgetlink</ssl_transaction_type>\n    <ssl_merchant_id>my_merchant_id</ssl_merchant_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_txn_id>A250723C4A-A5E00CFB-F341-4C3C-A41C-5DC909D3762A</ssl_txn_id>\n  </txn>\" \n"
                },
                "BIN_Lookup": {
                  "summary": "BIN Lookup",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>binlookup</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_first_name>First_name</ssl_first_name>\n    <ssl_middle_name>Middle_name</ssl_middle_name>\n    <ssl_last_name>Last_name</ssl_last_name>\n  </txn>\"                  \n"
                },
                "Debit_pinless_billpay": {
                  "summary": "Pinless Debit Bill Pay",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>pldbillpay</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_customer_number></ssl_customer_number>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date></ssl_exp_date>\n  </txn>\" \n"
                },
                "Debit_pinless_purchase": {
                  "summary": "Pinless Debit Purchase",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>pldpurchase</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date></ssl_exp_date>\n    <ssl_avs_zip></ssl_avs_zip>\n    <ssl_avs_address></ssl_avs_address>\n    <ssl_cvv2cvc2></ssl_cvv2cvc2>\n    <ssl_customer_number></ssl_customer_number>\n    <ssl_account_type></ssl_account_type>                   \n    <ssl_result_format></ssl_result_format> \n    <ssl_amount></ssl_amount>\n    <ssl_salestax></ssl_salestax> \n    <ssl_cashback_amount>2.00</ssl_cashback_amount>\n  </txn>\"                                      \n"
                },
                "3DSecure": {
                  "summary": "3D Secure2 EFS Token",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>efstoken</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n  </txn>\"          \n"
                },
                "3DSecure_Transaction": {
                  "summary": "3D Secure2 Sale",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccsale</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>25.00</ssl_amount>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_cvv2cvc2>123</ssl_cvv2cvc2>\n    <ssl_program_protocol>2</ssl_program_protocol>\n    <ssl_eci_ind>5</ssl_eci_ind>\n    <ssl_dir_server_tran_id>51787e37-1234-1234-1234-9335a608389e</ssl_dir_server_tran_id>\n    <ssl_3dsecure_value>oCHD5TyCf2f56l2TClJhjh3zXbA=</ssl_3dsecure_value>\n    <ssl_3ds_message_version>2.2.0</ssl_3ds_message_version>\n    <ssl_3ds_server_trans_id>b3764dd8-1234-1234-1234-8bd850f71c52</ssl_3ds_server_trans_id>\n    <ssl_3ds_trans_status>Y</ssl_3ds_trans_status>\n    <ssl_3ds_trans_status_reason></ssl_3ds_trans_status_reason>\n  </txn>\"          \n"
                },
                "BatchQuery": {
                  "summary": "Batch Import Transaction Query",
                  "description": "Batch Import Transaction Query",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>bitxnquery</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_date>11/05/2028</ssl_date>\n    <ssl_file_name>My_Batch.csv</ssl_file_name>\n  </txn>\"                     \n"
                },
                "EOD_Transaction_Email": {
                  "summary": "End of Day Transaction Email",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>txnemail</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_txn_id>190325O2C-4E88129E-A398-4BD8-BD1A-130D35F7D123</ssl_txn_id>\n  </txn>\"                   \n"
                },
                "EOD_Transaction Query": {
                  "summary": "End of Day Transaction Query",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>txnquery</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_search_start_date>MM/DD/YYYY</ssl_search_start_date>\n    <ssl_search_end_date>MM/DD/YYYY</ssl_search_end_date>\n  </txn>\"\n"
                },
                "EOD_Transaction_Total": {
                  "summary": "End of Day Total/Summary",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>total</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n  </txn>\"\n"
                },
                "EOD_Transaction_Settlement": {
                  "summary": "End of Day Settlement",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>settle</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n  </txn>\"\n"
                },
                "EOD_Transaction_Settlement_Query": {
                  "summary": "End of Day Settlement Query",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>stlquery</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_settlement_batch_response></ssl_settlement_batch_response>\n  </txn>\"                                  \n"
                },
                "EOD_Recurring_Query": {
                  "summary": "End of Day Recurring Query",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>recurringquery</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_recurring_id>160720MB-105A1B2E-DDEC-4D17-B898-A88E4C91ACF2</ssl_recurring_id>\n  </txn>\"\n"
                },
                "ECS_Purchase": {
                  "summary": "Electronic Check Purchase",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ecspurchase</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>20.00</ssl_amount>\n    <ssl_aba_number>490000018</ssl_aba_number>\n    <ssl_agree>1</ssl_agree>\n    <ssl_bank_account_number>1234567890</ssl_bank_account_number>\n    <ssl_bank_account_type>0</ssl_bank_account_type>\n    <ssl_first_name>John</ssl_first_name>\n    <ssl_last_name>Doe</ssl_last_name>\n  </txn>\"\n"
                },
                "ECS_Void": {
                  "summary": "Electronic Check Void",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ecsvoid</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_txn_id>030424MC8-BD831EC7-AB7D-47C0-A3D1-BDFC229AC3DD</ssl_txn_id>\n  </txn>\"\n"
                },
                "ECS_AddRecurring": {
                  "summary": "Electronic Check Add Recurring",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ecsaddrecurring</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>5</ssl_amount> \n    <ssl_bank_account_type>0</ssl_bank_account_type>\n    <ssl_bank_account_number>1234567890</ssl_bank_account_number>\n    <ssl_aba_number>49********8</ssl_aba_number>\n    <ssl_check_number></ssl_check_number>\n    <ssl_first_name>Test</ssl_first_name>\n    <ssl_last_name>User</ssl_last_name>\n    <ssl_next_payment_date>mm/dd/yyyy</ssl_next_payment_date>\n    <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n  </txn>\"\n"
                },
                "ECS_UpdateRecurring": {
                  "summary": "Electronic Check Update Recurring",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ecsupdaterecurring</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_recurring_id>my_recurring_id</ssl_recurring_id>\n    <ssl_next_payment_date>mm/dd/yyyy</ssl_next_payment_date>\n    <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n    <ssl_bill_on_half>1</ssl_bill_on_half>\n    <ssl_end_of_month>Y</ssl_end_of_month>\n    <ssl_skip_payment>Y</ssl_skip_payment>\n  </txn>\"\n"
                },
                "ECS_DeleteRecurring": {
                  "summary": "Electronic Check Delete Recurring",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ecsdeleterecurring</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_recurring_id>my_recurring_id</ssl_recurring_id>\n  </txn>\"\n"
                },
                "ECS_RecurringAddtnlPayment": {
                  "summary": "Electronic Check Recurring Additional Payment",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ecsrecurringsale</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_recurring_id>my_recurring_id</ssl_recurring_id>\n  </txn>\"\n"
                },
                "ECS_AddInstallment": {
                  "summary": "Electronic Check Add Installment",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ecsaddinstall</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>5</ssl_amount> \n    <ssl_bank_account_type>0</ssl_bank_account_type>\n    <ssl_bank_account_number>1234567890</ssl_bank_account_number>\n    <ssl_aba_number>49********8</ssl_aba_number>\n    <ssl_agree>1</ssl_agree>\n    <ssl_check_number></ssl_check_number>\n    <ssl_first_name>Test</ssl_first_name>\n    <ssl_last_name>User</ssl_last_name>\n    <ssl_total_installments>4</ssl_total_installments>\n    <ssl_next_payment_date>mm/dd/yyyy</ssl_next_payment_date>\n    <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n  </txn>\"\n"
                },
                "ECS_UpdateInstallment": {
                  "summary": "Electronic Check Update Installment",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ecsupdateinstall</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>5</ssl_amount> \n    <ssl_installment_id>my_installment_id</ssl_installment_id>\n    <ssl_total_installments>6</ssl_total_installments>\n    <ssl_next_payment_date>mm/dd/yyyy</ssl_next_payment_date>\n    <ssl_billing_cycle>MONTHLY</ssl_billing_cycle>\n    <ssl_bill_on_half>1</ssl_bill_on_half>\n    <ssl_end_of_month>Y</ssl_end_of_month>\n    <ssl_skip_payment>Y</ssl_skip_payment>\n  </txn>\"\n"
                },
                "ECS_DeleteInstallment": {
                  "summary": "Electronic Check Delete Installment",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ecsdeleteinstall</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_installment_id>my_installment_id</ssl_installment_id>\n  </txn>\"\n"
                },
                "ECS_InstallmentAddtnlPayment": {
                  "summary": "Electronic Check Installment Additional Payment",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ecsinstallsale</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_installment_id>my_installment_id</ssl_installment_id>\n  </txn>\"\n"
                },
                "GC_Activation": {
                  "summary": "Electronic Gift Card Activation",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>egcsactivation</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>20.00</ssl_amount>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_security_code>123</ssl_security_code>\n  </txn>\" \n"
                },
                "GC_Token": {
                  "summary": "Electronic Gift Card Generate Token",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>egcgettoken</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>                   \n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1225</ssl_exp_date>\n    <ssl_security_code>1234</ssl_security_code>\n  </txn>\" \n"
                },
                "GC_Sale": {
                  "summary": "Electronic Gift Card Redemption",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>egcsale</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>20.00</ssl_amount>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_security_code>123</ssl_security_code>\n  </txn>\" \n"
                },
                "GC_Refund": {
                  "summary": "Electronic Gift Card Refund",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>EGCCARDREFUND</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>1.00</ssl_amount>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_first_name>John</ssl_first_name>\n    <ssl_last_name>Smith</ssl_last_name>\n  </txn>\"\n"
                },
                "GC_Credit": {
                  "summary": "Electronic Gift Card Credit",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>EGCCREDIT</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>1.00</ssl_amount>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_first_name>John</ssl_first_name>\n    <ssl_last_name>Smith</ssl_last_name>\n  </txn>\"\n"
                },
                "GC_Inquiry": {
                  "summary": "Electronic Gift Card Balance Inquiry",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>egcbalinquiry</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_security_code>1234</ssl_security_code>\n  </txn>\"\n"
                },
                "GC_Reload": {
                  "summary": "Electronic Gift Card Reload",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>egcreload</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_amount>10</ssl_amount>\n    <ssl_egc_tender_type>0</ssl_egc_tender_type>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1230</ssl_exp_date>\n    <ssl_security_code>1234</ssl_security_code>\n  </txn>\"\n"
                }
              }
            }
          }
        },
        "XMLProcessInPerson": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "discriminator": {
                  "propertyName": "Schema",
                  "mapping": {
                    "Credit Card Sale": "#/components/schemas/XML_CC_Sale_InPerson",
                    "Credit Card Auth Only": "#/components/schemas/XML_CC_AuthOnly_InPerson",
                    "Credit Card Verify": "#/components/schemas/XML_CC_Verification_InPerson",
                    "Credit Card Balance Inquiry": "#/components/schemas/XML_CC_CreditBalance_InPerson",
                    "Credit Card Update Tip": "#/components/schemas/XML_CC_UpdateTip",
                    "Credit Card Signature": "#/components/schemas/XML_CC_Signature",
                    "Token Generate": "#/components/schemas/XML_TokenGenerate_InPerson",
                    "BIN Lookup": "#/components/schemas/XML_DB_BINLookup_InPerson",
                    "Debit Card Purchase": "#/components/schemas/XML_DB_Purchase",
                    "Debit Card Return": "#/components/schemas/XML_DB_Return",
                    "Debit Card Auth Only": "#/components/schemas/XML_DB_AuthOnly",
                    "Debit Card Auth Only Increment": "#/components/schemas/XML_DB_AuthOnlyIncrement",
                    "Debit Card Complete": "#/components/schemas/XML_DB_Complete",
                    "Debit Card Reverse": "#/components/schemas/XML_DB_Reverse",
                    "Debit Card Void": "#/components/schemas/XML_DB_Void",
                    "Debit Card Delete": "#/components/schemas/XML_DB_Delete",
                    "Debit Card Inquiry": "#/components/schemas/XML_DB_Inquiry",
                    "Debit Straight Send": "#/components/schemas/XML_DB_StraightSend",
                    "EMV Key Exchange": "#/components/schemas/XML_EMV_KeyExchange",
                    "EMV Chip Sale": "#/components/schemas/XML_EMV_Sale",
                    "EMV Chip Auth Only": "#/components/schemas/XML_EMV_AuthOnly",
                    "EMV Swipe Sale": "#/components/schemas/XML_EMV_SwipeSale",
                    "EMV Swipe Auth Only": "#/components/schemas/XML_EMV_SwipeAuth",
                    "EMV Chip Update": "#/components/schemas/XML_EMV_Update",
                    "EMV Reverse": "#/components/schemas/XML_EMV_Reversal",
                    "EMV Chip Return": "#/components/schemas/XML_EMV_Return",
                    "EMV DCC Check": "#/components/schemas/XML_EMV_DCC",
                    "EMV Chip Cash Advance": "#/components/schemas/XML_EMV_CashAdvance",
                    "EMV Swipe Cash Advance": "#/components/schemas/XML_EMV_CashAdvanceSwipe",
                    "EBT Food Stamp Purchase": "#/components/schemas/XML_EBT_Purchase",
                    "EBT Food Stamp Return": "#/components/schemas/XML_EBT_Return",
                    "EBT Food Stamp Inquiry": "#/components/schemas/XML_EBT_Inquiry",
                    "EBT Food Stamp Force Purchase": "#/components/schemas/XML_EBT_ForcePurchase",
                    "EBT Food Stamp Force Return": "#/components/schemas/XML_EBT_ForceReturn",
                    "Cash Benefit Purchase": "#/components/schemas/XML_EBT_CashBenefitPurchase",
                    "Cash Benefit Inquiry": "#/components/schemas/XML_EBT_CashBenefitInquiry",
                    "Check Purchase": "#/components/schemas/XML_EC_Purchase_InPerson",
                    "Cash Sale": "#/components/schemas/XML_Cash_Sale",
                    "Cash Return/Credit": "#/components/schemas/XML_Cash_Return"
                  }
                }
              },
              "examples": {
                "CC_Sale": {
                  "summary": "Credit Card Sale (Swiped)",
                  "value": "xmldata= \n  \"<txn>\n    <ssl_transaction_type>ccsale</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_track_data></ssl_track_data>\n    <ssl_amount>25.00</ssl_amount>\n    <ssl_mobile_id></ssl_mobile_id>\n    <ssl_pos_mode>01</ssl_pos_mode>\n    <ssl_entry_mode>03</ssl_entry_mode>\n  </txn>\" \n"
                },
                "CC_AuthOnly": {
                  "summary": "Credit Card Auth Only (Encrypted)",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccauthonly</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_enc_track_data></ssl_enc_track_data>\n    <ssl_ksn></ssl_ksn>\n    <ssl_amount>25.00</ssl_amount>\n  </txn>\"\n"
                },
                "CC_Verify": {
                  "summary": "Credit Card Verify (Swiped)",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccverify</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_avs_address>2 Concourse Parkway</ssl_avs_address>\n    <ssl_avs_zip>12345</ssl_avs_zip>\n    <ssl_mobile_id></ssl_mobile_id>\n    <ssl_pos_mode>01</ssl_pos_mode>\n    <ssl_entry_mode>03</ssl_entry_mode>            \n  </txn>\"\n"
                },
                "CC_Balinquiry": {
                  "summary": "Credit Card Balance Inquiry (Swiped)",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccbalinquiry</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_mobile_id></ssl_mobile_id>\n    <ssl_pos_mode>01</ssl_pos_mode>\n    <ssl_entry_mode>03</ssl_entry_mode>     \n  </txn>\"\n"
                },
                "CC_UpdateTip": {
                  "summary": "Credit Card Update Tip",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccupdateTip</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_tip_amount>1.50</ssl_tip_amount>\n    <ssl_txn_id>AA47AE-FD5EDB42-2276-435C-9A7E-C23F9A2BF173</ssl_txn_id>\n  </txn>\"\n"
                },
                "CC_Signature": {
                  "summary": "Credit Card Signature",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccsignature</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_txn_id>AA49315-DCA463E6-F924-4CA8-9FBF-01220FBACA19</ssl_txn_id>\n    <ssl_signature_image>SIGNATURE_IMAGE</ssl_signature_image>\n    <ssl_image_type>PNG</ssl_image_type>\n  </txn>\"\n"
                },
                "Token_Generate": {
                  "summary": "Token Generate (Swiped)",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ccgettoken</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_verify>Y</ssl_verify>\n    <ssl_mobile_id></ssl_mobile_id>\n    <ssl_pos_mode>01</ssl_pos_mode>\n    <ssl_entry_mode>03</ssl_entry_mode>  \n    <ssl_enc_track_data></ssl_enc_track_data>\n    <ssl_ksn></ssl_ksn>\n    <ssl_amount></ssl_amount>\n  </txn>\"\n"
                },
                "BIN_Lookup": {
                  "summary": "BIN Lookup",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>binlookup</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_first_name>First_name</ssl_first_name>\n    <ssl_middle_name>Middle_name</ssl_middle_name>\n    <ssl_last_name>Last_name</ssl_last_name>\n  </txn>\"\n"
                },
                "DB_Authonly_Transaction": {
                  "summary": "Debit Card Authonly",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>dbauthonly</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_auth_lifecycle_indicator>2</ssl_auth_lifecycle_indicator>\n    <ssl_auth_lifecycle_duration>11</ssl_auth_lifecycle_duration>\n    <ssl_amount>10</ssl_amount>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date></ssl_exp_date>\n    <ssl_cvv2cvc2></ssl_cvv2cvc2>\n    </txn>\" \n"
                },
                "DB_OctDisbursement_Transaction": {
                  "summary": "Debit Card Straight Send",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>dboctdisbursement</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1225</ssl_exp_date>\n    <ssl_oct_ref_number></ssl_oct_ref_number>\n    <ssl_amount>5.00</ssl_amount>  \n    <ssl_first_name>First</ssl_first_name>\n    <ssl_middle_name>Middle</ssl_middle_name>\n    <ssl_last_name>Last</ssl_last_name>\n    <ssl_name_verification>ANVF</ssl_name_verification>\n  </txn>\"\n"
                },
                "EMV_KEY_EXCHANGE": {
                  "summary": "EMV Key Exchange",
                  "value": "xmldata= \n  \"<txn>\n    <ssl_transaction_type>emvkeyexchange</ssl_transaction_type> \n    <ssl_account_id>000006</ssl_account_id>\n    <ssl_user_id>su66</ssl_user_id>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_pin>538EEPJF2ZQYDOPAEE77QBOZZJ748M1258JN0UKA953IWB15NMNRR2Z5NGINCLH7</ssl_pin>\n</txn>\"\n"
                },
                "EMV_CHIP_SALE": {
                  "summary": "EMV Chip Sale",
                  "value": "xmldata= \n  \"<txn>\n    <ssl_transaction_type>emvchipsale</ssl_transaction_type> \n    <ssl_account_id>000006</ssl_account_id>\n    <ssl_user_id>su66</ssl_user_id>\n    <ssl_pin>538EEPJF2ZQYDOPAEE77QBOZZJ748M1258JN0UKA953IWB15NMNRR2Z5NGINCLH7</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_tlv_enc>\nn    </ssl_tlv_enc>\n    <ssl_pos_mode>05</ssl_pos_mode>  \n    <ssl_entry_mode>05</ssl_entry_mode> \n</txn>\"\n"
                },
                "EMV_CHIP_AUTHONLY": {
                  "summary": "EMV Chip Auth Only",
                  "value": "xmldata= \n  \"<txn>\n    <ssl_transaction_type>emvchipauthonly</ssl_transaction_type> \n    <ssl_account_id>000006</ssl_account_id>\n    <ssl_user_id>su66</ssl_user_id>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_pin>538EEPJF2ZQYDOPAEE77QBOZZJ748M1258JN0UKA953IWB15NMNRR2Z5NGINCLH7</ssl_pin>\n    <ssl_tlv_enc>\nn    </ssl_tlv_enc>\n    <ssl_pos_mode>05</ssl_pos_mode>  \n    <ssl_entry_mode>05</ssl_entry_mode> \n</txn>\"                 \n"
                },
                "EMV_SWIPE_SALE": {
                  "summary": "EMV Swipe Sale",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>emvswipeauthonly</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_ksn>FFFF4455660000000001</ssl_ksn>\n    <ssl_enc_track_data>9A50C42E6DFAA57A5B269886A6248707B48D36F4C1128D78F989C915B11FBF4D39561C7D12F53EF201A88614EFC58F3AD9006B4C9A2C776BCF431023ADAAC209337E413A7BDB12C0C16673D947E31B6A3C0A324A0615EE40B5203E45404A26BEE79F4743B526DF14FE47E3E3AF9099FAA64908CAC047D232</ssl_enc_track_data>\n    <ssl_enc_track_data_format>ONGUARD_SDE_V1</ssl_enc_track_data_format> \n    <ssl_amount>12.00</ssl_amount>\n    <ssl_pos_mode>05</ssl_pos_mode>\n    <ssl_entry_mode>03</ssl_entry_mode>\n  </txn>\"\n"
                },
                "EMV_SWIPE_AUTHONLY": {
                  "summary": "EMV Swipe Auth Only",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>emvswipeauthonly</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_ksn>FFFF4455660000000001</ssl_ksn>\n    <ssl_enc_track_data>9A50C42E6DFAA57A5B269886A6248707B48D36F4C1128D78F989C915B11FBF4D39561C7D12F53EF201A88614EFC58F3AD9006B4C9A2C776BCF431023ADAAC209337E413A7BDB12C0C16673D947E31B6A3C0A324A0615EE40B5203E45404A26BEE79F4743B526DF14FE47E3E3AF9099FAA64908CAC047D232</ssl_enc_track_data>\n    <ssl_enc_track_data_format>ONGUARD_SDE_V1</ssl_enc_track_data_format> \n    <ssl_amount>12.00</ssl_amount>\n    <ssl_pos_mode>05</ssl_pos_mode>\n    <ssl_entry_mode>03</ssl_entry_mode>\n  </txn>\"\n"
                },
                "EMV_UPDATE": {
                  "summary": "EMV Chip Update",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>emvchipupdate</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <<ssl_txn_id>my txn ID</ssl_txn_id>\n    <ssl_icc_tsi>E800</ssl_icc_tsi>\n    <ssl_icc_isr></ssl_icc_isr>\n   </txn>\"\n"
                },
                "EMV_REVERSE": {
                  "summary": "EMV Reverse",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>emvreverse</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <<ssl_txn_id>my txn ID</ssl_txn_id>\n  </txn>\"\n"
                },
                "EMV_CHIP_RETURN": {
                  "summary": "EMV Chip Return",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>emvchipreturn</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_tlv_encssl_tlv_enc>\n    <ssl_entry_mode>05</ssl_entry_mode>\n    <ssl_pos_mode>05</ssl_pos_mode>\n  </txn>\"\n"
                },
                "EMV_DCC_Check": {
                  "summary": "EMV DCC Check",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>emvdcccheck</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_tlv_encssl_tlv_enc>\n  </txn>\"\n"
                },
                "EMV_Chip_Cash_Advance": {
                  "summary": "EMV Chip Cash Advance",
                  "value": "xmldata=\n  \"<txn> \n    <ssl_transaction_type>emvchipcashadvance</ssl_transaction_type> \n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_tlv_enc>\n    5F3002020157114761730000000119D221220100000000009F26081067600053D3B5909F270180FF1D10343736313733303030303030303131395A084761730000000119FF1F243b343736313733303030303030303131393d32323132323031303030303030303030303f5F2A0208409F4005F000F0A0019A031606159B02E8009F21030202159C01004004030920169F4104000002519F1E08534330313030343882025C00C00AFFFF44556600076000998407A00000000310105F340101950502800080005F201A5649534120414351554952455220544553542f434152442030319F1A0208409F02060000000011009F3901059F360200029F3704F1D799249F0607A00000000310109F3501229F34031E03009F3303E0B8C89F03060000000000009F0902008C9F120F4352454449544F20444520564953414F07A00000000310109F1101019F100706010A03A000009F0702FF005F24032212319F530152D028C6A13991CBD70F25A93C46CA8ABA76C972BDB73D43C657CADEFC6EC2EA67937603F1FE1C1DE531165F28020840500B5649534120435245444954\n    </ssl_tlv_enc>\n    <ssl_pos_mode>05</ssl_pos_mode>  \n    <ssl_entry_mode>05</ssl_entry_mode> \n  </txn>\"            \n"
                },
                "EMV_Swipe_Cash_Advance": {
                  "summary": "EMV Swipe Cash Advance",
                  "value": "xmldata=\n  \"<txn> \n    <ssl_transaction_type>EMVSWIPECASHADVANCE</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_enc_track_data>35227AD6839F8174FECE3F5F769CB30F3F26F3B2EA7A919CC9618C0FC55A4BB32D8D10F93D347DD905BE2B559C64C8CCFBF288FE7E2D5B8F0E3C9B613F20A193E5123ABB0B0A5B342F58AA6C1395ECA68197944A96BC53B9FF911A28FF884BEAF5456CFB357EA2310B443398D40CDF68C4CBFAC4EDDCCC3A</ssl_enc_track_data>\n    <ssl_ksn>FFFF0C0DE00000400074</ssl_ksn>    \n    <ssl_amount>9.00</ssl_amount>\n    <ssl_avs_zip>80112</ssl_avs_zip>\n    <ssl_pos_mode>05</ssl_pos_mode>\n    <ssl_entry_mode>03</ssl_entry_mode>\n  </txn>\"\n"
                },
                "EBT_Purchase": {
                  "summary": "EBT Food Stamp Purchase",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>fspurchase</ssl_transaction_type>\n    <ssl_account_id>my_merchant_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_track_data>%%B41249399&&99**********************************90154321396145?</ssl_track_data>\n    <ssl_amount>1.00</ssl_amount>\n    <ssl_pin_block>sc1000I</ssl_pin_block>\n    <ssl_dukpt>654321000040002D</ssl_dukpt>\n    <ssl_key_pointer>T</ssl_key_pointer>\n  </txn>\"\n"
                },
                "EBT_Return": {
                  "summary": "EBT Food Stamp Return",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>fsreturn</ssl_transaction_type>\n    <ssl_account_id>my_merchant_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_track_data>%B41249399&&99**********************************90154321396145?</ssl_track_data>\n    <ssl_amount>1.00</ssl_amount>\n    <ssl_pin_block>sc1000I</ssl_pin_block>\n    <ssl_dukpt>654321000040002D</ssl_dukpt>\n    <ssl_key_pointer>T</ssl_key_pointer>\n  </txn>\"\n"
                },
                "EBT_Inquiry": {
                  "summary": "EBT Food Stamp Inquiry",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>fsbainquiry</ssl_transaction_type>\n    <ssl_account_id>my_merchant_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_track_data>%%B41249399&&99**********************************90154321396145?</ssl_track_data>\n    <ssl_pin_block>sc1000I</ssl_pin_block>\n    <ssl_dukpt>654321000040002D</ssl_dukpt>\n    <ssl_key_pointer>T</ssl_key_pointer>\n  </txn>\"\n"
                },
                "EBT_ForcePurchase": {
                  "summary": "EBT Food Stamp Force Purchase",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>fsforcepurchase</ssl_transaction_type>\n    <ssl_account_id>my_merchant_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1225</ssl_exp_date>\n    <ssl_amount>1.00</ssl_amount>\n    <ssl_approval_code>N35032</ssl_approval_code>\n    <ssl_voucher_number>501398600014659</ssl_voucher_number>\n  </txn>\"\n"
                },
                "EBT_ForceReturn": {
                  "summary": "EBT Food Stamp Force Return",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>fsforcereturn</ssl_transaction_type>\n    <ssl_account_id>my_merchant_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n    <ssl_card_number>4000000000000002</ssl_card_number>\n    <ssl_exp_date>1225</ssl_exp_date>\n    <ssl_amount>1.00</ssl_amount>\n    <ssl_approval_code>N35032</ssl_approval_code>\n    <ssl_voucher_number>501398600014659</ssl_voucher_number>\n  </txn>\"   \n"
                },
                "EBT_CashBenefit_Purchase": {
                  "summary": "Cash Benefit Purchase",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>cbpurchase</ssl_transaction_type>\n    <ssl_account_id>my_merchant_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>                    \n    <ssl_amount>2.00</ssl_amount>\n    <ssl_track_data>%B41249399&&99**********************************90154321396145?</ssl_track_data>\n    <ssl_dukpt>654321000040002D</ssl_dukpt>\n    <ssl_key_pointer>T</ssl_key_pointer>\n    <ssl_pin_block>sc1000I</ssl_pin_block>\n</txn>\"   \n"
                },
                "EBT_CashBenefit_Inquiry": {
                  "summary": "Cash Benefit Inquiry",
                  "value": "xmldata=\n  \"<txn>\n      <ssl_transaction_type>cbbainquiry</ssl_transaction_type>\n      <ssl_account_id>my_merchant_id</ssl_account_id>\n      <ssl_user_id>my_user_id</ssl_user_id>\n      <ssl_pin>my_pin</ssl_pin>\n      <ssl_vendor_id>my_vendor_id</ssl_vendor_id>                  \n      <ssl_track_data>%%B41249399&&99**********************************90154321396145?</ssl_track_data>\n      <ssl_dukpt>654321000040002D</ssl_dukpt>\n      <ssl_key_pointer>T</ssl_key_pointer>\n      <ssl_pin_block>sc1000I</ssl_pin_block>\n  </txn>\"   \n"
                },
                "PaperCheck_Purchase": {
                  "summary": "Check Purchase",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>ecspurchase</ssl_transaction_type>\n    <ssl_account_id>my_merchant_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_amount>20.00</ssl_amount>\n    <ssl_bank_account_type>0</ssl_bank_account_type>\n    <ssl_micr_data>T123456789T1234567890O 1234<</ssl_micr_data>\n    <ssl_drivers_license_number>1234567890</ssl_drivers_license_number>\n    <ssl_drivers_license_phone_number>1234567890</ssl_drivers_license_phone_number>\n    <ssl_drivers_license_state>GA</ssl_drivers_license_state>\n    <ssl_check_image>SUkqAAoAAAAAABgA/gAEAAEAAAAAAAAAAAEEAAEAAADIBAAAAQEEAAEAAAAyAgAAAgEDAAEAAAABAAAAAwEDAAEAAAAEAAAABgEDAAEAAAAAAAAACgEDAAEAAAABAAAADQECABoAAAAwAQAADgECABwAAABKAQAADwECAAoAAABmAQAAEAECABUAAABwAQAAEQEEAAEAAADmAQAAEgEDAAEAAAABAAAAFQEDAAEAAAABAAAAFgEEAAEAAAAyAgAAFwEEAAEAAACgHwAAGgEFAAEAAACGAQAAGwEFAAEAAACOAQAAHAEDAAEAAAABAAAAHQECACEAAACWAQAAKAEDAAEAAAACAAAAMQECAAwAAAC4AQAAMgECABQAAADEAQAAM8QEAAEAAADYAQAAAAAAADMwMDcxMzkxMTExNzcwMzk0MDAwMDAzNzcAVDQ5MDAwMDAxOFQyNDQxMzgxNU8gIDEwMDEAAFJETSBDb3JwLgBFQzkwMDAAMzAwNzEzOTExMTE3NwAAyAAAAAEAAADIAAAAAQAAADxQQURPQyBWRVI9JzInIFNVUkZBQ0U9J0ZST05UJy8+AAAwOC4wMi4wRS4wMAAyMDI0OjEwOjE1IDEzOjI0OjEzAAEA6gMCAAEAAAAAAAAAJqGc9nIvl8jsj5HCmEXy4HUGeQxtOVB3PBWHHMOYcznc4/ERERERE15fI8R4j5eI8XyPEdkcDoeIiIiIiJEsjxHy+XyOBzDPQiIid5l8uEI4E0CzERIojiOIui4yPEeI8XIuGcjgTAUUIiIiIiJoZ2Ty6PCnERpG0Xz0R8vEfI7I4NRHiOBqC0XyUlYiIiIiIiIiJlPI4LYLAh4QlSRtl8jgeCqYRtH0UInyOB4LkeeCEREREREfLXBIjxe9DjxM768lzI8R8zigL4IRESDYOdyJWU1TPQQiJAuOW5DLc7lTKgpqKWER0EIiIiQ1nL1OOdpqeEFFEMvhESB4IORWaSEOBcVDO5ODObiE4hxy3IVxIZIbdlOU5Q5NyhzjkcFedkSirIY4hpKNe/TTNCaPsGZy3Io5OyGzCHgREREREhkAsjkK5m5MRD9Bhevf66poMk5cJlwEDJQaDOYc8zDkEghngpxEgzuV5YKUIIbY5W5lOH6IOOaND9G78wM3O0tO9Pv9PTLcIMtybhCyJBD+W5FcmOX5CuIiIkNUchgcX8EIPuNXj0nj11RtvmO2n/6dr2nqnYTIficyfmmW5cEcyUEfluXBPCcyXExybkKOXhB3IZ8IYHIHguOIkDhyDDmHL4iuZ38Ijr82uKoz4/V1X7+uDC7mJ+DSf+ladrp92npIO0080Kg0yUFug0GTgtyFgl5qGc3ncI+zBmCLhTEYi5mI0jPM2bZszAz4UuFNhkgtFxTSDI4VNM7rb9IX+3v6xxrH3Efxq/df/NglG98wKYF/zFtUbXT7u79b/TvVdPv/XW/tBmdQgycFuToZybm8hOIaLIcchsck5PibkXyCDk5kFQciz0//vfwzmtmGtXNE3/5tN//1+79PTvmYnD/36avFJB7Ru/fMVNPmJp2vYMLmyo3PX01wYKYFN+1/VO/+0GSsJlwmqp6adkJBJy3J/fCRtbS5gb0iMc7nf8ST/16082UuNW//7/itSh/9bTSS5nGcPWhXXpv/7791u01r06ftO/T7p/T4qbne0mvap63praemna3g9N/3EWCBIQ2vH/2P3Y2YT1ptG/aU8v/7a3992E1XT7T9Ore1Q/Tj07j+7g4xteI+5nDj9JJuLDV2jYJtG5xXaNvzf2u9HE1rXjWZ+Mt/3rdqvmelbenj43qnm/o3vq/+k+3/v79cf/+/VP+7W/T/0/9eOaD+9EJCH3fpsJP0F9r3/QaBEfT+IiLTW1tNPXTXVP9O2sV/giP6mwq3m1YKbPq5cfv/Nr6fVL+vWCI99rr/791/TxUkeP+/4/1CI69O/h0h/EREQwha2nDXT1/sU/1GxzQrfT+j371m928xOzv7va82v82vN9+Cm1T0+eW+bGbX/wiOu6/9rUfp6fp/H7XNjTBd6iIhhCIiItV001Uw+9bsV80xI/aqb7FPse7HFbxXTx277v1Wx1zMXr5x6b1m7NpxHMfZu1p5cWGpyza///vI6sfzON8R9xERERDtCwtp3ff/qna2393+ph36mHpqYtde1XMXpqYvEPeYW69tr/3/V2nZtNeKv//FqmvevstzOazDiIiIsuGDAaE0LTBCLCaDTBFDtNO1TTVPvCp/p//2und/f+tmFmH9p2t/e32KmN/xUz/rNqxzP7VV0/xERJSjCJwwR0R0RwNgMwQiJJxEREGhEREXd92tqmq6mHfceg11OL3XT3tCIiPxEREho6I0iOCGAJYEWqet2nadqE7zbTu/Qj8RETs1yOyOBMBoTT00wTI4HgceInZCI8XiOiOiOjOLojojgTYzBfoREREREiyKeI6I6I3kdEDRmidE6OIuZhEfL5jMRgHNgbUYRHRsGCOjCIF+IiIiIiIsIREREy5EFRhFQiOjiMI+jGR0eRHRHRuPGXMjojovGAWyEREX7JGUgUhWezeRZYiIiIiIiIiIiIneIuiOiPF4jo8RHi8Xy6I6OI2i6NsjoxkeJ0RyMZ8EI4Ny4ZRHf+FIEkrbXEREREREREREREREREV6yBsjpQv+/1Q6T/r2Lk5mZp7r2diq/wg1QOhcmFlvghpmoeaIjovlCNfZZR0Tl/zQ55pcjmfIJ55Q1TORLriIO0Gf8shSMJoO+tBOrBV6KthFW9OYcp3zX06h/5N1mJGgws0fv3f8G11vSxDekOaLtF4+/JuVwTBBmkESfi/663/776W/oGCIuAzhbv+VEeWCoNMLCGUP6642H/pqo6Cq9tb09X4Ij2cz2c0GEDyORmM5l47VpUXFFxTSF+/4RHTd2vTXHvwYYU92Ei4e7ft68RxDRncbKblTpuE3OPrWu+et1v0P/vQvUJ//91ROCTuXeg8JJlQq9xfwl+SP3tyQl7+92+9b///aYXTaXCZTcF7r14LfS9/a+3zu/w3gih/S1/t/pV13eP/691722bzeu2l9tnFt/hvBD47/2//97/+vo6HnR331GxwdpfIkMEthr7etV/76//xS//2u/+4YVOGP2o73S/nzzJ+l9/vv8s/X///8RBhBoGC7aa71/tf/vY+l1taS//x3+sRERDCG30lOq9LbvVa3bt9/3379vV+8RGKZE8VBtrbZv3BKyOiOvwvrDS19dfP6Bm2C/9K08cNj4qIt+Nd4phl57un7YwmxS/yYdpwzIQYXJDgvdk3Tv0xX2tpINra+sREREdghZQ5Q4QiIiIiGUOEJN6BWOMFDTKHO4QZQ4S9+IiIjtNbKHBCIiL/7O6YTCDKHCEf6xEREV6tp++//+smyVl0fjGXRhGaPIiEYRhE6PIjpf8IRERERERERIazkF3LHKHKHMOQX4kOUOccjHJwUyqvviIiIiIiIk2UL/s9kJZhyoIUcocryFs7nHJuR4QzwTHKgijr/ERERERERERZ1MqZQ5Q5iZQ5XFIJsqr/URERER/EjTImiPv+SMpBIkKbin/87B5pndrf+YpKH+Sgk9f6OhiGbZPYTp38bCZ4skZsinXouA8ySl/kjNqkHefGmUQQZzJ8oiOtSnSQezItGqkjOw0U8SP/ZRfPmF1M83RdmAgQvaOGERoV93hAwnq/6UiReFwhfl37CXpp7nyy+fr9M5kE/1/ZRfT119Xy7z2vnoa2lgvfNbfRiKd//TKEGpv/f+nW/6fea3utOpjJzIeT39L/9pf/RoKv/v/a/e9XS8Q0Gewg0RT8IGbI4RmSB5oeeFM48Z8zx/7KGevv6/v/uGvX/v2nFrt6pp87tDU3qEGmn/i/36NHv+rS9hx/XvSrLvNjmvPj4YYUEi4c9uCV1RY+IXM9P/W1r6+v+K8G5Mdf92rB1TpPuvt1UJtJsP82YQep8dDMyx63bSv1+/+d1rwhdf34rv668MP/9avdelfztWvv4qvYa9f+Le3p/8VC//jw36fBhFD3V66fyOgtsNlG5T+qYX1H3/yMNpU26Xfwuv/cN/HEa67/URsOGl+Ihgha2un/hsZsWzfa/Tpd1/M4X/JUJuE6F6/9htlG5T6ERBghERfnxhpoMbFf1XV/0P/Cgh//5tW2P2SEbQiK4MEGmmuv/dfv/au5vd9rfYd/taxEQYQiLT/Bhfz2pn99+l6t/v/73iv8V7G8Vewy8wyOi6g9uGsfZOlLpfrSYr2sNeGlpvY4j62JQ96ZEsVGv7KlWlERBghEMFkicQzjoNBraZQ4Qst1tUwv6SBgqEcREREREREQYQMJhfiylzJYiP6RHQ/7X+P+dFlupL/2UbLX0tL+9lGy198f/X//X//+m/2UyEq/Ef//38lbP5FY0R2fIf+U6vJftNU/2UDf3kE9oyFkZFa/SgiP5maB/6sqRTIZnav/ZRfeg1To+zR3ukqRRnV2W4ql8h7KL/Cezu7QaImEdhl0aPLtTRMqRRhAiIcGdBHMpinVGaI7PI2jd/0NN82WC+kaGqxBhB6bnBilUMJraDCcRaF/976Tvt3To2JFw2TjKvE4771myjY707qv/X+/eu66dpxeEG9Gh17pB5u2zc1KKa0P+7fVfev9dfX0+fSB97fnyPZ7dX+h/pWPvV+Ox2/99VVOvS/Qdru3BEe/9lJPdb31f+eL+P2v/VFv6/S/+x3/V+Y7/wv9fWl7YJQnbS6ev36+13jeC19GvXzG3fivQ1bj/35FNlL5DVux2rd/X12v/Vdy7dYa/W//ZSRbUNuociY1/7X/uTpqm/31p+Y2JPrbhhPTsiw2OH2sNLbMIjr+v3/7ewvX+Iji01LtsJvjj2I/6v//1Qv/xERptlDhbQdlOF/+6WtpIER70pb//SoRERERDKHBf7aTa302lqggb/8h7DCiLf8aFMUFb0wlT9/8V/tNOlqxCV+QhsC/phYiIYTKcEDBC/Cd+v8nQuIiI4ZQqn/tlMiw8REtwtEdP+k6RXLowiuZIjojojsuGf+mUyLOiugNo2y7I7PIjouiOiPmEeRmjCLozRHRHRHRHRdEdH0XRHRHRHRdGpEdENEmiLowZcFS/sRFCIiIiIiIiIiIiIiIiIiIiIkGocpzDhV9Moc45XFYVZQ5hynJDmcqCoIEQQVByGQnIo5WxV+IiIiIiIiIhlHKMyk5SCoKOVZXFQUQSHMOVtK+IiIiIiIiP9f+Q1///97//6/+9+P/+/+/nRV//p+k//9/6+L///+Q0WvNf2dgaI6ZRj+0l/TKapQUY/spqiy/sWUY/Q/j+Q/+v7/yDX7maZUkFNUf4sohMpqmv0mVIMpqGn2VImvxH//////8hr///2U1xb4lupr8hplNJS/pL+ymkF/ZWyUpqlv0iYFIsab/mFDkEG7/soIZ7lQv/SoHBhJ/4s4PZsj2fTBf+Q9Beg1Tycv/plBNTRb3CaByJ5G1VHsudjqL9ct21aD/lPqwkr+k8KXFFx+t2UkFdqtN9PT/jYwjQTrqn79/4JFutf/417qqd1/X8s5mn5FFGlcV3v8z2UbBPKK1pP6/4pEdfm/ta21T/a+KI/sfxTftj8p0+yyO1fyEaoT72IpNMJ2nf9c2sRERDM1UniNlLKEs0uk+UGtlN3KH/tJP4iWUoTKbuUP9IR/ZTRH0l8fkQ5TXEvOnKa439SzNV9OkVNfnErKC0R1XGLKBUK80RF+ER//D/h18J/aBF++qbJdP/sqo2wZ2qVeIplBsk4L8qAkgg8ipJ/iKLx6BozVLfpXoP/pzOyESL/lmD6+k5vU2WeJOm1V/I+R38aGmcH8O1+hOL5vNdGhrT4Jv/pfT0HgiOvYSa/I8v0vrQr6Jv/lI3f6gjj/+EP/9fxHV/v9+q/JTtfv423v8E9+3+R1VrvuuvDX/sJdrbtpKGDf5GKCtjbNpbVw2viwqknxuxWDD/ETohDC2v/I+YxYQs45Q4Quv04iI7/5ZqVpf3nMyqzREdGZkHldKUa+I0hERIIOUOccqyexYraUUbKqf7NFEREg2DkxyTkWyuPxTlpytrSDLHCfy/sqXEY5FwryDGCIiIiJBqHMOUOVxQ5Q5Q54IQgm5nJIKHMOZwSZQjCM0axkx0P+KQiInVHkaIuIRwwRwWwLm8uGwuzwheKER8jojxfOpFPnMl0YRhGEdUeR5EdOW4tkdGy/dlLmRRM2FUIrmHJDkhxERERERERERERESewKaZxGEZojoj5HRHR5HYWjsrRtFw1F8KR0kIiIiJQjyKEXRhGaNWUiI6PI6o2iOiOi+XRjMCnEZ5sELoxHMjojgoI5kcMgNIUIiIiIkNMckOQo5DjkFHkI4MxkeI+YRHZHRhEdEfJCNowi8cRIRHRHRfLgs/EIIQziEREREREREREREREREREq0fRT50yORrZdm0RwhHZHR9EdEdF0R2R0R2R4j7EREREREREREREREREhpjnwocrd+ELKaUFWUcmOeCnKmVBQ5hyVkY5DjkRyGUOQyKCti30hERERERERElaKEQiPInRHRHFI6MIf7ERERER/3/X6JC/0iOv9p/0v9lNcn+0iOl/a/of/+/0ER1+1+v7//++Nrk1X/RaFtb+lqImiI6I6ZTKWLJqiGmkkrfVIWUylv3FlMpZxZTXF+TVJa4/+Pk1X5DROv7S36ZTOlFMg3/SSI6/xj/GF+P5ZOX6X7KksFMpK/SSrzWhZTKS/ZTQVr8hpJlMpLXTZTXE/ul/TKAymvH8SIZcZxEdHBTaMImERC8eIiIiQUQRXOOVBUAkGR0S68mq5DA4iIiIiGXyPHER0R0RyNojxHRxGEeRXtfsosKIKsqZQ4iIiIiIiJDA5CjkhyhyplDlQVxVZW1ko3HKN1H8RESKIj5hEeI6OMjhkBoI4bCOiOyOiOiOiOZQiOidEDSR2GiOkyOvFIRFoRNEXRQjCJ0Z5Rm0RyLxHDIBQRwXI4KhHDWI+RwzkdF8uiOiOjaI6I6MIxkdGEXRHRHRmjiJ0XRHRFUSaMIk00l5NUIiIiIiIiGV5WhxyoKHKHKHJ2dybkM44iIiIiIiIiIiIiIiIkO5DNHEMjxHRHRHZHIECU2i+YZHRtEfMI5GEeRHQiTZJ/mtCIiIiIiJQjyOiI6PIjkYiOy4HiEcDMGQuEI+R4vmCI6MRdEdEjNEVywNr9IjoRERERJSiYRLEVaM0XRhHyPIjojo8iOiOjCI7I6I6LojxHRnEcMEdEdEcFguC2BYXMuzDI5EdHZ0RwPV4tCIiIiIiIiIiIiIiIidUUIwjyMI8gyoKHK4ocococqynKgrjuVBUFDkLBEHOOIiIiJDTg45/Kcw53CrZTMNTQEDKhCzuVB+KHPZ7O5TlWVhVlDmHKg7lOVB7OOUOdy4O5Q5Q5UHHMOU5rM5xyhybncrCMchsHIZAbTncoc1lOEIiIjeTVJCIiIiIiIiIi0IiIiIjQiItCIiI4spwiiI6No1IjojxHziJ0R0Xi6LxojebyPl0XRhHkYy6L5xEczeR0R8vkdF4j5xGIjowhERH9lNUsQj4iO5NV//WN5NV+vlmDLxhEdFcCi6fSFj8mqEfyzE68WZkGuTVEjhEdft3/QrjoofikuTVFp4mvtvHfJqn/H/x8mqryyl0n7KZwPikuTVMo2BSm4IUP8hoWU3BP++Kpfj5NV/5ZzVFcCvHZS6ReKTT5NUkR0P6Q\"</ssl_check_image>\n    <ssl_agree>1</ssl_agree>\n  </txn>\"       \n"
                },
                "Cash_Sale": {
                  "summary": "Cash Sale",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>cashsale</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>                  \n    <ssl_amount>10.00</ssl_amount>\n    <ssl_tip_amount>3</ssl_tip_amount>\n    <ssl_first_name>Test First</ssl_first_name>\n    <ssl_last_name>Test Last</ssl_last_name>\n  </txn>\"\n"
                },
                "Cash_Refund": {
                  "summary": "Cash Return/Credit",
                  "value": "xmldata=\n  \"<txn>\n      <ssl_transaction_type>cashcredit</ssl_transaction_type>\n      <ssl_account_id>my_account_id</ssl_account_id>\n      <ssl_user_id>my_user_id</ssl_user_id>\n      <ssl_pin>my_pin</ssl_pin>\n      <ssl_vendor_id>my_vendor_id</ssl_vendor_id>                      \n      <ssl_amount>10.00</ssl_amount>\n      <ssl_first_name>Test First</ssl_first_name>\n   </txn>\"\n"
                }
              }
            }
          }
        },
        "XMLBatch": {
          "content": {
            "application/form-data": {
              "schema": {
                "discriminator": {
                  "propertyName": "Schema",
                  "mapping": {
                    "Batch Import": "#/components/schemas/XML_BatchImport",
                    "Token Batch Import": "#/components/schemas/XML_BatchInfo",
                    "Recurring Batch Import": "#/components/schemas/XML_BatchRecurring"
                  }
                }
              },
              "examples": {
                "BatchImport": {
                  "summary": "Batch Import",
                  "value": "ssl_transaction_type: ccimport\nssl_account_id: my_account_id\nssl_user_id: my_user_id\nssl_pin: my_pin\nssl_vendor_id: my_vendor_id\nssl_import_file: C:\\Program Files\\Elavon\\VirtualMerchant\\Import\\ImportFile.csv\nssl_response_file: ImportFile051410025559\nssl_result_format: HTML\n"
                },
                "TokenImport": {
                  "summary": "Token Batch Import",
                  "value": "ssl_transaction_type: cctokenimport\nssl_account_id: my_account_id\nssl_user_id: my_user_id\nssl_pin: my_pin\nssl_vendor_id: my_vendor_id\nssl_import_file: C:\\Program Files\\Elavon\\VirtualMerchant\\Import\\ImportFile.csv\nssl_response_file: ImportFile051410025559\nssl_result_format: HTML\n"
                },
                "RecImport": {
                  "summary": "Recurring Batch Import",
                  "value": "ssl_transaction_type: ccrecimport\nssl_account_id: my_account_id\nssl_user_id: my_user_id\nssl_pin: my_pin\nssl_vendor_id: my_vendor_id\nssl_import_file: C:\\Program Files\\Elavon\\VirtualMerchant\\Import\\ImportFile.csv\nssl_response_file: ImportFile051410025559\nssl_result_format: HTML\n"
                }
              }
            }
          }
        },
        "XMLAccount": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "discriminator": {
                  "propertyName": "Schema",
                  "mapping": {
                    "Terminal Setup": "#/components/schemas/XML_TerminalSetup",
                    "Field Setup": "#/components/schemas/XML_PaymentFieldSetup",
                    "Printer Setup": "#/components/schemas/XML_PrinterSetup"
                  }
                }
              },
              "examples": {
                "Terminal_Setup": {
                  "summary": "Terminal Setup",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>terminalsetup</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n  </txn>\" \n"
                },
                "Field_Setup": {
                  "summary": "Field Setup",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>fieldsetup</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n  </txn>\" \n"
                },
                "Printer_Setup": {
                  "summary": "Printer Setup",
                  "value": "xmldata=\n  \"<txn>\n    <ssl_transaction_type>printersetup</ssl_transaction_type>\n    <ssl_account_id>my_account_id</ssl_account_id>\n    <ssl_user_id>my_user_id</ssl_user_id>\n    <ssl_pin>my_pin</ssl_pin>\n    <ssl_vendor_id>my_vendor_id</ssl_vendor_id>\n  </txn>\" \n"
                }
              }
            }
          }
        }
      },
      "schemas": {
        "Schema_Type": {
          "type": "object",
          "properties": {
            "Schema": {
              "description": "Available transaction types. <br>**After selecting the transaction type, select the same transaction type under request and response to view the samples.**"
            }
          }
        },
        "Token_CC_Sale": {
          "title": "Session Token - ccsale",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccsale",
                  "description": "The ccsale transaction obtains real-time authorization for a credit card sale transaction and enters the transaction into the unsettled batch."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Optional_Amount"
            },
            {
              "properties": {
                "Generate Payment Token": {
                  "$ref": "#/components/schemas/Generate_Token"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Language": {
                  "$ref": "#/components/schemas/Language"
                },
                "Multi-Currency Conversion": {
                  "$ref": "#/components/schemas/MCC_HPP"
                }
              }
            }
          ]
        },
        "Token_CC_AuthOnly": {
          "title": "Session Token - ccauthonly",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccauthonly",
                  "description": "The credit card authorization only or ccauthonly transaction obtains a real-time authorization for a credit card transaction, guarantees that the funds are available on the card, and reduces the cardholderâ€™s limit to buy for only a predetermined period (which is usually 7-10 days based on the credit cardâ€™s issuing bank).      \n\nThis transaction does not place the authorization in the Settlement batch. To place the ccauthonly transaction in the open batch, use Completion (cccomplete). To reverse the transaction and restore the funds to the card use Delete (ccdelete).          \n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Optional_Amount"
            },
            {
              "properties": {
                "Generate Payment Token": {
                  "$ref": "#/components/schemas/Generate_Token"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                }
              }
            }
          ]
        },
        "Token_CC_Verify": {
          "title": "Session Token - ccverify",
          "required": [
            "ssl_transaction_type",
            "ssl_avs_address",
            "ssl_avs_zip"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccverify",
                  "description": "The ccverify transaction verifies the credit card account for AVS and CVV data. AVS and CVV codes are returned to indicate if the AVS and CVV data passed originally were correct and matched the cardholder statement billing address and the CVV value located on the card."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "ssl_avs_address": {
                  "type": "string",
                  "maxLength": 30,
                  "description": "Address line 1  \nCommonly the house number and street name on the cardholderâ€™s / customerâ€™s account or billing address.  \nAddress Verification Service (AVS) data compared with the address on the card issuerâ€™s file.  \nRecommended for hand-keyed transactions to qualify for better interchange rates.  \nRecommended if ssl_verify = **Y**.    \n"
                },
                "ssl_avs_zip": {
                  "type": "string",
                  "maxLength": 9,
                  "description": "Postal or ZIP code  \nZIP code on the cardholderâ€™s account or billing address.  \n(AVS) data compared with the postal or ZIP code on the card issuerâ€™s file.  \nRecommended for hand-keyed transactions to qualify for better interchange rates.   \nRecommended if ssl_verify = **Y**.       \n"
                }
              }
            }
          ]
        },
        "Token_CC_AddRecurring": {
          "title": "Session Token - ccaddrecurring",
          "required": [
            "ssl_transaction_type",
            "Payment Schedule"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccaddrecurring",
                  "description": "The ccaddrecurring transaction adds a credit card recurring record to the Converge recurring batch. Once added, the transaction will run automatically within the specified billing cycle on the scheduled payment day without the need to send it for authorization."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Optional_Amount"
            },
            {
              "properties": {
                "Payment Schedule": {
                  "$ref": "#/components/schemas/Payment_Schedule_Recurring"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                }
              }
            }
          ]
        },
        "Token_CC_AddInstall": {
          "title": "Session Token - ccaddinstall",
          "required": [
            "ssl_transaction_type",
            "Payment Schedule"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccaddinstall",
                  "description": "The ccaddinstall transaction adds a credit card installment record to the Converge recurring batch. Once added, the transaction will run automatically within the specified billing cycle on the scheduled payment day without the need to send it for authorization."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Optional_Amount"
            },
            {
              "properties": {
                "Payment Schedule": {
                  "$ref": "#/components/schemas/Payment_Schedule_Install"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                }
              }
            }
          ]
        },
        "Token_CC_Get": {
          "title": "Session Token - ccgettoken",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccgettoken",
                  "description": "The ccgettoken transaction generates a token from a card number or an existing recurring/installment in the recurring batch. The token generated can be used in place of a credit card number in any subsequent transactions. Additionally, you can request to add the generated token to card manager.  \n\nThis transaction is supported only when a terminal is setup for tokenization for hand-keyed cards only. \n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "ssl_add_token": {
                  "type": "string",
                  "maxLength": 1,
                  "description": "Add to card manager indicator  \nIndicates whether to add token and cardholder details to card manager.    \n- Y - Add or update the generated token and the cardholder details if the transaction is approved\n- N - Do not add the token or the cardholder details \n",
                  "default": "N",
                  "enum": [
                    "Y",
                    "N"
                  ]
                },
                "ssl_verify": {
                  "type": "string",
                  "maxLength": 1,
                  "description": "Account verification indicator  \nIndicates whether the Converge needs to verify the account before generating a token.    \n- Y - Verify account prior to token generation\n- N - Generate token without account verification\n",
                  "enum": [
                    "Y",
                    "N"
                  ]
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                }
              }
            }
          ]
        },
        "Token_ECS_Purchase": {
          "title": "Session Token - ecspurchase",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ecspurchase",
                  "description": "The ecspurchase transaction debits the purchase amount from a checking account. Use only on terminals that are set up with the ACH terminal option."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Optional_Amount"
            },
            {
              "properties": {
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                }
              }
            }
          ]
        },
        "Token_ECS_AddRecurring": {
          "title": "Session Token - ecsaddrecurring",
          "required": [
            "ssl_transaction_type",
            "Payment Schedule"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ecsaddrecurring",
                  "description": "The ecsaddrecurring transaction adds an ACH ECheck recurring payment to the Converge recurring batch. Once added, the transaction will run automatically within the specified billing cycle on the scheduled payment day without the need to send it for authorization."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Optional_Amount"
            },
            {
              "properties": {
                "Payment Schedule": {
                  "$ref": "#/components/schemas/Payment_Schedule_Recurring"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                }
              }
            }
          ]
        },
        "Token_ECS_AddInstall": {
          "title": "Session Token - ecsaddinstall",
          "required": [
            "ssl_transaction_type",
            "Payment Schedule"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ecsaddinstall",
                  "description": "The ecsaddinstall transaction adds an ACH ECheck installment payment to the Converge recurring batch.  \nOnce added, the transaction will run automatically for the number of installments specified within the specified billing cycle on the scheduled payment day without the need to send it for authorization. Once the total number of installments is reached, the payments will stop running.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Optional_Amount"
            },
            {
              "properties": {
                "Payment Schedule": {
                  "$ref": "#/components/schemas/Payment_Schedule_Install"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                }
              }
            }
          ]
        },
        "Token_EGC_Sale": {
          "title": "Session Token - egcsale",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "egcsale",
                  "description": "The egcsale transaction deducts the purchase amount from the balance of the gift card account."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Optional_Amount"
            },
            {
              "properties": {
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                }
              }
            }
          ]
        },
        "Token_Google_Sale": {
          "title": "Session Token Google - ccsale",
          "required": [
            "ssl_transaction_type",
            "Credentials",
            "ssl_googlepay_merchant_id",
            "Invoice Number"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccsale",
                  "description": "The ccsale transaction obtains real-time authorization for a credit card sale transaction and enters the transaction into the unsettled batch.  \nAdditional setup is required for [Google Pay](/products/checkout-js/v1/wallets#google-pay).\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount_MCC"
            },
            {
              "properties": {
                "ssl_googlepay_merchant_id": {
                  "type": "string",
                  "description": "Merchant ID provided by Google."
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Currency Conversion": {
                  "$ref": "#/components/schemas/MCC"
                },
                "ssl_email": {
                  "description": "Email Address  \nThe cardholderâ€™s or customerâ€™s email address.\n"
                },
                "ssl_phone": {
                  "description": "Phone  \nPhone number on the cardholderâ€™s / customerâ€™s account or billing address.     \n"
                }
              }
            }
          ]
        },
        "Token_ClicktoPay_Sale": {
          "title": "Session Token Click to Pay - ccsale",
          "required": [
            "ssl_transaction_type",
            "Credentials"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccsale",
                  "description": "The ccsale transaction obtains real-time authorization for a credit card sale transaction and enters the transaction into the unsettled batch.  \nAdditional setup is required for [Click to pay](/products/checkout-js/v1/wallets#click-to-pay).\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount_MCC"
            },
            {
              "properties": {
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                }
              }
            }
          ]
        },
        "Token_PayPal_Sale": {
          "title": "Session Token PayPal - ccsale",
          "required": [
            "ssl_transaction_type",
            "Credentials"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccsale",
                  "description": "The ccsale transaction obtains real-time authorization for a credit card sale transaction and enters the transaction into the unsettled batch.  \nAdditional setup is required for [Paypal](/products/checkout-js/v1/wallets#paypal).\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount_MCC"
            },
            {
              "properties": {
                "Currency Conversion": {
                  "$ref": "#/components/schemas/MCC"
                }
              }
            }
          ]
        },
        "Token_3DSecure_Sale": {
          "title": "Session 3D Secure2 - ccsale",
          "required": [
            "ssl_transaction_type",
            "Credentials"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccsale",
                  "description": "The ccsale transaction obtains real-time authorization for a credit card sale transaction and enters the transaction into the unsettled batch. \n[3D Secure 2](/products/checkout-js/v1/3d-secure-2) increases authorization rates. \n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            }
          ]
        },
        "Token_Surcharge_Sale": {
          "title": "Session Token Surcharge - ccsale",
          "required": [
            "ssl_transaction_type",
            "Credentials"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccsale",
                  "description": "The ccsale transaction obtains real-time authorization for a credit card sale transaction and enters the transaction into the unsettled batch.  \n\nAdditional requirements are required to certify [surcharges](/products/checkout-js/v1/fees#surcharges).\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Optional_Amount"
            },
            {
              "properties": {
                "Generate Payment Token": {
                  "$ref": "#/components/schemas/Generate_Token"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                }
              }
            }
          ]
        },
        "Token_POSL_Sale": {
          "title": "Session Token Point of Sale Lending - ccsale",
          "required": [
            "ssl_transaction_type",
            "Credentials",
            "Invoice Number",
            "Customer Info"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccsale",
                  "description": "The ccsale transaction obtains real-time authorization for a credit card sale transaction and enters the transaction into the unsettled batch.  \n\nAdditional setup is required for [Point-of-Sale lending](/products/checkout-js/v1/point-of-sale-lending).\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount_POSL"
            },
            {
              "properties": {
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Info": {
                  "$ref": "#/components/schemas/Customer_Info_POSL"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Billing_Address"
                }
              }
            }
          ]
        },
        "HPP": {
          "title": "HPP",
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            }
          ]
        },
        "Lightbox_CC_Sale": {
          "title": "Lightbox - ccsale",
          "required": [
            "Payment Options",
            "Invoice Number"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Generate Payment Token": {
                  "$ref": "#/components/schemas/Generate_Token"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                }
              }
            }
          ]
        },
        "Lightbox_CC_AuthOnly": {
          "title": "Lightbox - ccauthonly",
          "required": [
            "Payment Options",
            "Invoice Number"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Generate Payment Token": {
                  "$ref": "#/components/schemas/Generate_Token"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                }
              }
            }
          ]
        },
        "Lightbox_CC_Verification": {
          "title": "Lightbox - ccverify",
          "required": [
            "Verification Options",
            "ssl_avs_address",
            "ssl_avs_zip"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "properties": {
                "ssl_avs_address": {
                  "type": "string",
                  "maxLength": 30,
                  "description": "Address line 1  \nCommonly the house number and street name on the cardholderâ€™s / customerâ€™s account or billing address. Address Verification Service (AVS) data compared with the address on the card issuerâ€™s file.  \nReturns an [AVS Response Code](/products/lightbox-payment-modal/v1/response-codes#avs).\n"
                },
                "ssl_avs_zip": {
                  "type": "string",
                  "maxLength": 9,
                  "description": "Postal or ZIP code  \nZIP code on the cardholderâ€™s account or billing address. (AVS) data compared with the postal or ZIP code on the card issuerâ€™s file.  \nReturns an [AVS Response Code](/products/lightbox-payment-modal/v1/response-codes#avs).\n"
                }
              }
            }
          ]
        },
        "Lightbox_CC_Generate_Token": {
          "title": "Lightbox - ccgettoken",
          "required": [
            "Card Data",
            "Address Verification"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "$ref": "#/components/schemas/Verification"
            },
            {
              "properties": {
                "ssl_add_token": {
                  "type": "string",
                  "maxLength": 1,
                  "description": "Add to [customer manager](/products/lightbox-payment-modal/v1/transaction-types#store-a-card-token) indicator  \nIndicates whether to add token and cardholder details to card manager.    \n- Y - Add or update the generated token and the cardholder details if the transaction is approved\n- N - Do not add the token or the cardholder details \n",
                  "default": "N",
                  "enum": [
                    "Y",
                    "N"
                  ]
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                }
              }
            }
          ]
        },
        "Lightbox_ECS_Purchase": {
          "title": "Lightbox - ecspurchase",
          "required": [
            "ACH eCheck"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                }
              }
            }
          ]
        },
        "Lightbox_EGC_Sale": {
          "title": "Lightbox - egcsale",
          "required": [
            "Card Data"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                }
              }
            }
          ]
        },
        "Checkout_CC_Sale": {
          "title": "Checkout.js - ccsale",
          "required": [
            "Payment Options",
            "Invoice Number",
            "Partial Auth Indicator"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Payment Options": {
                  "$ref": "#/components/schemas/Card_Token"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Partial Auth Indicator": {
                  "$ref": "#/components/schemas/Partial_Auth_Indicator"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Currency Conversion": {
                  "description": "Used to sell products and services in a variety of currencies.  \nVerify terminal is setup with this option by sending ssl_transaction_type = terminalsetup with your credentials. Refer [terminal management](api-reference#tag/Terminal-Management) for terminal setup.\n",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MCC"
                    },
                    {
                      "$ref": "#/components/schemas/DCC"
                    }
                  ]
                },
                "Service Fees": {
                  "$ref": "#/components/schemas/Service_Fees"
                },
                "3D Secure2 Fields": {
                  "$ref": "#/components/schemas/3D_Secure"
                }
              }
            }
          ]
        },
        "Checkout_CC_AuthOnly": {
          "title": "Checkout.js - ccauthonly",
          "required": [
            "Payment Options",
            "Invoice Number",
            "Partial Auth Indicator"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Payment Options": {
                  "$ref": "#/components/schemas/Card_Token"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Partial Auth Indicator": {
                  "$ref": "#/components/schemas/Partial_Auth_Indicator"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Currency Conversion": {
                  "description": "Used to sell products and services in a variety of currencies.  \nVerify terminal is setup with this option by sending ssl_transaction_type = terminalsetup with your credentials. Refer [terminal management](api-reference#tag/Terminal-Management) for terminal setup.\n",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MCC"
                    },
                    {
                      "$ref": "#/components/schemas/DCC"
                    }
                  ]
                },
                "Service Fees": {
                  "$ref": "#/components/schemas/Service_Fees"
                },
                "3D Secure2 Fields": {
                  "$ref": "#/components/schemas/3D_Secure"
                }
              }
            }
          ]
        },
        "Checkout_CC_Verification": {
          "title": "Checkout.js - ccverify",
          "required": [
            "Verification Options",
            "ssl_avs_address",
            "ssl_avs_zip"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "properties": {
                "Verification Options": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Card_Token"
                    },
                    {
                      "$ref": "#/components/schemas/Token"
                    }
                  ]
                }
              }
            },
            {
              "properties": {
                "ssl_avs_address": {
                  "type": "string",
                  "maxLength": 30,
                  "description": "Address line 1  \nCommonly the house number and street name on the cardholderâ€™s / customerâ€™s account or billing address.  \nAddress Verification Service (AVS) data compared with the address on the card issuerâ€™s file.   \nReturns an [AVS Response Code](/products/checkout-js/v1/response-codes#avs).\n"
                },
                "ssl_avs_zip": {
                  "type": "string",
                  "maxLength": 9,
                  "description": "Postal or ZIP code  \nZIP code on the cardholderâ€™s account or billing address.  \n(AVS) data compared with the postal or ZIP code on the card issuerâ€™s file.  \nReturns an [AVS Response Code](/products/checkout-js/v1/response-codes#avs).\n"
                },
                "3D Secure2 Fields": {
                  "$ref": "#/components/schemas/3D_Secure"
                }
              }
            }
          ]
        },
        "Checkout_CC_AddRecurring": {
          "title": "Checkout.js - ccaddrecurring",
          "required": [
            "Payment Schedule",
            "Card Data",
            "Invoice Number"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Card Data": {
                  "$ref": "#/components/schemas/Card_Token"
                },
                "Payment Schedule": {
                  "$ref": "#/components/schemas/Payment_Schedule_Recurring"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                }
              }
            }
          ]
        },
        "Checkout_CC_AddInstall": {
          "title": "Checkout.js - ccaddinstall",
          "required": [
            "Card Data",
            "Payment Schedule",
            "Invoice Number"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Card Data": {
                  "$ref": "#/components/schemas/Card_Token"
                },
                "Payment Schedule": {
                  "$ref": "#/components/schemas/Payment_Schedule_Install"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                }
              }
            }
          ]
        },
        "Checkout_CC_Generate_Token": {
          "title": "Checkout - ccgettoken",
          "required": [
            "Card Data",
            "Address Verification"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "$ref": "#/components/schemas/Verification"
            },
            {
              "properties": {
                "Card Data": {
                  "$ref": "#/components/schemas/Card"
                },
                "ssl_add_token": {
                  "type": "string",
                  "maxLength": 1,
                  "description": "Add to [customer manager](/products/checkout-js/v1/transaction-types#store-a-card-token) indicator    \nIndicates whether to add token and cardholder details to card manager.    \n- Y - Add or update the generated token and the cardholder details if the transaction is approved\n- N - Do not add the token or the cardholder details \n",
                  "default": "N",
                  "enum": [
                    "Y",
                    "N"
                  ]
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "3D Secure2 Fields": {
                  "$ref": "#/components/schemas/3D_Secure"
                }
              }
            }
          ]
        },
        "Checkout_POSL_Sale": {
          "title": "Checkout.js POS Lending - ccsale",
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            }
          ]
        },
        "Checkout_ECS_Purchase": {
          "title": "Checkout.js - ecspurchase",
          "required": [
            "ACH eCheck"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "ACH eCheck": {
                  "$ref": "#/components/schemas/ACH_ECheck"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                }
              }
            }
          ]
        },
        "Checkout_ECS_AddRecurring": {
          "title": "Checkout.js - ecsaddrecurring",
          "required": [
            "ACH eCheck",
            "Payment Schedule"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "ACH eCheck": {
                  "$ref": "#/components/schemas/ACH_ECheck"
                },
                "Payment Schedule": {
                  "$ref": "#/components/schemas/Payment_Schedule_Recurring"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                }
              }
            }
          ]
        },
        "Checkout_EGC_Sale": {
          "title": "Checkout.js - egcsale",
          "required": [
            "Card Data"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Card Data": {
                  "$ref": "#/components/schemas/Gift_Card"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                }
              }
            }
          ]
        },
        "Checkout_PayPal_Sale": {
          "title": "Checkout.js PayPal - ccsale",
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            }
          ]
        },
        "Checkout_Google_Sale": {
          "title": "Checkout.js PayPal - ccsale",
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            }
          ]
        },
        "Checkout_Apple_Sale": {
          "title": "Checkout.js Apple - ccsale",
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            }
          ]
        },
        "Checkout_Click_Sale": {
          "title": "Checkout.js Click to Pay - ccsale",
          "required": [
            "ssl_callback_url"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "properties": {
                "ssl_callback_url": {
                  "type": "string",
                  "maxLength": 200,
                  "description": "Callback URL  \nThe URL of the merchant that will host the response.\n"
                }
              }
            }
          ]
        },
        "Checkout_3DSecure_Sale": {
          "title": "Checkout.js 3D Secure2 - ccsale",
          "required": [
            "ssl_card_number",
            "ssl_exp_date",
            "ssl_cvv2cvc2",
            "3D Secure2 Fields"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "properties": {
                "ssl_card_number": {
                  "type": "integer",
                  "maximum": 19,
                  "description": "Card number as it appears on the card."
                },
                "ssl_exp_date": {
                  "type": "integer",
                  "maximum": 4,
                  "description": "Card's Expiry Date    \nDate when the card becomes invalid.  \n**Format:** MMYY  \n",
                  "example": "MMYY"
                },
                "ssl_cvv2cvc2": {
                  "type": "integer",
                  "maximum": 4,
                  "description": "Card Verification Value / Card Validation Code  \nCard security code or number printed on the card and commonly used for card not present payment transactions.          \n"
                },
                "3D Secure2 Fields": {
                  "$ref": "#/components/schemas/3D_Secure"
                }
              }
            }
          ]
        },
        "Checkout_Surcharge_Sale": {
          "title": "Checkout.js Surcharge - ccsale",
          "required": [
            "Payment Options",
            "Invoice Number"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "$ref": "#/components/schemas/Session_Token"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Payment Options": {
                  "$ref": "#/components/schemas/Card_Token"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                }
              }
            }
          ]
        },
        "XML_CC_Sale_Online": {
          "title": "XML - ccsale",
          "required": [
            "ssl_transaction_type",
            "Payment Options",
            "Invoice Number",
            "Partial Auth Indicator"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccsale",
                  "description": "The ccsale transaction obtains real-time authorization for a credit card sale transaction and enters the transaction into the unsettled batch."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount_MCC"
            },
            {
              "properties": {
                "Payment Options": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Card_Token"
                    },
                    {
                      "$ref": "#/components/schemas/Token_Payment"
                    },
                    {
                      "$ref": "#/components/schemas/Card_On_File"
                    }
                  ]
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Partial Auth Indicator": {
                  "$ref": "#/components/schemas/Partial_Auth_Indicator"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Advanced Settings": {
                  "$ref": "#/components/schemas/Advanced_Integration_Settings"
                },
                "Currency Conversion": {
                  "description": "Used to sell products and services in a variety of currencies.  \nVerify terminal is setup with this option by sending ssl_transaction_type = terminalsetup with your credentials. Refer [terminal management](api-reference#tag/Terminal-Management) for terminal setup.\n",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MCC"
                    },
                    {
                      "$ref": "#/components/schemas/DCC"
                    }
                  ]
                },
                "Level 3": {
                  "$ref": "#/components/schemas/Level_3"
                },
                "Service Fees": {
                  "$ref": "#/components/schemas/Service_Fees"
                },
                "Healthcare": {
                  "$ref": "#/components/schemas/Healthcare"
                },
                "Travel Data": {
                  "$ref": "#/components/schemas/Travel_Data"
                }
              }
            }
          ]
        },
        "XML_CC_Sale_InPerson": {
          "title": "XML - ccsale",
          "required": [
            "ssl_transaction_type",
            "In-Person Payments",
            "PIN Pad - Swipe"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccsale",
                  "description": "The ccsale transaction obtains real-time authorization for a credit card sale transaction and enters the transaction into the unsettled batch."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Generate Payment Token": {
                  "$ref": "#/components/schemas/Generate_Token"
                },
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Swiped"
                    },
                    {
                      "$ref": "#/components/schemas/Encrypted"
                    },
                    {
                      "$ref": "#/components/schemas/Manual"
                    }
                  ]
                },
                "PIN Pad - Swipe": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PinPad_Data_CC"
                    }
                  ]
                },
                "Tip Processing": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Tip_Processing"
                    }
                  ]
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Advanced Settings": {
                  "$ref": "#/components/schemas/Advanced_Integration_Settings"
                },
                "Travel Data": {
                  "$ref": "#/components/schemas/Travel_Data"
                }
              }
            }
          ]
        },
        "XML_CC_AuthOnly_Online": {
          "title": "XML - ccauthonly",
          "required": [
            "ssl_transaction_type",
            "Payment Options",
            "Invoice Number",
            "Partial Auth Indicator"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccauthonly",
                  "description": "The credit card authorization only or ccauthonly transaction obtains a real-time authorization for a credit card transaction, guarantees that the funds are available on the card, and reduces the cardholderâ€™s limit to buy for only a predetermined period (which is usually 7-10 days based on the credit cardâ€™s issuing bank).      \nThis transaction does not place the authorization in the Settlement batch. To place the ccauthonly transaction in the open batch, use completion (cccomplete). To reverse the transaction and restore the funds to the card use delete (ccdelete).      \n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount_MCC"
            },
            {
              "properties": {
                "Payment Options": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Card_Token"
                    },
                    {
                      "$ref": "#/components/schemas/Token_Payment"
                    },
                    {
                      "$ref": "#/components/schemas/Card_On_File"
                    }
                  ]
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Partial Auth Indicator": {
                  "$ref": "#/components/schemas/Partial_Auth_Indicator"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Advanced Settings": {
                  "$ref": "#/components/schemas/Advanced_Integration_Settings"
                },
                "Currency Conversion": {
                  "description": "Verify terminal is setup with this option by sending ssl_transaction_type = terminalsetup with your credentials. Refer [terminal management](api-reference#tag/Terminal-Management) for terminal setup.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MCC"
                    },
                    {
                      "$ref": "#/components/schemas/DCC"
                    }
                  ]
                },
                "Level 3": {
                  "$ref": "#/components/schemas/Level_3"
                },
                "Service Fees": {
                  "$ref": "#/components/schemas/Service_Fees"
                },
                "Healthcare": {
                  "$ref": "#/components/schemas/Healthcare"
                },
                "Travel Data": {
                  "$ref": "#/components/schemas/Travel_Data"
                }
              }
            }
          ]
        },
        "XML_CC_AuthOnly_InPerson": {
          "title": "XML - ccauthonly",
          "required": [
            "ssl_transaction_type",
            "In-Person Payments",
            "PIN Pad - Swipe"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccauthonly",
                  "description": "The credit card authorization only or ccauthonly transaction obtains a real-time authorization for a credit card transaction, guarantees that the funds are available on the card, and reduces the cardholderâ€™s limit to buy for only a predetermined period (which is usually 7-10 days based on the credit cardâ€™s issuing bank).      \n\nThis transaction does not place the authorization in the settlement batch. To place the ccauthonly transaction in the open batch, use completion (cccomplete). To reverse the transaction and restore the funds to the card use delete (ccdelete).      \n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount_MCC"
            },
            {
              "properties": {
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Swiped"
                    },
                    {
                      "$ref": "#/components/schemas/Encrypted"
                    },
                    {
                      "$ref": "#/components/schemas/Manual"
                    }
                  ]
                },
                "PIN Pad - Swipe": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PinPad_Data_CC"
                    }
                  ]
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Advanced Settings": {
                  "$ref": "#/components/schemas/Advanced_Integration_Settings"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Travel Data": {
                  "$ref": "#/components/schemas/Travel_Data"
                }
              }
            }
          ]
        },
        "XML_CC_AuthOnlyIncrement": {
          "title": "XML - ccauthonly (increment)",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccauthonly",
                  "description": "The auth only increment transaction lets merchants check if a customer has the necessary funds for additional charges tied to an existing auth only transaction - this extends an existing auth only and avoids the difficulty of managing two independent auth only transactions."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            },
            {
              "$ref": "#/components/schemas/Amount"
            }
          ]
        },
        "XML_CC_Verification_Online": {
          "title": "XML - ccverify",
          "required": [
            "ssl_transaction_type",
            "ssl_card_number",
            "ssl_exp_date",
            "ssl_cvv2cvc2",
            "ssl_avs_address",
            "ssl_avs_zip"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccverify",
                  "description": "The ccverify transaction verifies the credit card account for AVS and CVV data. AVS and CVV codes are returned to indicate if the AVS and CVV data passed originally were correct and matched the cardholder statement billing address and the CVV value located on the card."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "ssl_card_number": {
                  "type": "integer",
                  "maximum": 19,
                  "description": "Card number as it appears on the card."
                },
                "ssl_exp_date": {
                  "type": "integer",
                  "maximum": 4,
                  "description": "Card's Expiry Date    \nDate when the card becomes invalid.  \n**Format:** MMYY  \n"
                },
                "ssl_cvv2cvc2": {
                  "type": "integer",
                  "maximum": 4,
                  "description": "Card Verification Value / Card Validation Code   \nCard security code or number printed on the card and commonly used for card not present payment transactions.   \n\nReturns a [CVV Response Code](/products/xml-api/v1/response-codes#cvv2cvc2-response-codes).\n"
                },
                "ssl_avs_address": {
                  "type": "string",
                  "maxLength": 30,
                  "description": "Address line 1  \nCommonly the house number and street name on the cardholderâ€™s / customerâ€™s account or billing address.  \nAddress Verification Service (AVS) data compared with the address on the card issuerâ€™s file. \nRecommended to qualify for better interchange rates.  \n\nReturns an [AVS Response Code](/products/checkout-js/v1/response-codes#avs).\n"
                },
                "ssl_avs_zip": {
                  "type": "string",
                  "maxLength": 9,
                  "description": "Postal or ZIP code \nZIP code on the cardholderâ€™s account or billing address.  \n(AVS) data compared with the postal or ZIP code on the card issuerâ€™s file. \nRecommended to qualify for better interchange rates. \n\nReturns an [AVS Response Code](/products/checkout-js/v1/response-codes#avs).\n"
                }
              }
            }
          ]
        },
        "XML_CC_Verification_InPerson": {
          "title": "XML - ccverify",
          "required": [
            "ssl_transaction_type",
            "ssl_avs_address",
            "ssl_avs_zip",
            "In-Person Payment",
            "PIN Pad - Swipe"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccverify",
                  "description": "The ccverify transaction verifies the credit card account for AVS and CVV data. AVS and CVV codes are returned to indicate if the AVS and CVV data passed originally were correct and matched the cardholder statement billing address and the CVV value located on the card."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "ssl_avs_address": {
                  "type": "string",
                  "maxLength": 30,
                  "description": "Address line 1  \nCommonly the house number and street name on the cardholderâ€™s / customerâ€™s account or billing address.  \nAddress Verification Service (AVS) data compared with the address on the card issuerâ€™s file.  \nRecommended for hand-keyed transactions to qualify for better interchange rates.  \n"
                },
                "ssl_avs_zip": {
                  "type": "string",
                  "maxLength": 9,
                  "description": "Postal or ZIP code  \nZIP code on the cardholderâ€™s account or billing address.  \n(AVS) data compared with the postal or ZIP code on the card issuerâ€™s file.  \nRecommended for hand-keyed transactions to qualify for better interchange rates.   \n"
                }
              }
            },
            {
              "properties": {
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Swiped"
                    },
                    {
                      "$ref": "#/components/schemas/Encrypted"
                    },
                    {
                      "$ref": "#/components/schemas/Manual"
                    }
                  ]
                },
                "PIN Pad - Swipe": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PinPad_Data_CC"
                    }
                  ]
                }
              }
            }
          ]
        },
        "XML_CC_CreditBalance_Online": {
          "title": "XML - ccbalinquiry",
          "required": [
            "ssl_transaction_type",
            "Payment Options"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccbalinquiry",
                  "description": "The ccbalinquiry transaction returns the balance of a pre-paid card."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "Payment Options": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Card_Token"
                    },
                    {
                      "$ref": "#/components/schemas/Token"
                    }
                  ]
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                }
              }
            }
          ]
        },
        "XML_CC_CreditBalance_InPerson": {
          "title": "XML - ccbalinquiry",
          "required": [
            "ssl_transaction_type",
            "In-Person Payments",
            "PIN Pad - Swipe"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccbalinquiry",
                  "description": "The ccbalinquiry transaction returns the balance of a pre-paid card."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Swiped"
                    },
                    {
                      "$ref": "#/components/schemas/Encrypted"
                    },
                    {
                      "$ref": "#/components/schemas/Manual"
                    }
                  ]
                },
                "PIN Pad - Swipe": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PinPad_Data_CC"
                    }
                  ]
                }
              }
            }
          ]
        },
        "XML_CC_Return": {
          "title": "XML - ccreturn",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccreturn",
                  "description": "The ccreturn transaction issues a partial or full refund to a cardholderâ€™s credit card using the transaction ID of the original sale or force. This will guarantee that the same credit card used previously for the purchase is the one being refunded.\n\nEnhanced credits for an amount higher than the original Sale or Force transaction amount are not allowed. Converge tracks partial refunds against the balance of the original transaction. If a partial refund would result in total refunds exceeding the value of the original transactions, Converge will return an error.  \n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            },
            {
              "$ref": "#/components/schemas/Refund_Amount"
            }
          ]
        },
        "XML_CC_Completion": {
          "title": "XML - cccomplete",
          "required": [
            "ssl_transaction_type",
            "ssl_amount"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "cccomplete",
                  "description": "The cccomplete transaction places an approved auth only transaction into the open batch for settlement and converts the approved auth only transaction into a Sale transaction.  \n- Transaction status will not change. A pended auth only will be converted to a pended sale. Users have to login to the application in order to unpend a transaction. Transactions set to pend will not settle until they are set to unpend.  \n- A completion request for an amount higher than the original auth only is not allowed.\n- Users must have the Batches-Edit Transactions user right in order to complete a transaction.\n\nThe supported completion types are as follows:\n\n- Full completion - Send cccomplete with the auth only transaction ID without any amount, if you wish to convert an existing auth only to sale. The entire auth only transaction will move from the auth only batch to the main batch for settlement.\n\n- Partial-completion - Send cccomplete with the auth only transaction ID with an amount that is less than the original auth only amount, if you wish to convert only a portion of the auth only to sale. The auth Only transaction will move from the auth only batch to the main batch and the transaction will only be settled for smaller amount. The original auth only transaction cannot be used again.\n\n- Multi partial-completion - Send cccomplete with the auth only transaction ID with an amount that is less than the auth only remaining amount and the partial shipment indicator, this action will allow you to keep the unused portion of the auth only amount in the auth only batch, and convert only the desired portion to the main batch. The auth Only will remain in the auth only batch and multiple completions can be performed on the single auth only transaction until the total amount has been reached. Every completion will create a new fresh sale.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            },
            {
              "properties": {
                "ssl_amount": {
                  "type": "integer",
                  "maximum": 11,
                  "description": "Transaction Amount  \nThe full, partial, or multi-partial auth only amount to convert.  \nCompletion Types:\n- Full - Blank/Null\n- Partial - Less than the original auth only amount\n- Multi-partial - Less than the remaining auth only amount    \n\n**Format:** Number with 2 decimal places.\n"
                },
                "Service Fees": {
                  "$ref": "#/components/schemas/Service_Fees"
                },
                "ssl_partial_shipment_flag": {
                  "type": "string",
                  "maxLength": 46,
                  "description": "Partial shipment indicator\nIndicates whether the integrated application supports partial shipment.\nMust be set to Y if performing a multi-partial completion.\n",
                  "enum": [
                    "Y",
                    "N"
                  ]
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                }
              }
            }
          ]
        },
        "XML_CC_Delete": {
          "title": "XML - ccdelete",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccdelete",
                  "description": "The credit card delete or ccdelete transaction deletes and attempts a reversal on a credit card sale or auth only transaction.  \n\nThis transaction is typically used in a Partial Approval scenario. When a consumer decides not to continue with an additional tender type, the point of sale application must send a reversal to cancel the payment and restore the balance to the card. Reversal frees up the cardholdersâ€™ open to buy amounts by reducing issuer holds on available balances when transactions are not completed. This reduces declines at the point of sale and the amount of cardholder complaints that are unpleasant for all parties involved.\n- A transaction that has been deleted from the batch cannot be recovered.\n- Users must have the Batches-Void Delete user right in order to delete a transaction.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            }
          ]
        },
        "XML_CC_UpdateTip": {
          "title": "XML - ccupdatetip",
          "required": [
            "ssl_transaction_type",
            "ssl_tip_amount"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccupdatetip",
                  "description": "The ccupdatetip transaction adds, modifies or resets a tip (gratuity) amount on an open approved credit card sale transaction.\n- This transaction is supported in the Service market segment.\n- Tips are updated or added after the transaction has been processed, typically at the end of the day prior to Settlement.\n- Tip amount can be sent in the cardholder amount.\n- The transaction may be sent several times prior to settlement if needed.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            },
            {
              "$ref": "#/components/schemas/Update_Tip"
            }
          ]
        },
        "XML_CC_Signature": {
          "title": "XML - ccsignature",
          "required": [
            "ssl_transaction_type",
            "Signature"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccsignature",
                  "description": "The ccsignature transaction adds signature data to a previously approved credit card sale (ccsale), auth only (ccauthonly), or force (ccforce) transaction.  \n- Signature is not allowed for the eCommerce  market segment.\n- Signature can only be added to a transaction that has no signature.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            },
            {
              "properties": {
                "Signature": {
                  "$ref": "#/components/schemas/Signature"
                }
              }
            }
          ]
        },
        "XML_CC_AddRecurring": {
          "title": "XML - ccaddrecurring",
          "required": [
            "Payment Schedule",
            "ssl_transaction_type",
            "Payment Options",
            "Invoice Number"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccaddrecurring",
                  "description": "The ccaddrecurring transaction adds a credit card recurring record to the Converge recurring batch. Once added, the transaction will run automatically within the specified billing cycle on the scheduled payment day without the need to send it for authorization."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Payment Options": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Card_Token"
                    },
                    {
                      "$ref": "#/components/schemas/Token_Payment"
                    },
                    {
                      "$ref": "#/components/schemas/Transaction_ID"
                    }
                  ]
                },
                "Payment Schedule": {
                  "$ref": "#/components/schemas/Payment_Schedule_Recurring"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                }
              }
            }
          ]
        },
        "XML_CC_UpdateRecurring": {
          "title": "XML - ccupdaterecurring",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccupdaterecurring",
                  "description": "The ccupdaterecurring transaction updates a credit card recurring record in Converge."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Recurring_ID"
            },
            {
              "properties": {
                "ssl_amount": {
                  "description": "The updated recurring amount"
                },
                "Card Info": {
                  "$ref": "#/components/schemas/Card"
                },
                "Payment Schedule Update": {
                  "$ref": "#/components/schemas/Payment_Schedule_Recurring_Update"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                }
              }
            }
          ]
        },
        "XML_CC_DeleteRecurring": {
          "title": "XML - ccdeleterecurring",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccdeleterecurring",
                  "description": "The ccdeleterecurring transaction deletes a credit card recurring record from Converge."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Recurring_ID"
            }
          ]
        },
        "XML_CC_SubmitRecurring": {
          "title": "XML - ccrecurringsale",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccrecurringsale",
                  "description": "The ccrecurringsale transaction allows you to run a credit card recurring payment outside of its billing cycle. This will increase the payment number."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Recurring_ID"
            }
          ]
        },
        "XML_CC_AddInstall": {
          "title": "XML - ccaddinstall",
          "required": [
            "ssl_transaction_type",
            "Payment Options",
            "Payment Schedule",
            "Invoice Number"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccaddinstall",
                  "description": "The ccaddinstall transaction adds a credit card installment record to the Converge recurring batch. Once added, the transaction will run automatically within the specified billing cycle on the scheduled payment day without the need to send it for authorization."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Payment Options": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Card_Token"
                    },
                    {
                      "$ref": "#/components/schemas/Token_Payment"
                    },
                    {
                      "$ref": "#/components/schemas/Transaction_ID"
                    }
                  ]
                },
                "Payment Schedule": {
                  "$ref": "#/components/schemas/Payment_Schedule_Install"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                }
              }
            }
          ]
        },
        "XML_CC_UpdateInstall": {
          "title": "XML - ccupdateinstall",
          "required": [
            "ssl_transaction_type",
            "Payment Options"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccupdateinstall",
                  "description": "The ccupdateinstall transaction updates a credit card installment record in Converge."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Installment_ID"
            },
            {
              "properties": {
                "ssl_amount": {
                  "description": "The updated recurring amount."
                },
                "Card Info": {
                  "$ref": "#/components/schemas/Card"
                },
                "Payment Schedule Update": {
                  "$ref": "#/components/schemas/Payment_Schedule_Install_Update"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                }
              }
            }
          ]
        },
        "XML_CC_DeleteInstall": {
          "title": "XML - ccdeleteinstall",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccdeleteinstall",
                  "description": "The ccdeleteinstall transaction deletes a credit card installment record from Converge."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Installment_ID"
            }
          ]
        },
        "XML_CC_SubmitInstall": {
          "title": "XML - ccinstallsale",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccinstallsale",
                  "description": "The ccinstallsale transaction allows you to run a credit card installment payment outside of its billing cycle. This will increase the payment number."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Installment_ID"
            }
          ]
        },
        "XML_CC_Void": {
          "title": "XML - ccvoid",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccvoid",
                  "description": "The credit card void or ccvoid transaction removes a sale, credit or force transaction from the open batch. Commonly used for same day returns or to correct cashier mistakes, and can only be performed before the batch is settled.\n\nNo funds will be deposited into the merchantâ€™s bank account at settlement.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            }
          ]
        },
        "XML_ApplePay_Session": {
          "title": "XML - ewalletinquiry",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ewalletinquiry",
                  "description": "Session request for Apple Pay\n\nAdditional setup is required for [Apple Pay](/products/xml-api/v1/wallets#apple-pay) on XML API.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Apple_Session"
            }
          ]
        },
        "XML_ApplePay_Transaction": {
          "title": "XML - ccsale",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccsale",
                  "description": "The ccsale transaction obtains real-time authorization for a credit card sale transaction and enters the transaction into the unsettled batch.\n\nAdditional setup is required for [Apple Pay](/products/xml-api/v1/wallets#apple-pay) on XML API.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Apple_Pay"
            }
          ]
        },
        "XML_ApplePay_InApp_Transaction": {
          "title": "XML - ccsale",
          "required": [
            "ssl_transaction_type",
            "ssl_account_id"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_account_id": {
                  "type": "integer",
                  "maximum": 7,
                  "description": "**Formerly known as ssl_merchant_id.**  \nElavon-assigned Converge Account ID (AID).\n"
                },
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccsale",
                  "description": "The ccsale transaction obtains real-time authorization for a credit card sale transaction and enters the transaction into the unsettled batch. \n\nAdditional setup is required for [Apple Pay](/products/xml-api/v1/wallets#apple-pay) on XML API.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Apple_Pay_InApp"
            }
          ]
        },
        "XML_PayPal_Sale": {
          "title": "XML - pesale",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "pesale",
                  "description": "The pesale is a transaction in which an authorization and transaction is entered into the unsettled batch (of Converge). This transaction is used to obtain real-time authorization for a PayPal sale transaction.  \n\n[Set up PayPal](/products/xml-api/v1/wallets#paypal) for XML API.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount_MCC"
            },
            {
              "properties": {
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PayPal"
                    },
                    {
                      "$ref": "#/components/schemas/Shipping_Address"
                    }
                  ]
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Currency Conversion": {
                  "$ref": "#/components/schemas/MCC"
                }
              }
            }
          ]
        },
        "XML_PayPal_AuthOnly": {
          "title": "XML - peauthonly",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "peauthonly",
                  "description": "Use peauthonly to get a real-time authorization for a PayPal Express Checkout transaction. This transaction will guarantee that the funds are available on the PayPal Account and reduce the cardholderâ€˜s limit to buy for a preset amount of time - usually 7-10 days based on the credit cardâ€™s issuing bank. However, when using peauthonly, the authorization will not appear in the batch for settlement.  \n\n[Set up PayPal](/products/xml-api/v1/wallets#paypal) for XML API.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount_MCC"
            },
            {
              "properties": {
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PayPal"
                    },
                    {
                      "$ref": "#/components/schemas/Shipping_Address"
                    }
                  ]
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Currency Conversion": {
                  "$ref": "#/components/schemas/MCC"
                }
              }
            }
          ]
        },
        "XML_PayPal_Return": {
          "title": "XML - pereturn",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "pereturn",
                  "description": "The pereturn transaction is used to issue a partial or a full return (refund) to a cardholderâ€™s credit card using the transaction ID of the original sale or force transaction. This will guarantee that the same credit card used previously for the purchase is the one being refunded.\n\n[Set up PayPal](/products/xml-api/v1/wallets#paypal) for XML API.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            },
            {
              "$ref": "#/components/schemas/Refund_Amount"
            }
          ]
        },
        "XML_PayPal_Void": {
          "title": "XML - pevoid",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "pevoid",
                  "description": "The pevoid is a transaction that removes a PayPal auth only transaction from the open batch. No funds will deposit into the paypal bank account at settlement. The pevoid command is typically used for same day returns or to correct cashier mistakes. You can only perform this action before the batch is settled. To perform a pevoid, you must submit the transaction ID received from the original transaction.  \n\n[Set up PayPal](/products/xml-api/v1/wallets#paypal) for XML API.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            }
          ]
        },
        "XML_PayPal_Completion": {
          "title": "XML - pecomplete",
          "required": [
            "ssl_transaction_type",
            "ssl_amount"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "pecomplete",
                  "description": "The pecomplete transaction places an approved auth only transaction into the open batch for settlement and converts the approved auth only transaction into a sale transaction.  \n- Transaction status will not change. A pended auth only will be converted to a pended sale. Users have to login to the application in order to unpend a transaction. Transactions set to pend will not settle until they are set to unpend.  \n- A completion request for an amount higher than the original auth only is not allowed.\n- Users must have the batches-edit transactions user right in order to complete a transaction.\n\nThe supported completion types are as follows:\n\n- Full completion - Send pecomplete with the auth only transaction ID without any amount, if you wish to convert an existing auth only to sale. The entire auth only transaction will move from the auth only batch to the main batch for settlement.\n\n- Partial-completion - Send pecomplete with the auth only transaction ID with an amount that is less than the original auth only amount, if you wish to convert only a portion of the auth only to sale. The auth only transaction will move from the auth only batch to the main batch and the transaction will only be settled for smaller amount. The original auth only transaction cannot be used again.\n\n- Multi partial-completion - Send pecomplete with the auth only transaction ID with an amount that is less than the auth only amount and the partial shipment indicator, this action will allow you to keep the unused portion of the auth only amount in the auth only batch, and convert only the desired portion to the main batch. The auth only will remain in the auth only batch and multiple completions can be performed on the single auth only transaction until the total amount has been reached. Every completion will create a new fresh sale.  \n\n[Set up PayPal](/products/xml-api/v1/wallets#paypal) for XML API.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            },
            {
              "properties": {
                "ssl_amount": {
                  "type": "integer",
                  "maximum": 11,
                  "description": "Transaction amount  \nThe full, partial, or multi-partial auth only amount to convert.  \nCompletion Types:\n- Full - Blank/Null\n- Partial - Less than the original auth only amount\n- Multi-partial - Less than the original auth only amount    \n\n**Format:** Number with 2 decimal places.\n"
                },
                "ssl_partial_shipment_flag": {
                  "type": "string",
                  "maximum": 1,
                  "description": "Partial shipment indicator  \nIndicates whether the integrated application supports partial shipment.  \nMust be set to Y if performing a multi-partial completion.  \nCompletion Types:\n- Y - Partial shipment supported\n- N - Partial shipment not supported (default)\n"
                }
              }
            }
          ]
        },
        "XML_Google_Sale": {
          "title": "XML Google - ccsale",
          "required": [
            "ssl_transaction_type",
            "Payment Options",
            "Invoice Number"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccsale",
                  "description": "Additional setup is required for [Google Pay on XML API](/products/xml-api/v1/wallets#google-pay)."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount_MCC"
            },
            {
              "$ref": "#/components/schemas/Google_Pay"
            },
            {
              "properties": {
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Currency Conversion": {
                  "$ref": "#/components/schemas/MCC"
                }
              }
            }
          ]
        },
        "XML_TokenQuery": {
          "title": "XML - cquerytoken",
          "required": [
            "ssl_transaction_type",
            "ssl_token"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "cquerytoken",
                  "description": "The ccquerytoken transaction retrieves information associated with a token."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "ssl_token": {
                  "type": "string",
                  "maxLength": 20,
                  "description": "Credit card token   \n\nImportant: \n- The token must already be stored in card manager.  \n- Use only if the terminal is set up with the tokenization terminal option.  \n"
                }
              }
            }
          ]
        },
        "XML_TokenUpdate": {
          "title": "XML - ccupdatetoken",
          "required": [
            "ssl_transaction_type",
            "ssl_token"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccupdatetoken",
                  "description": "The ccupdatetoken transaction updates the information associated with a token."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "ssl_token": {
                  "type": "string",
                  "maxLength": 20,
                  "description": "Credit card token   \n"
                },
                "Card Data": {
                  "$ref": "#/components/schemas/Card_Optional"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "ssl_exclude_account_update": {
                  "type": "string",
                  "maxLength": 1,
                  "description": "Exclude account update  \nA request with this field set to Y will not pass a token to the account updater.   \n"
                }
              }
            }
          ]
        },
        "XML_TokenGenerate_Online": {
          "title": "XML - ccgettoken",
          "required": [
            "ssl_transaction_type",
            "Card Options"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccgettoken",
                  "description": "The ccgettoken transaction generates a token from a card number or an existing recurring/installment in the recurring batch. The token generated can be used in place of a credit card number in any subsequent transactions. Additionally, you can request to add the generated token to card manager.  \n\nThis transaction is supported only when a terminal is setup for tokenization for hand-keyed cards only. Refer to the [tokenization](/products/xml-api/v1/transaction-types#credit-card-tokens) section for more information.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "Card Options": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Card_Generate_Token"
                    },
                    {
                      "$ref": "#/components/schemas/Recurring_ID"
                    }
                  ]
                }
              }
            },
            {
              "$ref": "#/components/schemas/Verification"
            },
            {
              "properties": {
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA_Optional"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "ssl_cvv2cvc2_indicator": {
                  "type": "integer",
                  "maximum": 1,
                  "description": "Card Verification Value / Card Validation Code indicator  \nIndicates the status of the card security code or number during the transaction. \n- 0 - Bypassed\n- 1 - Present\n- 2 - Illegible\n- 9 - Not Present\n",
                  "enum": [
                    0,
                    1,
                    2,
                    9
                  ]
                },
                "ssl_cvv2cvc2": {
                  "type": "integer",
                  "maximum": 4,
                  "description": "Card Verification Value / Card Validation Code  \nCard security code or number printed on the card and commonly used for card not present payment transactions. See [CVV2/CVC2 response codes](/products/xml-api/v1/response-codes#cvv2cvc2) for a complete list of CVV2 / CVC2 response codes.\n**Required** if ssl_verify is 'Y'.\n"
                },
                "ssl_add_token": {
                  "type": "string",
                  "maxLength": 1,
                  "description": "Add to card manager indicator  \nIndicates whether to add token and cardholder details to card manager.    \n- Y - Add or update the generated token and the cardholder details if the transaction is approved\n- N - Do not add the token or the cardholder details \n",
                  "default": "N",
                  "enum": [
                    "Y",
                    "N"
                  ]
                }
              }
            }
          ]
        },
        "XML_TokenGenerate_InPerson": {
          "title": "XML - ccgettoken",
          "required": [
            "ssl_transaction_type",
            "In-Person Payment",
            "PIN Pad - Swipe"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccgettoken",
                  "description": "The ccgettoken transaction generates a token from a card number or an existing recurring/installment in the recurring batch. The token generated can be used in place of a credit card number in any subsequent transactions. Additionally, you can request to add the generated token to card manager.  \n\nThis transaction is supported only when a terminal is setup for tokenization for hand-keyed cards only. Refer to the [tokenization](/products/xml-api/v1/transaction-types#credit-card-tokens) section for more information.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Manual_GT"
                    },
                    {
                      "$ref": "#/components/schemas/Encrypted"
                    }
                  ]
                },
                "PIN Pad - Swipe": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PinPad_Data_CC_GenerateToken"
                    }
                  ]
                }
              }
            },
            {
              "$ref": "#/components/schemas/Verification"
            },
            {
              "properties": {
                "ssl_cvv2cvc2_indicator": {
                  "type": "integer",
                  "maximum": 1,
                  "description": "Card Verification Value / Card Validation Code indicator  \nIndicates the status of the card security code or number during the transaction. \n- 0 - Bypassed\n- 1 - Present\n- 2 - Illegible\n- 9 - Not Present\n",
                  "enum": [
                    0,
                    1,
                    2,
                    9
                  ]
                },
                "ssl_cvv2cvc2": {
                  "type": "integer",
                  "maximum": 4,
                  "description": "Card Verification Value / Card Validation Code  \nCard security code or number printed on the card and commonly used for card not present payment transactions. See [CVV2/CVC2 response codes](/products/xml-api/v1/response-codes#cvv2cvc2) for a complete list of CVV2 / CVC2 response codes.\n**Required** if ssl_verify is 'Y'.\n"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "ssl_add_token": {
                  "type": "string",
                  "maxLength": 1,
                  "description": "Add to card manager indicator  \nIndicates whether to add token and cardholder details to card manager.    \n- Y - Add or update the generated token and the cardholder details if the transaction is approved\n- N - Do not add the token or the cardholder details \n",
                  "default": "N",
                  "enum": [
                    "Y",
                    "N"
                  ]
                }
              }
            }
          ]
        },
        "XML_TokenDelete": {
          "title": "XML - ccdeletetoken",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccdeletetoken",
                  "description": "The ccdeletetoken transaction deletes a token from card manager."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Token"
            }
          ]
        },
        "XML_3DSecure": {
          "title": "XML - efstoken",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "efstoken",
                  "description": "The efstoken transaction generates an authentication token used to access  3DS Server API. See [3D Secure2](/products/xml-api/v1/3d-secure-2) for more information."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            }
          ]
        },
        "XML_3DSecure_Sale": {
          "title": "XML - 3D Secure2 ccsale",
          "required": [
            "ssl_transaction_type",
            "ssl_card_number",
            "ssl_exp_date",
            "ssl_cvv2cvc2",
            "3D Secure2 Fields"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccsale",
                  "description": "Accepts ccsale, ccauthonly, ccgettoken, ccverify. See [3D Secure2](/products/xml-api/v1/3d-secure-2) for more information."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "ssl_card_number": {
                  "type": "integer",
                  "maximum": 19,
                  "description": "Card number as it appears on the card."
                },
                "ssl_exp_date": {
                  "type": "integer",
                  "maximum": 4,
                  "description": "Card's expiry date    \nDate when the card becomes invalid.  \n**Format:** MMYY  \n",
                  "example": "MMYY"
                },
                "ssl_cvv2cvc2": {
                  "type": "integer",
                  "maximum": 4,
                  "description": "Card Verification Value / Card Validation Code  \nCard security code or number printed on the card and commonly used for card not present payment transactions. See [CVV2/CVC2 response codes](/products/xml-api/v1/response-codes#cvv2cvc2) for a complete list of CVV2 / CVC2 response codes.          \n"
                },
                "3D Secure2 Fields": {
                  "$ref": "#/components/schemas/3D_Secure"
                }
              }
            }
          ]
        },
        "XML_Surcharge_Sale": {
          "title": "XML - ccsale",
          "required": [
            "ssl_transaction_type",
            "Payment Options",
            "In-Person Payments",
            "PIN Pad - Swipe",
            "Invoice Number"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccsale",
                  "description": "A small fee on a credit card transaction a merchant can charge to cover the cost of processing the transaction. Verify terminal is setup with this option by sending ssl_transaction_type = terminalsetup with your credentials. Refer [terminal management](api-reference#tag/Terminal-Management) for terminal setup.\nAdditional requirements are required to certify [surcharges](/products/xml-api/v1/fees#surcharges)."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Payment Options": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Card_Token"
                    },
                    {
                      "$ref": "#/components/schemas/Token_Payment"
                    }
                  ]
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                }
              }
            }
          ]
        },
        "XML_AccountUpdate": {
          "title": "XML - accountupdatequery",
          "required": [
            "ssl_transaction_type",
            "Account Update Search"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "accountupdatequery",
                  "description": "Account manager is an Elavon subscription service that automatically updates the card status for Visa and MasterCard records on file. Merchants subscribing to this service who need to update a large number of stored card profiles can use AccountUpdateQuery. This service is not applicable for digital wallets like Apple Pay, Google Pay and Paze.\n\nAccountUpdateQuery returns the accounts sorted in descending order of date updated and can return up to 1000 accounts in a single request. If a request returns would return more than 1000 accounts, Converge will â€˜pageâ€™ the data. The response of a query with more than 1000 results will automatically return ssl_date_updated. Pass this value as the ssl_search_start_date of another request to view the next 1000 (or fewer) accounts.  \n\nWhenever AccountUpdateQuery yields a status code result, Converge will send a summary report email to the merchant. This email will contain the old and new token values.  \n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "Account Update Search": {
                  "$ref": "#/components/schemas/Account_Update_Search"
                }
              }
            }
          ]
        },
        "XML_EOD_Email": {
          "title": "XML - txnemail",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "txnemail",
                  "description": "The txnemail transaction initiates or resends an email to the merchant or customer for a specific transaction."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            },
            {
              "$ref": "#/components/schemas/EOD_Emails"
            }
          ]
        },
        "XML_EOD_Query": {
          "title": "XML - txnquery",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "txnquery",
                  "description": "The txnquery transaction searches for specific transactions based on parameters you set, such as transaction ID, date range, recurring ID, card data or invoice number."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_Query"
            }
          ]
        },
        "XML_EOD_Total": {
          "title": "XML - total",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "total",
                  "description": "The total transaction obtains a summary of all transactions waiting to be settled. This transaction allows the merchant to review the batch prior to settlement.  \n- Users must have the batches-view transactions user right in order to request a summary.\n- This transaction will not return pended, set to review, or auth only transactions.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            }
          ]
        },
        "XML_EOD_Settlement": {
          "title": "XML - settle",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "settle",
                  "description": "The settle transaction initiates a manual settlement on a single, multiple or batch of transactions.  \n\n- Open batches must be reviewed prior to settlement for accuracy. You may opt to set the terminal for auto-settlement or submit a manual settlement from the integrated application. Elavon highly recommends that batches be closed out on a daily basis.\n- Manual settlement is not allowed for terminals that are setup for multi-currency.\n- Settings are available within the admin feature of the virtual terminal that can block transactions from being added to a current open batch if these do not meet certain qualifications. Elavon recommends that merchants review these settings prior to accepting transactions.  \n\n- Users must have the batches-settle transactions user right in order to settle transactions.\n- Settling a single gift card or cash transaction is not supported, the gift or cash batch must be settled entirely.\n- Only open transactions can be settled. Transactions set to pend or review must be set to unpend or release prior to settlement.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Settlement_Options"
            }
          ]
        },
        "XML_EOD_SettlementQuery": {
          "title": "XML - stlquery",
          "description": "Users can use any of the optional fields (batch response (GBOK), batch_id or correlation_id) for performing settlement query.",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "stlquery",
                  "description": "The settlement query transaction searches a manual settlement on a single, multiple or batch of transactions.  \n\n- Open batches must be reviewed prior to settlement for accuracy. You may opt to set the terminal for auto-settlement or submit a manual settlement from the integrated application. Elavon highly recommends that batches be closed out on a daily basis.\n- Manual settlement is not allowed for terminals that are setup for multi-currency.\n- Settings are available within the admin feature of the virtual terminal that can block transactions from being added to a current open batch if these do not meet certain qualifications. Elavon recommends that merchants review these settings prior to accepting transactions.  \n- Users must have the batches-Settle Transactions user right in order to settle transactions.  \n- Settling a single gift card or cash transaction is not supported, the gift or cash batch must be settled entirely.  \n- Only open transactions can be settled. Transactions set to pend or review must be set to unpend or release prior to settlement.  \n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Settlement_Search_Options"
            }
          ]
        },
        "XML_EOD_RecurringQuery": {
          "title": "XML - recurringquery",
          "required": [
            "ssl_transaction_type",
            "Search Options"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "recurringquery",
                  "description": "The recurringquery transaction searches for a recurring or installment transaction details based on a recurring or installment id.  \n\nSearch only allows the use of a single card information and installment id or recurring id. Search does not allow multiple card information data on a single request.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "Search Options": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Recurring_ID"
                    },
                    {
                      "$ref": "#/components/schemas/Installment_ID"
                    }
                  ]
                }
              }
            }
          ]
        },
        "XML_EGC_Activation": {
          "title": "XML - egcactivation",
          "required": [
            "ssl_transaction_type",
            "Card Options",
            "ssl_egc_tender_type",
            "ssl_amount"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "egcactivation",
                  "description": "The egcactivation transaction activates a gift card."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "ssl_amount": {
                  "type": "integer",
                  "maximum": 11,
                  "description": "The amount to activate on the card."
                },
                "Card Options": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Gift_Card_Token"
                    },
                    {
                      "$ref": "#/components/schemas/Token"
                    }
                  ]
                },
                "ssl_egc_tender_type": {
                  "type": "integer",
                  "maximum": 6,
                  "description": "Tender type\nTender type used to pay for the gift card.\nValid values:\n- 0 - Cash\n- 1 - Credit Card\n- 2 - Debit Card\n- 3 - Check\n",
                  "enum": [
                    0,
                    1,
                    2,
                    3
                  ]
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                }
              }
            }
          ]
        },
        "XML_EGC_Redemption": {
          "title": "XML - egcsale",
          "required": [
            "ssl_transaction_type",
            "Payment Options"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "egcsale",
                  "description": "The egcsale transaction deducts the purchase amount from the balance of the gift card account."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Payment Options": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Gift_Card_Token"
                    },
                    {
                      "$ref": "#/components/schemas/Token"
                    }
                  ]
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                }
              }
            }
          ]
        },
        "XML_EGC_Refund": {
          "title": "XML - egccardrefund",
          "required": [
            "ssl_transaction_type",
            "Card Options"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "egccardrefund",
                  "description": "The egccardrefund transaction resets the balance of a gift card account to zero (card becomes unusable)."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "Card Options": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Gift_Card"
                    },
                    {
                      "$ref": "#/components/schemas/Token"
                    }
                  ]
                }
              }
            }
          ]
        },
        "XML_EGC_Reload": {
          "title": "XML - egcreload",
          "required": [
            "ssl_transaction_type",
            "Card Options",
            "ssl_egc_tender_type",
            "Amount"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "egcreload",
                  "description": "The egcreload transaction increases the current balance of the gift card account."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "Amount": {
                  "type": "integer",
                  "maximum": 11,
                  "description": "The amount to reload on the card."
                },
                "Card Options": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Gift_Card"
                    },
                    {
                      "$ref": "#/components/schemas/Token"
                    }
                  ]
                },
                "ssl_egc_tender_type": {
                  "type": "integer",
                  "maximum": 6,
                  "description": "Tender type\nTender type used to pay for the gift card.\nValid values:\n- 0 - Cash\n- 1 - Credit card\n- 2 - Debit card\n- 3 - Check\n",
                  "enum": [
                    0,
                    1,
                    2,
                    3
                  ]
                }
              }
            }
          ]
        },
        "XML_EGC_BalanceInquiry": {
          "title": "XML - egcbalinquiry",
          "required": [
            "ssl_transaction_type",
            "Card options"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "egcbalinquiry",
                  "description": "The egcbalinquiry transaction checks the current balance of a gift card account."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "Card Options": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Gift_Card"
                    },
                    {
                      "$ref": "#/components/schemas/Token"
                    }
                  ]
                }
              }
            }
          ]
        },
        "XML_EGC_Credit": {
          "title": "XML - egccredit",
          "required": [
            "ssl_transaction_type",
            "Card Options"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "egccredit",
                  "description": "The egccredit transaction refunds money back to a gift card account."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Refund_Amount"
            },
            {
              "properties": {
                "Card Options": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Gift_Card"
                    },
                    {
                      "$ref": "#/components/schemas/Token"
                    }
                  ]
                }
              }
            }
          ]
        },
        "XML_EGC_Token": {
          "title": "XML - egcgettoken",
          "required": [
            "ssl_transaction_type",
            "Card Options"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "egcgettoken",
                  "description": "The egcgettoken transaction generates a token from a gift card number. The token generated can be used in place of a gift card number in any subsequent transactions. This transaction type is supported only when a terminal is setup for tokenization. Refer to the [tokenization](/products/xml-api/v1/transaction-types#credit-card-tokens) section for more information."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Gift_Card"
            }
          ]
        },
        "XML_EC_Purchase_Online": {
          "title": "XML - ecspurchase",
          "required": [
            "ssl_transaction_type",
            "ssl_agree",
            "ACH eCheck"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ecspurchase",
                  "description": "The ecspurchase transaction debits the purchase amount from a checking account."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "ssl_agree": {
                  "type": "integer",
                  "maxLength": 1,
                  "minLength": 1,
                  "description": "Agreement indicator  \n- 0 - Does not agree\n- 1 - Agrees\n",
                  "enum": [
                    0,
                    1
                  ]
                },
                "ACH eCheck": {
                  "$ref": "#/components/schemas/ACH_ECheck"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                }
              }
            }
          ]
        },
        "XML_EC_Purchase_InPerson": {
          "title": "XML - ecspurchase",
          "required": [
            "ssl_transaction_type",
            "ssl_agree",
            "Paper Check"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ecspurchase",
                  "description": "The ecspurchase transaction debits the purchase amount from a checking account."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "ssl_agree": {
                  "type": "integer",
                  "maxLength": 1,
                  "minLength": 1,
                  "description": "Agreement indicator  \n- 0 - Does not agree\n- 1 - Agrees\n",
                  "enum": [
                    0,
                    1
                  ]
                },
                "ssl_description": {
                  "type": "string",
                  "description": "Merchant-defined transaction description  \nShort and custom text to describe the transaction.      \n"
                },
                "Paper Check": {
                  "$ref": "#/components/schemas/ECS_Paper_Check"
                }
              }
            }
          ]
        },
        "XML_EC_Void": {
          "title": "XML - ecsvoid",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ecsvoid",
                  "description": "The ecsvoid transaction reverses a check purchase. This transaction is typically used to correct cashier mistakes. No funds will be deposited into the merchantâ€™s bank account."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            }
          ]
        },
        "XML_EC_AddRecurring": {
          "title": "XML - ecsaddrecurring",
          "required": [
            "Payment Schedule",
            "ssl_transaction_type",
            "ACH eCheck"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ecsaddrecurring",
                  "description": "The ecsaddrecurring transaction adds an ACH ECheck recurring payment to the Converge recurring batch. Once added, the transaction will run automatically within the specified billing cycle on the scheduled payment day without the need to send it for authorization."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "ACH eCheck": {
                  "$ref": "#/components/schemas/ACH_ECheck"
                },
                "Payment Schedule": {
                  "$ref": "#/components/schemas/Payment_Schedule_Recurring"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "ssl_description": {
                  "type": "string",
                  "description": "Merchant-defined transaction description  \nShort and custom text to describe the transaction.   \n"
                },
                "ssl_customer_code": {
                  "type": "string",
                  "maxLength": 17,
                  "description": "Customer code or purchase order number  \nCustomer ID or PO number specified in the billing statement of the cardholder.  \n"
                }
              }
            }
          ]
        },
        "XML_EC_UpdateRecurring": {
          "title": "XML - ecsupdaterecurring",
          "required": [
            "ssl_transaction_type",
            "ssl_agree"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ecsupdaterecurring",
                  "description": "The ecsupdaterecurring transaction updates an existing ACH ECheck recurring payment in the Converge recurring batch."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Recurring_ID"
            },
            {
              "properties": {
                "ssl_amount": {
                  "type": "string",
                  "description": "The updated recurring amount"
                },
                "ssl_agree": {
                  "type": "integer",
                  "maxLength": 1,
                  "minLength": 1,
                  "description": "Agreement indicator  \n- 0 - Does not agree\n- 1 - Agrees\n",
                  "enum": [
                    0,
                    1
                  ]
                },
                "Bank Information": {
                  "$ref": "#/components/schemas/ACH_ECheck_Optional"
                },
                "Payment Schedule Update": {
                  "$ref": "#/components/schemas/Payment_Schedule_Recurring_Update"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "ssl_description": {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Merchant-defined transaction description  \nShort and custom text to describe the transaction.   \n"
                },
                "ssl_customer_code": {
                  "type": "string",
                  "maxLength": 17,
                  "description": "Customer code or purchase order number  \nCustomer ID or PO number specified in the billing statement of the cardholder.  \n"
                }
              }
            }
          ]
        },
        "XML_EC_DeleteRecurring": {
          "title": "XML - ecsdeleterecurring",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ecsdeleterecurring",
                  "description": "The ecsdeleterecurring transaction deletes an ACH ECheck recurring payment from the Converge recurring batch."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Recurring_ID"
            }
          ]
        },
        "XML_EC_SubmitRecurring": {
          "title": "XML - ecsrecurringsale",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ecsrecurringsale",
                  "description": "The ecsrecurringsale transaction allows you to run an ACH ECheck recurring payment outside of its billing cycle and increase the total number of payments."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Recurring_ID"
            }
          ]
        },
        "XML_EC_AddInstall": {
          "title": "XML - ecsaddinstall",
          "required": [
            "ssl_transaction_type",
            "Payment Schedule",
            "ACH eCheck"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ecsaddinstall",
                  "description": "The ecsaddinstall transaction adds an ACH ECheck installment payment to the Converge recurring batch.  \n\nOnce added, the transaction will run automatically for the number of installments specified within the specified billing cycle on the scheduled payment day without the need to send it for authorization. Once the total number of installments is reached, the payments will stop running.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "ACH eCheck": {
                  "$ref": "#/components/schemas/ACH_ECheck"
                },
                "Payment Schedule": {
                  "$ref": "#/components/schemas/Payment_Schedule_Install"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "ssl_description": {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Merchant-defined transaction description  \nShort and custom text to describe the transaction.   \n"
                },
                "ssl_customer_code": {
                  "type": "string",
                  "maxLength": 17,
                  "description": "Customer code or purchase order number  \nCustomer ID or PO number specified in the billing statement of the cardholder.  \n"
                }
              }
            }
          ]
        },
        "XML_EC_UpdateInstall": {
          "title": "XML - ecsupdateinstall",
          "required": [
            "ssl_transaction_type",
            "ssl_agree"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ecsupdateinstall",
                  "description": "The ecsinstallsale transaction allows you to run an ACH ECheck installment payment outside of its billing cycle and increase the total number of payments."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Installment_ID"
            },
            {
              "properties": {
                "ssl_amount": {
                  "type": "string",
                  "description": "The updated amount"
                },
                "ssl_agree": {
                  "type": "integer",
                  "maxLength": 1,
                  "minLength": 1,
                  "description": "Agreement indicator  \n- 0 - Does not agree\n- 1 - Agrees\n",
                  "enum": [
                    0,
                    1
                  ]
                },
                "Bank Information": {
                  "$ref": "#/components/schemas/ACH_ECheck_Optional"
                },
                "Payment Schedule Update": {
                  "$ref": "#/components/schemas/Payment_Schedule_Install_Update"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "ssl_description": {
                  "type": "string",
                  "maxLength": 255,
                  "description": "Merchant-defined transaction description  \nShort and custom text to describe the transaction.   \n"
                },
                "ssl_customer_code": {
                  "type": "string",
                  "maxLength": 17,
                  "description": "Customer code or purchase order number  \nCustomer ID or PO number specified in the billing statement of the cardholder. \n"
                }
              }
            }
          ]
        },
        "XML_EC_DeleteInstall": {
          "title": "XML - ecsdeleteinstall",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ecsdeleteinstall",
                  "description": "The ecsdeleterecurring transaction deletes an ACH ECheck recurring payment from the Converge recurring batch."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Installment_ID"
            }
          ]
        },
        "XML_EC_SubmitInstall": {
          "title": "XML - ecsinstallsale",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ecsinstallsale",
                  "description": "The ecsrecurringsale transaction allows you to run an ACH ECheck recurring payment outside of its billing cycle and increase the total number of payments."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Installment_ID"
            }
          ]
        },
        "XML_BatchQuery": {
          "title": "XML - bitxnquery",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "bitxnquery",
                  "description": "Converge users who want to see all accepted and/or declined transactions from a batch import."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Batch_Import_Transaction"
            }
          ]
        },
        "XML_BatchInfo": {
          "title": "XML - cctokenimport",
          "required": [
            "ssl_transaction_type",
            "Batch Import File"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "cctokenimport",
                  "description": "The cctokenimport transaction imports and processes a batch file of card numbers or recurring IDs in order to generate tokens. This is the bulk load of ccgettoken.  \nSee [batch import](/products/xml-api/v1/batch-import) for format and allowed fields.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Batch_Import_File"
            }
          ]
        },
        "XML_BatchImport": {
          "title": "XML - ccimport",
          "required": [
            "ssl_transaction_type",
            "Batch Import File"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccimport",
                  "description": "The ccimport transaction imports and processes a batch file of credit card transactions.    \nTo see individual card responses see batch import transaction query - bitxnquery.\n\nSee [batch import](/products/xml-api/v1/batch-import) for format and allowed fields.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Batch_Import_File"
            }
          ]
        },
        "XML_BatchRecurring": {
          "title": "XML - ccrecimport",
          "required": [
            "ssl_transaction_type",
            "Batch Import File"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "ccrecimport",
                  "description": "The ccrecimport transaction imports and processes a batch file of recurring and installment transactions.  \nSee [batch import](/products/xml-api/v1/batch-import) for format and allowed fields.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Batch_Import_File"
            }
          ]
        },
        "XML_TerminalSetup": {
          "title": "XML - terminalsetup",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "terminalsetup",
                  "description": "The terminalsetup transaction retrieves the terminal and merchant setup information."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            }
          ]
        },
        "XML_PaymentFieldSetup": {
          "title": "XML - fieldsetup",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "fieldsetup",
                  "description": "The fieldsetup transaction retrieves the terminalâ€™s payment field information."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            }
          ]
        },
        "XML_DB_BINLookup_Online": {
          "title": "XML - binlookup",
          "required": [
            "ssl_transaction_type",
            "ssl_card_number"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "binlookup",
                  "description": "Use binlookup to get access to the bank identification number of a card. The results of binlookup determine whether a card is a debit or credit card.  \n\nbinlookup is available on terminals with the following settings:  \n\nRegion set to USA  \nMarket segment set to one of the following  \n- Retail  \n- MOTO  \n- Internet  \n- Service  \n\nbinlookup is an important step in implementing surcharges on credit card users. Before applying a surcharge to a user, use a BIN lookup request to determine whether a card is a debit or credit card.  \n\nEvery binlookup will return the field surchargeAllowed. If this field returns Y, the card that the binlookup was for is a credit card and may have surcharges applied to it. If this field returns N, then the card is not a credit card and should not have surcharge applied.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "ssl_card_number": {
                  "title": "Card number",
                  "type": "integer",
                  "maximum": 19,
                  "description": "Card number as it appears on the card."
                },
                "ssl_first_name": {
                  "type": "string",
                  "maxLength": 50,
                  "description": "First name on the cardholderâ€™s / customerâ€™s account or billing address"
                },
                "ssl_middle_name": {
                  "type": "string",
                  "maxLength": 50,
                  "description": "Middlle name on the cardholderâ€™s / customerâ€™s account or billing address"
                },
                "ssl_last_name": {
                  "type": "string",
                  "maxLength": 50,
                  "description": "Last name on the cardholderâ€™s / customerâ€™s account or billing address"
                }
              }
            }
          ]
        },
        "XML_DB_BINLookup_InPerson": {
          "title": "XML - binlookup",
          "required": [
            "ssl_transaction_type",
            "In-Person Payments"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "binlookup",
                  "description": "Use binlookup to get access to the bank identification number of a card. The results of binlookup determine whether a card is a debit or credit card.  \n\nbinlookup is available on terminals with the following settings:  \n\nRegion set to USA  \nMarket segment set to one of the following  \n- Retail  \n- MOTO  \n- Internet  \n- Service  \n\nbinlookup is an important step in implementing surcharges on credit card users. Before applying a surcharge to a user, use a BIN lookup request to determine whether a card is a debit or credit card.  \n\nEvery binlookup will return the field surchargeAllowed. If this field returns Y, the card that the binlookup was for is a credit card and may have surcharges applied to it. If this field returns N, then the card is not a credit card and should not have surcharge applied.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "ssl_first_name": {
                  "type": "string",
                  "maxLength": 50,
                  "description": "First name on the cardholderâ€™s / customerâ€™s account or billing address"
                },
                "ssl_middle_name": {
                  "type": "string",
                  "maxLength": 50,
                  "description": "Middlle name on the cardholderâ€™s / customerâ€™s account or billing address"
                },
                "ssl_last_name": {
                  "type": "string",
                  "maxLength": 50,
                  "description": "Last name on the cardholderâ€™s / customerâ€™s account or billing address"
                }
              }
            },
            {
              "properties": {
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Swiped"
                    },
                    {
                      "$ref": "#/components/schemas/Encrypted"
                    },
                    {
                      "$ref": "#/components/schemas/Manual"
                    }
                  ]
                }
              }
            }
          ]
        },
        "XML_PrinterSetup": {
          "title": "XML - printersetup",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "printersetup",
                  "description": "The printersetup transaction retrieves the printer information."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            }
          ]
        },
        "XML_DB_Purchase": {
          "title": "XML - dbpurchase",
          "required": [
            "ssl_transaction_type",
            "ssl_account_type",
            "In-Person Payments",
            "PIN Pad - Debit"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "dbpurchase",
                  "description": "The dbpurchase transaction deducts the purchase amount from the debit cardholderâ€™s checking or savings account, debiting the account immediately."
                },
                "ssl_account_type": {
                  "type": "integer",
                  "maximum": 1,
                  "description": "Bank deposit account type  \n- 0 - Checking  \n- 1 - Savings  \n",
                  "enum": [
                    0,
                    1
                  ]
                },
                "ssl_lane_number": {
                  "type": "integer",
                  "maximum": 8,
                  "description": "Lane number  \nA unique identifier for point of sale devices that can be passed to satisfy Mastercardâ€™s unique terminal ID requirement\n"
                },
                "ssl_partial_auth_indicator": {
                  "type": "integer",
                  "maximum": 1,
                  "default": 0,
                  "enum": [
                    0,
                    1
                  ]
                },
                "ssl_partial_shipment_flag": {
                  "type": "string",
                  "maxLength": 46,
                  "description": "Partial shipment indicator\nIndicates whether the integrated application supports partial shipment.\nMust be set to Y if performing a multi-partial completion.\n",
                  "enum": [
                    "Y",
                    "N"
                  ]
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Swiped"
                    },
                    {
                      "$ref": "#/components/schemas/Encrypted"
                    }
                  ]
                },
                "Cashback": {
                  "$ref": "#/components/schemas/Cashback_Amount"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Address Verification": {
                  "$ref": "#/components/schemas/Address_Verification"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Tip Processing": {
                  "$ref": "#/components/schemas/Tip_Processing"
                },
                "Card on File": {
                  "$ref": "#/components/schemas/Card_On_File"
                },
                "Level 3": {
                  "$ref": "#/components/schemas/Level_3"
                },
                "3D Secure": {
                  "$ref": "#/components/schemas/3D_Secure"
                },
                "PIN Pad - Debit": {
                  "$ref": "#/components/schemas/PinPad_Data_Debit"
                }
              }
            }
          ]
        },
        "XML_DB_Return": {
          "title": "XML - dbreturn",
          "required": [
            "ssl_transaction_type",
            "ssl_amount",
            "Debit Return",
            "PIN Pad - Debit"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "dbreturn",
                  "description": "The dbreturn transaction refunds the transaction amount to the debit cardholderâ€™s checking or savings account and reflects immediately the balance in the account.\n- Contact Elavon to make sure that debit refunds are enabled for the terminal.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Refund_Amount"
            },
            {
              "properties": {
                "Debit Return": {
                  "$ref": "#/components/schemas/Debit_Return"
                },
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Swiped"
                    },
                    {
                      "$ref": "#/components/schemas/Encrypted"
                    }
                  ]
                },
                "PIN Pad - Debit": {
                  "$ref": "#/components/schemas/PinPad_Data_Debit"
                }
              }
            }
          ]
        },
        "XML_DB_AuthOnly": {
          "title": "XML - dbauthonly",
          "required": [
            "ssl_transaction_type",
            "In-Person Payments",
            "PIN Pad - Debit"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "dbauthonly",
                  "description": "The debit card authorization only or dbauthonly transaction obtains a real-time authorization for a debit card transaction, guarantees that the funds are available on the card, and reduces the cardholderâ€™s limit to buy for only a predetermined period (which is usually 7-10 days based on the debit cardâ€™s issuing bank). To use this transaction, debit payment type must be enabled on terminal setting before debit preauth selection on terminal.  \n\nThis transaction does not place the authorization in the settlement batch. To place the dbauthonly transaction in the open batch, use debit complete.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Authorization Lifecycle": {
                  "$ref": "#/components/schemas/Auth_Lifecycle"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Address Verification": {
                  "$ref": "#/components/schemas/Address_Verification"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Tip Processing": {
                  "$ref": "#/components/schemas/Tip_Processing"
                },
                "Card on File": {
                  "$ref": "#/components/schemas/Card_On_File"
                },
                "Level 3": {
                  "$ref": "#/components/schemas/Level_3"
                },
                "3D Secure": {
                  "$ref": "#/components/schemas/3D_Secure"
                },
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Swiped"
                    },
                    {
                      "$ref": "#/components/schemas/Encrypted"
                    }
                  ]
                },
                "PIN Pad - Debit": {
                  "$ref": "#/components/schemas/PinPad_Data_Debit"
                }
              }
            }
          ]
        },
        "XML_DB_AuthOnlyIncrement": {
          "title": "XML - dbauthonly (increment)",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "dbauthonly",
                  "description": "The auth only increment transaction lets merchants check if a customer has the necessary funds for additional charges tied to an existing auth only transaction - this extends an existing auth only and avoids the difficulty of managing two independent auth only transactions."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            }
          ]
        },
        "XML_DB_Complete": {
          "title": "XML - dbcomplete",
          "required": [
            "ssl_transaction_type",
            "ssl_amount"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "dbcomplete",
                  "description": "The dbcomplete transaction places an approved auth only transaction into the open batch for settlement and converts the approved auth only transaction into a sale transaction.  \n- Transaction status will not change. A pended auth only will be converted to a pended Sale. Users have to login to the application in order to unpend a transaction. Transactions set to pend will not settle until they are set to unpend.  \n- A completion request for an amount higher than the original auth only is not allowed.  \n- Users must have the batches-edit transactions user right in order to complete a transaction.  \nThe supported completion types are as follows:\n\n- Full completion - Send dbcomplete  with the auth only transaction ID without any amount, if you wish to convert an existing auth only to sale. The entire auth only transaction will move from the auth only batch to the main batch for settlement.\n\n- Partial-completion - Send dbcomplete  with the auth only transaction ID with an amount that is less than the original auth only amount, if you wish to convert only a portion of the auth only to sale. The auth only transaction will move from the auth only batch to the main batch and the transaction will only be settled for smaller amount. The original auth only transaction cannot be used again.\n\n- Multi partial-completion - Send dbcomplete  with the auth only transaction ID with an amount that is less than the auth only remaining amount and the partial shipment indicator, this action will allow you to keep the unused portion of the auth only amount in the auth only batch, and convert only the desired portion to the main batch. The auth only will remain in the auth only batch and multiple completions can be performed on the single auth only transaction until the total amount has been reached. Every completion will create a new fresh sale.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "ssl_amount": {
                  "type": "integer",
                  "maximum": 11,
                  "description": "Transaction amount  \nThe full, partial, or multi-partial auth only amount to convert.  \nCompletion Types:\n- Full - Blank/Null\n- Partial - Less than the original auth only amount\n- Multi-partial - Less than the remaining auth only amount    \n\n    **Format:** Number with 2 decimal places.\n"
                },
                "ssl_partial_shipment_flag": {
                  "type": "string",
                  "maxLength": 46,
                  "description": "Partial shipment indicator\nIndicates whether the integrated application supports partial shipment.\nMust be set to Y if performing a multi-partial completion.\n",
                  "enum": [
                    "Y",
                    "N"
                  ]
                }
              }
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            }
          ]
        },
        "XML_DB_Reverse": {
          "title": "XML - dbreverse",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "dbreverse",
                  "description": "The dbreverse transaction type will reverse an approved or open US debit purchase within 10 mins of the approval. DB Reverse is available from all input methods."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            }
          ]
        },
        "XML_DB_Void": {
          "title": "XML - dbvoid",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "dbvoid",
                  "description": "Voiding a transaction is primarily useful for PINless bill pay transactions. Besides this primary case, voiding is usable on other debit transactions that have not settled but you want to cancel.  \ndbvoid is only usable on terminals with the following settings:  \n- Region set to USA  \n- Debit transactions enabled  \n\nIf you would like to enable these settings on your terminal, please contact Elavon Software Technical Support.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            }
          ]
        },
        "XML_DB_Inquiry": {
          "title": "XML - dbbainquiry",
          "required": [
            "ssl_transaction_type",
            "PIN Pad - Debit"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "dbbainquiry",
                  "description": "The dbbainquiry transaction returns the available balance of the cardholderâ€™s checking or savings account.  \n- Track II card swipe is required. Manual entry is not allowed.  \n- Not available for Interac refunds. \n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Account_Type"
            },
            {
              "properties": {
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Swiped"
                    },
                    {
                      "$ref": "#/components/schemas/Encrypted"
                    }
                  ]
                },
                "PIN Pad - Debit": {
                  "$ref": "#/components/schemas/PinPad_Data_Debit"
                }
              }
            }
          ]
        },
        "XML_DB_PinlessBill": {
          "title": "XML - pldbillpay",
          "required": [
            "ssl_transaction_type",
            "ssl_customer_number"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "pldbillpay",
                  "description": "Merchants that process both recurring transactions and PINless debit transactions can take advantage of PINless bill pay. PINless bill pay transactions can run after confirming that the card the transaction will charge to is valid using binlookup.  \n\nPINless bill pay is available on terminals with the following settings:  \n\n- Region set to USA\n- Debit enabled\n- PINless debit bill pay enabled\n- Eligible merchant MCC/SIC Code  \n\nBefore sending a request for a PINless bill pay transaction, you need to confirm that the card supports PINless bill pay as an option. To do this, send a binlookup request and check for the following field/value combinations.  \n\n- &#60;debit&#62;Y&#60;/debit&#62;   \n- &#60;billPaymentSupport&#62;Y&#60;/billPaymentSupport&#62;\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "$ref": "#/components/schemas/Card"
            },
            {
              "$ref": "#/components/schemas/Account_Type"
            },
            {
              "$ref": "#/components/schemas/Customer_Number"
            },
            {
              "properties": {
                "ssl_cashback_amount": {
                  "type": "integer",
                  "maximum": 12,
                  "description": "Cashback Amount  \nAmount to pay the cardholder for making a debit purchase transaction.  \nFormat: Number with 2 decimal places.  \nImportant: Only applicable to terminals that are set up with the Cashback debit payment option.  \n"
                },
                "ssl_salestax": {
                  "type": "integer",
                  "maximum": 8,
                  "description": "Sales Tax  \nTax amount to add to the purchase or sales amount. For a tax exempt transaction, enter 0.00.  \nFormat: Amount with 2 decimal places.  \n"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                }
              }
            }
          ]
        },
        "XML_DB_PinlessPurchase": {
          "title": "XML - pldpurchase",
          "required": [
            "ssl_transaction_type",
            "ssl_customer_number"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "pldbillpay",
                  "description": "PINless purchase transaction deducts the purchase amount from the debit cardholder's checking or savings account after confirming that the debit card supports pinless purchase using binlookup.  \n\nPINless debit purchase is available on terminals with the following settings:  \n\n- Region set to USA\n- Debit enabled\n- PINless debit bill pay enabled\n- Eligible merchant MCC/SIC Code  \n\n  PINless debit bill pay must be enabled only if MCC / SIC Code is 4900, 4814, 4899, 9311, 8211, 5968, 6513, or 5692.  \n  \n  Before sending a request for a PINless debit purchase transaction, you need to confirm that the card supports PINless debit purchase as an option. To do this, send a binlookup request and check for the following field/value combinations.  \n\n- &#60;debit&#62;Y&#60;/debit&#62;   \n- &#60;billPaymentSupport&#62;Y&#60;/billPaymentSupport&#62;\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "$ref": "#/components/schemas/Card"
            },
            {
              "$ref": "#/components/schemas/Account_Type"
            },
            {
              "$ref": "#/components/schemas/Customer_Number"
            },
            {
              "properties": {
                "ssl_cashback_amount": {
                  "type": "integer",
                  "maximum": 12,
                  "description": "Cashback Amount  \nAmount to pay the cardholder for making a debit purchase transaction.  \nFormat: Number with 2 decimal places.  \nImportant: Only applicable to terminals that are set up with the Cashback debit payment option. \n"
                },
                "ssl_salestax": {
                  "type": "integer",
                  "maximum": 8,
                  "description": "Sales Tax  \nTax amount to add to the purchase or sales amount. For a tax exempt transaction, enter 0.00.  \nFormat: Amount with 2 decimal places.  \n"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                }
              }
            }
          ]
        },
        "XML_DB_StraightSend": {
          "title": "XML - dboctdisbursement",
          "required": [
            "ssl_transaction_type",
            "ssl_oct_ref_number"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "dboctdisbursement",
                  "description": "Straight send is an innovative payment system for fast and convenient fund transfers to eligible debit cards. This straight send payment method credits funds to a recipientâ€™s debit card account. Straight send payment method tends to be cheaper, faster, more convenient and more traceable than traditional payment methods."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "$ref": "#/components/schemas/Card"
            },
            {
              "$ref": "#/components/schemas/Debit_Straight_Send_Match"
            },
            {
              "properties": {
                "ssl_oct_ref_number": {
                  "type": "integer",
                  "maximum": 16,
                  "description": "OCT reference number  \nThis field is used to identify the sender reference number submitted with the Original Credit Transaction (OCT) \n"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                }
              }
            }
          ]
        },
        "XML_Cash_Sale": {
          "title": "XML - cashsale",
          "required": [
            "ssl_transaction_type",
            "ssl_amount"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "cashsale",
                  "description": "The cashsale transaction enters a purchase by cash."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "ssl_amount": {
                  "type": "integer",
                  "maximum": 11,
                  "description": "Transaction amount   \nThe sale amount that includes the net and sales tax amounts.  \nFor tip Processing, the sale amount must not include the tip amount.  \n**Format:** Number with 2 decimal places  \n"
                },
                "Tip Processing": {
                  "$ref": "#/components/schemas/Tip_Processing"
                }
              }
            }
          ]
        },
        "XML_Cash_Return": {
          "title": "XML - cashcredit",
          "required": [
            "ssl_transaction_type",
            "ssl_amount"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "cashcredit",
                  "description": "The cashcredit transaction refunds by cash. The refund is not tied to any previous purchases."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "ssl_amount": {
                  "type": "integer",
                  "maximum": 11,
                  "description": "Transaction amount  \n**Format:** Number with 2 decimal places  \n"
                }
              }
            }
          ]
        },
        "XML_EMV_Sale": {
          "title": "XML - emvchipsale",
          "required": [
            "ssl_transaction_type",
            "In-Person Payments",
            "PIN Pad - Chip"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "emvchipsale",
                  "description": "The emvchipsale transaction obtains real-time sale authorization for a chip credit card or debit card. Converge enters the transaction into the unsettled batch after obtaining the authorization.  \n- An emvchipupdatetxn transaction must be sent once an emvchipsale has been approved and the chip card has returned additional data.\n- POS system will need to update the chip or device with the Issuer Script received from the authorization.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "Generate Payment Token": {
                  "$ref": "#/components/schemas/Generate_Token"
                },
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Chip"
                    }
                  ]
                },
                "PIN Pad - Chip": {
                  "$ref": "#/components/schemas/PinPad_Data_EMV"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Tip Processing": {
                  "$ref": "#/components/schemas/Tip_Processing"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Travel Data": {
                  "$ref": "#/components/schemas/Travel_Data"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Advanced Settings": {
                  "$ref": "#/components/schemas/Advanced_Integration_Settings"
                },
                "EMV DCC": {
                  "$ref": "#/components/schemas/EMV_DCC_Token"
                }
              }
            }
          ]
        },
        "XML_EMV_AuthOnly": {
          "title": "XML - emvchipauthonly",
          "required": [
            "ssl_transaction_type",
            "In-Person Payments",
            "PIN Pad - Chip"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "emvchipauthonly",
                  "description": "The emvchipauthonly transaction obtains real-time authorization only for a chip credit card. This transaction will guarantee that the funds are available on the card and reduce the cardholderâ€™s limit to buy for only a predetermined amount of time.  \n- An emvchipupdatetxn transaction must be sent once an emvchipauthonly has been approved and the chip card has returned additional data.\nTo place the transaction in the open batch, use cccomplete to convert to a sale transaction or use ccdelete to reverse and restore the funds on the card.  \n- POS system will need to update the chip or device with the issuer script received from the authorization.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "Generate Payment Token": {
                  "$ref": "#/components/schemas/Generate_Token"
                },
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Chip"
                    }
                  ]
                },
                "PIN Pad - Chip": {
                  "$ref": "#/components/schemas/PinPad_Data_EMV"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Tip Processing": {
                  "$ref": "#/components/schemas/Tip_Processing"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Travel Data": {
                  "$ref": "#/components/schemas/Travel_Data"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Advanced Settings": {
                  "$ref": "#/components/schemas/Advanced_Integration_Settings"
                },
                "EMV DCC": {
                  "$ref": "#/components/schemas/EMV_DCC_Token"
                }
              }
            }
          ]
        },
        "XML_EMV_SwipeSale": {
          "title": "XML - emvswipesale",
          "required": [
            "ssl_transaction_type",
            "PIN Pad - Swipe",
            "In-Person Payments"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "emvswipesale",
                  "description": "The emvswipesale transaction obtains real-time sale authorization for a swiped credit or debit card for an EMV terminal. This transaction covers chip cards in a fallback situation, regular swiped cards, and any non-supported chip cards. Converge enters the transaction into the unsettled batch after obtaining the authorization.   \n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Cashback": {
                  "$ref": "#/components/schemas/Cashback_Amount"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Tip Processing": {
                  "$ref": "#/components/schemas/Tip_Processing"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Travel Data": {
                  "$ref": "#/components/schemas/Travel_Data"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Advanced Settings": {
                  "$ref": "#/components/schemas/Advanced_Integration_Settings"
                },
                "EMV DCC": {
                  "$ref": "#/components/schemas/EMV_DCC_Token"
                }
              }
            },
            {
              "properties": {
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Encrypted"
                    }
                  ]
                },
                "PIN Pad - Swipe": {
                  "$ref": "#/components/schemas/PinPad_Data_EMV_Swipe"
                },
                "Interac": {
                  "$ref": "#/components/schemas/Interac"
                }
              }
            }
          ]
        },
        "XML_EMV_SwipeAuth": {
          "title": "XML - emvswipeauthonly",
          "required": [
            "ssl_transaction_type",
            "In-Person Payments",
            "PIN Pad - Swipe"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "emvswipeauthonly",
                  "description": "The emvswipeauthonly transaction obtains real-time authorization only for a swiped credit/debit card for an EMV terminal. This transaction covers chip cards in a fallback situation, regular swiped cards, and any non-supported chip cards. This transaction will guarantee that the funds are available on the card and reduce the cardholderâ€™s limit to buy for only a predetermined amount of time.  \n\nTo place the transaction in the open batch, use cccomplete to convert to a sale transaction or use ccdelete to reverse and restore the funds on the card.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Tip Processing": {
                  "$ref": "#/components/schemas/Tip_Processing"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Travel Data": {
                  "$ref": "#/components/schemas/Travel_Data"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Billing Address": {
                  "$ref": "#/components/schemas/Billing_Address"
                },
                "Shipping Address": {
                  "$ref": "#/components/schemas/Shipping_Address"
                },
                "Custom Fields": {
                  "$ref": "#/components/schemas/Custom_Fields"
                },
                "Advanced Settings": {
                  "$ref": "#/components/schemas/Advanced_Integration_Settings"
                },
                "EMV DCC": {
                  "$ref": "#/components/schemas/EMV_DCC_Token"
                }
              }
            },
            {
              "properties": {
                "In-Person Payments": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Encrypted"
                    }
                  ]
                },
                "PIN Pad - Swipe": {
                  "$ref": "#/components/schemas/PinPad_Data_EMV_Swipe"
                }
              }
            }
          ]
        },
        "XML_EMV_Update": {
          "title": "XML - emvchipupdatetxn",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "emvchipupdatetxn",
                  "description": "The emvchipupdatetxn transaction updates the system with information from the chip card. The chip card may update the transaction data after the Issuer information has been received from the chip transaction response.  \n\nIf the chip card accepts the issuer authorization (does not decline by card), submit emvchipupdatetxn to complete the transaction.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            },
            {
              "properties": {
                "Integrated Circuit": {
                  "$ref": "#/components/schemas/Integrated_Circuit"
                },
                "Signature": {
                  "$ref": "#/components/schemas/Signature"
                }
              }
            }
          ]
        },
        "XML_EMV_Reversal": {
          "title": "XML - emvreverse",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "emvreverse",
                  "description": "The emvreverse transaction reverses an approved authorization from a chip read transaction after a decline by card  is received from the chip card. The chip card may decline the transaction data even after an Issuer approval, in this case a reversal must be sent to restore the funds back to the card. This action can be performed within 5 minutes after an emvchipsale transaction."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            }
          ]
        },
        "XML_EMV_KeyExchange": {
          "title": "XML - emvkeyexchange",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "emvkeyexchange",
                  "description": "Requests EMV keys to update the devices. It is performed intitally to get the EMV key when   \n- An EMV chip sale (emvchipsale) transaction response returns an `ssl_update_emv_keys` value of 'Y'\n- An EMV chip auth only (emvchipauthonly) transaction response returns an `ssl_update_emv_keys` value of 'Y'\n- An EMV swipe sale (emvswipesale) transaction response returns an `ssl_update_emv_keys` value of 'Y'\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            }
          ]
        },
        "XML_EMV_KeyExchangeLegacy": {
          "title": "XML - caddbkeyexchange",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "caddbkeyexchange",
                  "description": "Interac (Canadian Domestic Debit) requires a legacy key update once every 200 Interac transactions. This transaction type exists prior to EMV API and has a slightly different response format."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            }
          ]
        },
        "XML_EMV_Return": {
          "title": "XML - emvchipreturn",
          "required": [
            "ssl_transaction_type",
            "ssl_pos_mode",
            "ssl_entry_mode"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "emvchipreturn",
                  "description": "EMV return lets Converge users process refunds of a settled transaction (linked) or stand alone (unlinked). EMV chip return is available for both credit card and debit card EMV chips.  \n\nEMV chip returns can only affect a settled transaction.  \n\nUsers can make partial returns linked to the same transaction.  \n\nConverge will return an error 5091 if a return would cause the total returns issued on a settled transaction to exceed the original amount paid on the settled transaction.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Chip"
            },
            {
              "properties": {
                "ssl_pos_mode": {
                  "type": "integer",
                  "maximum": 2,
                  "description": "POS device data entry capability    \nIndicates how the POS device captures card data.   \n- 02 - Magnetic swipe-capable  \n- 03 - Proximity or contactless-capable  \n",
                  "enum": [
                    "02",
                    "03"
                  ]
                },
                "ssl_txn_id": {
                  "type": "string",
                  "maxLength": 46,
                  "description": "Unique identifier returned from a previously run transaction.\n"
                },
                "EMV DCC": {
                  "$ref": "#/components/schemas/EMV_DCC_Token"
                },
                "ssl_entry_mode": {
                  "type": "integer",
                  "maximum": 2,
                  "description": "Transaction entry indicator    \nIndicates how the track data was captured.    \n**Valid values:**   \n- 03 - Swiped \n",
                  "enum": [
                    "03"
                  ]
                }
              }
            }
          ]
        },
        "XML_EMV_DCC": {
          "title": "XML - emvdcccheck",
          "required": [
            "ssl_transaction_type",
            "In-Person Payments"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "emvdcccheck",
                  "description": "The EMVDCCCHECK transaction type lets EMV cards use Dynamic Currency Conversion. At a high level, EMVDCCCHECK passes amount and card data to determine whether a transaction can take advantage of DCC. If the transaction is eligible, Converge will return a token to initiate the transaction.  \n\nTo process dynamic currency conversion on an EMV transaction, you must first process an API request for <ssl_transaction_type>EMVDCCCHECK</ssl_transaction_type>. If the card being processed as part of the EMVDCCCHECK transaction is eligible for dynamic currency conversion, Converge will return a ssl_dcc_token and DCC values. Include the ssl_dcc_token with an authorization request - Do not include the DCC values with this request.  \n\n**Note** An ssl_dcc_token expires after 15 minutes. If a DCC transaction is not completed during that time, you must send a new EMVDCCCHECK transaction request.  \n\n**Date Requirements**  \nYou will need to define either ssl_tlv_enc or ssl_enc_track_data. ssl_tlv_enc requires that tags 9F02 (authorization amount), C0 (KSN), D0 (encrypted track2 equivalent) are correctly populated. ssl_enc_track_data must include ssl_ksn, ssl_amount, and ssl_enc_track_data_format (if appropriate).  \n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "$ref": "#/components/schemas/Account_Type"
            },
            {
              "properties": {
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Chip"
                    },
                    {
                      "$ref": "#/components/schemas/Encrypted"
                    }
                  ]
                }
              }
            }
          ]
        },
        "XML_EMV_CashAdvance": {
          "title": "XML - emvchipcashadvance",
          "required": [
            "ssl_transaction_type",
            "ssl_pos_mode",
            "ssl_entry_mode",
            "In-Person Payments"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "emvchipcashadvance",
                  "description": "The emvchipcashadvance transaction obtains real-time cash advance for a chip credit card. The cash advance option must be enabled in the terminal for performing emvchipcashadvance transaction.  \n- An emvchipupdatetxn transaction must be sent once an emvchipcashadvancesale has been completed and the chip card has returned additional data.\n- POS system will need to update the chip or device with the issuer script received from the authorization.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "In-Person Payments": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Chip"
                    }
                  ]
                },
                "ssl_pos_mode": {
                  "type": "integer",
                  "maximum": 2,
                  "description": "POS device data entry capability    \nIndicates how the POS device captures card data.   \n- 03 - Proximity or contactless-capable  \n- 04 - EMV chip-capable (ICC) - Contact only with magnetic stripe  \n- 05 - EMV chip-capable (ICC) - Dual interface with magnetic stripe \n",
                  "enum": [
                    "03",
                    "04",
                    "05"
                  ]
                },
                "ssl_entry_mode": {
                  "type": "integer",
                  "maximum": 2,
                  "description": "Transaction entry indicator    \nIndicates how the track data was captured.    \n**Valid values:**   \n- 05 - EMV (ICC) with CVV or iCVV \n- 06 - EMV (ICC) Proximity Read \n- 07 - EMV (ICC) without CVV or iCVV   \n",
                  "enum": [
                    "05",
                    "06"
                  ]
                },
                "Address Verification": {
                  "$ref": "#/components/schemas/Address_Verification"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                }
              }
            }
          ]
        },
        "XML_EMV_CashAdvanceSwipe": {
          "title": "XML - emvswipecashadvance",
          "required": [
            "ssl_transaction_type",
            "In-Person Payments",
            "ssl_pos_mode",
            "ssl_entry_mode"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "emvswipecashadvance",
                  "description": "The emvswipecashadvance transaction obtains real-time cash advance for a chip credit card using swipe. The cash advance option must be enabled in the terminal for performing emvswipecashadvance transaction.  \n- An emvchipupdatetxn transaction must be sent once an emvswipecashadvance has been completed and the chip card has returned additional data.\n- POS system will need to update the chip or device with the issuer script received from the authorization.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Encrypted"
                    }
                  ]
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Travel Data": {
                  "$ref": "#/components/schemas/Travel_Data"
                },
                "ssl_pos_mode": {
                  "type": "integer",
                  "maximum": 2,
                  "description": "POS device data entry capability    \nIndicates how the POS device captures card data.   \n- 03 - Proximity or contactless-capable  \n- 04 - EMV chip-capable (ICC) - Contact only with magnetic stripe  \n- 05 - EMV chip-capable (ICC) - Dual interface with magnetic stripe \n",
                  "enum": [
                    "03",
                    "04",
                    "05"
                  ]
                },
                "ssl_entry_mode": {
                  "type": "integer",
                  "maximum": 2,
                  "description": "Transaction entry indicator    \nIndicates how the track data was captured.    \n**Valid values:**   \n- 05 - EMV (ICC) with CVV or iCVV \n- 06 - EMV (ICC) proximity read \n- 07 - EMV (ICC) without CVV or iCVV   \n",
                  "enum": [
                    "05",
                    "06",
                    "07"
                  ]
                }
              }
            }
          ]
        },
        "XML_EBT_Purchase": {
          "title": "XML - fspurchase",
          "required": [
            "ssl_transaction_type",
            "PIN Pad - EBT"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "fspurchase",
                  "description": "The fspurchase transaction obtains authorization on an EBT card. This transaction reduces the cardholderâ€™s limit to buy, and places the transaction into the open batch."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "$ref": "#/components/schemas/Swiped"
            },
            {
              "properties": {
                "PIN Pad - EBT": {
                  "$ref": "#/components/schemas/PinPad_Data_EBT"
                }
              }
            }
          ]
        },
        "XML_EBT_Return": {
          "title": "XML - fsreturn",
          "required": [
            "ssl_transaction_type",
            "ssl_amount",
            "PIN Pad - EBT",
            "EBT Return"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "fsreturn",
                  "description": "The fsreturn transaction refunds (credits) money onto the cardholderâ€™s EBT card. A return transaction will increase the cardholderâ€™s limit to buy once the batch containing the return has been settled or closed."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Refund_Amount"
            },
            {
              "properties": {
                "EBT Return": {
                  "$ref": "#/components/schemas/EBT_Return"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Swiped"
            },
            {
              "properties": {
                "PIN Pad - EBT": {
                  "$ref": "#/components/schemas/PinPad_Data_EBT"
                }
              }
            }
          ]
        },
        "XML_EBT_Inquiry": {
          "title": "XML - fsbainquiry",
          "required": [
            "ssl_transaction_type",
            "PIN Pad - EBT"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "fsbainquiry",
                  "description": "The fsbainquiry transaction checks the balance of a customerâ€™s account and verifies the amount of funds available."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Swiped"
            },
            {
              "properties": {
                "PIN Pad - EBT": {
                  "$ref": "#/components/schemas/PinPad_Data_EBT"
                }
              }
            }
          ]
        },
        "XML_EBT_ForcePurchase": {
          "title": "XML - fsforcepurchase",
          "required": [
            "ssl_transaction_type",
            "ssl_voucher_number"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "fsforcepurchase",
                  "description": "The fsforcepurchase transaction completes the authorization, which is obtained using a phone, of a food stamp purchase."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "$ref": "#/components/schemas/Force_Approval"
            },
            {
              "$ref": "#/components/schemas/Card"
            },
            {
              "properties": {
                "ssl_voucher_number": {
                  "type": "string",
                  "maxLength": 15,
                  "description": "Voucher clear number  \nDerived from the merchantâ€™s food stamp sales slip.\n"
                }
              }
            }
          ]
        },
        "XML_EBT_ForceReturn": {
          "title": "XML - fsforcereturn",
          "required": [
            "ssl_transaction_type",
            "ssl_amount",
            "ssl_voucher_number"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "fsforcereturn",
                  "description": "The fsforcereturn transaction completes the authorization, which is obtained using a phone, of a food stamp refund."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Refund_Amount"
            },
            {
              "properties": {
                "ssl_voucher_number": {
                  "type": "string",
                  "maxLength": 15,
                  "description": "Voucher clear number  \nDerived from the merchantâ€™s food stamp sales slip.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Force_Approval"
            },
            {
              "$ref": "#/components/schemas/Card"
            }
          ]
        },
        "XML_EBT_CashBenefitPurchase": {
          "title": "XML - cbpurchase",
          "required": [
            "ssl_transaction_type",
            "In-Person Payments",
            "PIN Pad - EBT"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "cbpurchase",
                  "description": "The cbpurchase transaction completes the authorization of a non-Food Stamp purchase."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount"
            },
            {
              "properties": {
                "ssl_cashback_amount": {
                  "description": "Cashback amount  \nAmount to pay the cardholder for making a debit purchase transaction.   \n**Format**: Number with 2 decimal places  \n**Important**: Only applicable to terminals that are set up with the cashback debit payment option.\n"
                }
              }
            },
            {
              "properties": {
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Swiped"
                    },
                    {
                      "$ref": "#/components/schemas/Manual_GT"
                    }
                  ]
                }
              }
            },
            {
              "properties": {
                "PIN Pad - EBT": {
                  "$ref": "#/components/schemas/PinPad_Data_EBT"
                }
              }
            }
          ]
        },
        "XML_EBT_CashBenefitInquiry": {
          "title": "XML - cbbainquiry",
          "required": [
            "ssl_transaction_type",
            "PIN Pad - EBT"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "cbbainquiry",
                  "description": "The cbbainquiry transaction returns the current available balance of the EBT account."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Swiped"
            },
            {
              "properties": {
                "PIN Pad - EBT": {
                  "$ref": "#/components/schemas/PinPad_Data_EBT"
                }
              }
            }
          ]
        },
        "XML_POSL_GetLink": {
          "title": "XML - poslgetlink",
          "required": [
            "ssl_transaction_type",
            "ssl_return_url",
            "Invoice Number",
            "Customer Information"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "poslgetlink",
                  "description": "Gets the link to the Avvance application and populates with customer information.\n\nAdditional setup is required for [Point-of-Sale lending](/products/xml-api/v1/point-of-sale-lending).\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount_POSL"
            },
            {
              "properties": {
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Information": {
                  "$ref": "#/components/schemas/Customer_Info_POSL"
                },
                "ssl_return_url": {
                  "type": "string",
                  "maxLength": 100,
                  "description": "URL to redirect to if loan is declined. Merchant can direct the Customer to a page and provide info on next steps.\n"
                }
              }
            }
          ]
        },
        "XML_POSL_Status": {
          "title": "XML - poslquery",
          "required": [
            "ssl_transaction_type",
            "ssl_posl_id"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "poslquery",
                  "description": "Shows the status of the application.   \n\nAdditional setup is required for [Point-of-Sale lending](/products/xml-api/v1/point-of-sale-lending).\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "properties": {
                "ssl_posl_id": {
                  "type": "string",
                  "maxLength": 100,
                  "description": "Unique ID for the point-of-sale lending application. \n"
                }
              }
            }
          ]
        },
        "XML_POSL_Void": {
          "title": "XML - poslvoid",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "poslvoid",
                  "description": "Only allowed for transactions that are approved but not settled.   \n\nAdditional setup is required for [Point-of-Sale lending](/products/xml-api/v1/point-of-sale-lending).\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            }
          ]
        },
        "XML_POSL_Return": {
          "title": "XML - poslreturn",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "poslreturn",
                  "description": "Only allowed for transactions that are approved and settled. Multiple refunds are allowed.   \n\nAdditional setup is required for [Point-of-Sale lending](/products/xml-api/v1/point-of-sale-lending).\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            }
          ]
        },
        "XML_POSL_Delete": {
          "title": "XML - posldelete",
          "required": [
            "ssl_transaction_type"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "type": "string",
                  "title": "posldelete",
                  "description": "Only allowed for transactions that are approved but not settled.   \n\nAdditional setup is required for [Point-of-Sale lending](/products/xml-api/v1/point-of-sale-lending).\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Transaction_ID"
            }
          ]
        },
        "XML_CC_Force": {
          "title": "XML - ccforce",
          "required": [
            "ssl_transaction_type",
            "Payment Options",
            "In-Person Payments",
            "PIN Pad - Swipe"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "deprecated": true,
                  "type": "string",
                  "title": "ccforce",
                  "description": "The ccforce transaction places a previously authorized transaction into the current unsettled batch.  \n\nCredit Card Force is deprecated and Elavon advises against using Credit Card Force in new integrations. This page will be maintained for legacy integrators but we recommend using Credit Card Complete.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount_MCC"
            },
            {
              "$ref": "#/components/schemas/Force_Approval"
            },
            {
              "properties": {
                "Payment Options": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Card"
                    },
                    {
                      "$ref": "#/components/schemas/Token"
                    }
                  ]
                },
                "Invoice Number": {
                  "$ref": "#/components/schemas/Invoice_Number"
                },
                "Customer Name": {
                  "$ref": "#/components/schemas/Customer_Name"
                },
                "Address Verification": {
                  "$ref": "#/components/schemas/Address_Verification"
                },
                "Generate Payment Token": {
                  "$ref": "#/components/schemas/Generate_Token"
                },
                "Optional Data": {
                  "$ref": "#/components/schemas/Optional_Data"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Tip Processing": {
                  "$ref": "#/components/schemas/Tip_Processing"
                },
                "Purchasing Cards": {
                  "$ref": "#/components/schemas/Purchasing_Cards"
                },
                "Currency Conversion": {
                  "description": "Verify terminal is setup with this option by sending ssl_transaction_type = terminalsetup with your credentials. Refer [terminal management](api-reference#tag/Terminal-Management) for terminal setup.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MCC"
                    },
                    {
                      "$ref": "#/components/schemas/DCC"
                    }
                  ]
                },
                "Travel Data": {
                  "$ref": "#/components/schemas/Travel_Data"
                },
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Swiped"
                    },
                    {
                      "$ref": "#/components/schemas/Encrypted"
                    },
                    {
                      "$ref": "#/components/schemas/Manual"
                    }
                  ]
                },
                "PIN Pad - Swipe": {
                  "$ref": "#/components/schemas/PinPad_Data_CC"
                }
              }
            }
          ]
        },
        "XML_CC_Credit": {
          "title": "XML - cccredit",
          "required": [
            "ssl_transaction_type",
            "In-Person Payments"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Schema_Type"
            },
            {
              "properties": {
                "ssl_transaction_type": {
                  "deprecated": true,
                  "type": "string",
                  "title": "cccredit",
                  "description": "The cccredit transaction is used to issue a return (refund) to a cardholderâ€™s credit card using full card number.  \n\nElavon advises against using Credit Card Credit to issue refunds. Refunds issued with cccredit can exceed the amount of the original transaction and bears an increased risk for fraud and chargebacks. We recommend using Credit Card Return to handle your refunds. ccreturn caps the total possible refunds on each transaction at the original amount and prevents even refunds from exceeding that amount.\n"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Credentials"
            },
            {
              "$ref": "#/components/schemas/Amount_MCC"
            },
            {
              "$ref": "#/components/schemas/Card"
            },
            {
              "properties": {
                "Generate Payment Token": {
                  "$ref": "#/components/schemas/Generate_Token"
                },
                "Doing Business As": {
                  "$ref": "#/components/schemas/DBA"
                },
                "Multi-Currency Conversion": {
                  "$ref": "#/components/schemas/MCC"
                },
                "Travel Data": {
                  "$ref": "#/components/schemas/Travel_Data"
                },
                "In-Person Payments": {
                  "description": "Contains credit card data.",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Manual"
                    },
                    {
                      "$ref": "#/components/schemas/Encrypted"
                    }
                  ]
                }
              }
            }
          ]
        },
        "Credentials": {
          "title": "Credentials",
          "required": [
            "ssl_account_id",
            "ssl_user_id",
            "ssl_pin"
          ],
          "properties": {
            "ssl_account_id": {
              "type": "integer",
              "maximum": 7,
              "description": "**Formerly known as ssl_merchant_id.**  \nElavon-assigned Converge Account ID (AID).\n"
            },
            "ssl_user_id": {
              "type": "string",
              "maxLength": 15,
              "description": "Converge user ID    \nThe user ID with hosted payment API user status that can send transaction requests through the terminal.\n"
            },
            "ssl_pin": {
              "type": "string",
              "maxLength": 64,
              "description": "Converge PIN    \nUnique identifier used to process the transaction request and submit to the Converge gateway.    \n**Important:** The ssl_user_id sending the transaction request must be associated with the identifer that will process the request.\n"
            },
            "ssl_vendor_id": {
              "type": "string",
              "maxLength": 8,
              "description": "**Required for certification.** Unique vendor identifier assigned by Elavon.\n"
            }
          }
        },
        "Session_Token": {
          "title": "Session Token",
          "required": [
            "ssl_txn_auth_token"
          ],
          "properties": {
            "ssl_txn_auth_token": {
              "type": "string",
              "maxLength": 50,
              "description": "Session token response\n"
            }
          }
        },
        "Apple_Session": {
          "title": "Apple Pay Get Session Request",
          "required": [
            "ewalletaction",
            "applepayUrl",
            "applepayDomain"
          ],
          "properties": {
            "ewalletaction": {
              "type": "string",
              "maxLength": 50,
              "description": "Action to perform with e-wallet",
              "enum": [
                "applepaySession"
              ]
            },
            "applepayUrl": {
              "type": "string",
              "maxLength": 200,
              "description": "Cert/Demo applepayUrl:  https://apple-pay-gateway-cert.apple.com/paymentservices/startSession \n\nProduction applepayUrl:  https://apple-pay-gateway.apple.com/paymentservices/startSession   \n"
            },
            "applepayDomain": {
              "type": "string",
              "maxLength": 200,
              "description": "Your domain registered with Apple Pay. Registered domain required for production. Apple Pay donâ€™t require domain verification in the sandbox environment."
            }
          }
        },
        "Custom_Fields": {
          "title": "Custom Fields",
          "description": "User defined fields for use on payment page configured in [Converge.](https://support.convergepay.com/s/article/Add-Custom-Fields-to-Your-Virtual-Terminal-Payment-Form)",
          "properties": {
            "my_custom_text_field": {
              "description": "A user created text field."
            },
            "my_custom_dropdown_field": {
              "description": "A user created dropdown field."
            }
          }
        },
        "Generate_Token": {
          "title": "Generate Card Token",
          "description": "Creates a credit card token to be used in place of a card number. \nVerify terminal is setup with this tokenization option by sending ssl_transaction_type = terminalsetup with your credentials. Refer [terminal management](api-reference#tag/Terminal-Management) for terminal setup.\n",
          "properties": {
            "ssl_get_token": {
              "type": "string",
              "maxLength": 1,
              "description": "Generate token indicator  \nIndicates whether to generate a token when submitting the card data.  \n- Y - Generate token\n- N - Do not generate token \n",
              "default": "N",
              "enum": [
                "Y",
                "N"
              ]
            },
            "ssl_add_token": {
              "type": "string",
              "maxLength": 1,
              "description": "Add to card manager indicator  \nIndicates whether to add token and cardholder details to card manager.    \n- Y - Add or update the generated token and the cardholder details if the transaction is approved\n- N - Do not add the token or the cardholder details \n",
              "default": "N",
              "enum": [
                "Y",
                "N"
              ]
            }
          }
        },
        "Amount": {
          "title": "Amount",
          "required": [
            "ssl_amount"
          ],
          "properties": {
            "ssl_amount": {
              "type": "integer",
              "maximum": 7,
              "description": "Transaction amount  \nAmount sent for authorization, approval, or recurring/installment.\n"
            }
          }
        },
        "Amount_POSL": {
          "title": "Amount",
          "required": [
            "ssl_amount"
          ],
          "properties": {
            "ssl_amount": {
              "type": "integer",
              "maximum": 7,
              "description": "Lending amount  \nAmount must be between $300 to $25,000    \n"
            }
          }
        },
        "Amount_MCC": {
          "title": "Amount",
          "required": [
            "ssl_amount"
          ],
          "properties": {
            "ssl_amount": {
              "type": "integer",
              "maximum": 7,
              "description": "Transaction amount  \nAmount sent for authorization, approval, or recurring/installment.   \n**Important:** When submitting transaction amounts to terminals that are set up with the multi currency credit payment option, make sure that the number of decimal places are correct as some currencies have 0 (like JPY) or 3 (like BHD) decimal places.     \n"
            }
          }
        },
        "Optional_Amount": {
          "title": "Amount",
          "properties": {
            "ssl_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "Optional amount  \nIf no amount is provided user will be prompted to enter the amount or an amount must be sent in the transaction request. \n"
            }
          }
        },
        "Refund_Amount": {
          "title": "Refund Amount",
          "properties": {
            "ssl_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "**Conditional**. Required for partial refunds  \nRefund amount  \nFor a partial refund, the amount must be less than the original purchase amount.  \nFor a full refund, this parameter must be null.   \n**Format:** Number with 2 decimal places.\n"
            }
          }
        },
        "Card_Optional": {
          "title": "Credit Card",
          "description": "The credit card information.",
          "properties": {
            "ssl_card_number": {
              "type": "integer",
              "maximum": 19,
              "description": "Card number as it appears on the card."
            },
            "ssl_exp_date": {
              "type": "integer",
              "maximum": 4,
              "description": "Card's expiry date    \nDate when the card becomes invalid.  \n**Format:** MMYY\n",
              "example": "MMYY"
            },
            "ssl_cvv2cvc2_indicator": {
              "type": "integer",
              "maximum": 1,
              "description": "Card Verification Value / Card Validation Code indicator  \nIndicates the status of the card security code or number during the transaction.    \n- 0 - Bypassed\n- 1 - Present\n- 2 - Illegible\n- 9 - Not Present\n",
              "enum": [
                0,
                1,
                2,
                9
              ]
            },
            "ssl_cvv2cvc2": {
              "type": "integer",
              "maximum": 4,
              "description": "Card Verification Value / Card Validation Code  \nCard security code or number printed on the card and commonly used for card not present payment transactions.\n"
            },
            "ssl_avs_zip": {
              "description": "Postal or ZIP code  \nZIP code on the cardholderâ€™s account or billing address.  \n(AVS) data compared with the postal or ZIP code on the card issuerâ€™s file. \n"
            },
            "ssl_avs_address": {
              "type": "string",
              "maxLength": 30,
              "description": "Address line 1  \nCommonly the house number and street name on the cardholderâ€™s / customerâ€™s account or billing address.  \nAddress Verification Service (AVS) data compared with the address on the card issuerâ€™s file.  \nRecommended for hand-keyed transactions to qualify for better interchange rates.     \n"
            }
          }
        },
        "Card": {
          "title": "Credit Card",
          "description": "The credit card information.",
          "required": [
            "ssl_card_number",
            "ssl_exp_date",
            "ssl_cvv2cvc2",
            "ssl_cvv2cvc2_indicator"
          ],
          "properties": {
            "ssl_card_number": {
              "type": "integer",
              "maximum": 19,
              "description": "Card number as it appears on the card."
            },
            "ssl_exp_date": {
              "type": "integer",
              "maximum": 4,
              "description": "Card's expiry date    \nDate when the card becomes invalid.  \n**Format:** MMYY  \n",
              "example": "MMYY"
            },
            "ssl_cvv2cvc2_indicator": {
              "type": "integer",
              "maximum": 1,
              "description": "Card Verification Value / Card Validation Code indicator  \nIndicates the status of the card security code or number during the transaction.    \n- 0 - Bypassed\n- 1 - Present\n- 2 - Illegible\n- 9 - Not Present    \n",
              "enum": [
                0,
                1,
                2,
                9
              ]
            },
            "ssl_cvv2cvc2": {
              "type": "integer",
              "maximum": 4,
              "description": "Card Verification Value / Card Validation Code  \nCard security code or number printed on the card and commonly used for card not present payment transactions.  \n"
            },
            "ssl_avs_zip": {
              "type": "string",
              "maxLength": 9,
              "description": "**Required for certification.**  \nPostal or ZIP code  \nZIP code on the cardholderâ€™s account or billing address.  \n(AVS) data compared with the postal or ZIP code on the card issuerâ€™s file.    \n"
            },
            "ssl_avs_address": {
              "type": "string",
              "maxLength": 30,
              "description": "Address Line 1 (**Recommended**)  \nCommonly the house number and street name on the cardholderâ€™s / customerâ€™s account or billing address.  \n"
            }
          }
        },
        "Card_Token": {
          "title": "Credit Card",
          "description": "The credit card information with token generation.",
          "required": [
            "ssl_card_number",
            "ssl_exp_date",
            "ssl_cvv2cvc2",
            "ssl_cvv2cvc2_indicator"
          ],
          "properties": {
            "ssl_card_number": {
              "type": "integer",
              "maximum": 19,
              "description": "Card number as it appears on the card."
            },
            "ssl_exp_date": {
              "type": "integer",
              "maximum": 4,
              "description": "Card's expiry date    \nDate when the card becomes invalid.  \n**Format:** MMYY  \n",
              "example": "MMYY"
            },
            "ssl_cvv2cvc2_indicator": {
              "type": "integer",
              "maximum": 1,
              "description": "Card Verification Value / Card Validation Code indicator  \nIndicates the status of the card security code or number during the transaction.    \n- 0 - Bypassed\n- 1 - Present\n- 2 - Illegible\n- 9 - Not Present    \n",
              "enum": [
                0,
                1,
                2,
                9
              ]
            },
            "ssl_cvv2cvc2": {
              "type": "integer",
              "maximum": 4,
              "description": "Card Verification Value / Card Validation Code  \nCard security code or number printed on the card and commonly used for card not present payment transactions.  \n"
            },
            "ssl_avs_zip": {
              "type": "string",
              "maxLength": 9,
              "description": "**Required for certification.**  \nPostal or ZIP code  \nZIP code on the cardholderâ€™s account or billing address.  \n(AVS) data compared with the postal or ZIP code on the card issuerâ€™s file.  \n"
            },
            "ssl_avs_address": {
              "type": "string",
              "maxLength": 30,
              "description": "Address line 1  (**Recommended**)  \nCommonly the house number and street name on the cardholderâ€™s / customerâ€™s account or billing address.  \n"
            },
            "Generate Token": {
              "$ref": "#/components/schemas/Generate_Token"
            }
          }
        },
        "Card_Generate_Token": {
          "title": "Credit Card",
          "description": "The credit card information with Token Generation.",
          "required": [
            "ssl_card_number",
            "ssl_exp_date"
          ],
          "properties": {
            "ssl_card_number": {
              "type": "integer",
              "maximum": 19,
              "description": "Card number as it appears on the card."
            },
            "ssl_exp_date": {
              "type": "integer",
              "maximum": 4,
              "description": "Card's expiry date    \nDate when the card becomes invalid.  \n**Format:** MMYY\n",
              "example": "MMYY"
            }
          }
        },
        "Transaction_ID": {
          "title": "Transaction ID",
          "required": [
            "ssl_txn_id"
          ],
          "properties": {
            "ssl_txn_id": {
              "type": "string",
              "maxLength": 46,
              "description": "Unique identifier returned from a previously run transaction."
            }
          }
        },
        "Recurring_ID": {
          "title": "Recurring ID",
          "required": [
            "ssl_recurring_id"
          ],
          "properties": {
            "ssl_recurring_id": {
              "type": "string",
              "maxLength": 50,
              "description": "Recurring ID  \nUnique identifier of the recurring record.  \nRequired for existing recurring transactions.\n"
            }
          }
        },
        "Installment_ID": {
          "title": "Installment ID",
          "required": [
            "ssl_installment_id"
          ],
          "properties": {
            "ssl_installment_id": {
              "type": "string",
              "maxLength": 50,
              "description": "Installment ID  \nUnique identifier of the installment record to be updated.\n"
            }
          }
        },
        "Token": {
          "title": "Token",
          "required": [
            "ssl_token"
          ],
          "properties": {
            "ssl_token": {
              "type": "string",
              "maxLength": 20,
              "description": "Credit card token\n\nImportant: \n- The token must already be stored in card manager.  \n- Use only if the terminal is set up with the tokenization terminal option.  \n"
            }
          }
        },
        "Token_Payment": {
          "title": "Token",
          "required": [
            "ssl_token",
            "ssl_cit_mit_cof_indicator"
          ],
          "properties": {
            "ssl_token": {
              "type": "string",
              "maxLength": 20,
              "description": "Credit card token   \n"
            },
            "ssl_cit_mit_cof_indicator": {
              "type": "string",
              "maxLength": 3,
              "description": "Consumer Initiated (CIT) or Merchant Initiated (MIT) Credential on File transaction indicator  \nIdentifies if the transaction is a Consumer Initiated (CIT) or a Merchant Initiated (MIT) Credential on File Transaction\n\n- **000** - Not a Consumer Initiated or Merchant Initiated Credential on File Transaction\n- **C01** - Consumer Initiated - Credential On file (Ad-hoc)\n- **C02** - Consumer Initiated - Standing Order\n- **C03** - Consumer Initiated - Subscription\n- **C04** - Consumer Initiated - Installment\n- **M01** - Merchant Initiated - Unscheduled Credential On file (Ad-hoc)\n- **M02** - Merchant Initiated - Standing Order\n- **M03** - Merchant Initiated - Subscription\n- **M04** - Merchant Initiated - Installment\n- **M05** - Merchant Initiated - Partial Shipment\n- **M06** - Merchant Initiated - Related/Delayed Charge\n- **M07** - Merchant Initiated - No Show Charge\n- **M08** - Merchant Initiated - Re-Submission\n",
              "enum": [
                "000",
                "C01",
                "C02",
                "C03",
                "C04",
                "M01",
                "M02",
                "M03",
                "M04",
                "M05",
                "M06",
                "M07",
                "M08"
              ]
            },
            "Recurring Flag": {
              "description": "**Required** for recurring or installments.\n",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Recurring_Flag"
                },
                {
                  "$ref": "#/components/schemas/Installment_Flag"
                }
              ]
            }
          }
        },
        "Gift_Card_Token": {
          "title": "Gift Card",
          "required": [
            "ssl_card_number",
            "ssl_exp_date"
          ],
          "properties": {
            "ssl_card_number": {
              "type": "integer",
              "maximum": 19,
              "description": "Card number as it appears on the card."
            },
            "ssl_exp_date": {
              "type": "integer",
              "maximum": 4,
              "description": "Card's expiry date    \nDate when the card becomes invalid.  \n**Format:** MMYY  \n",
              "example": "MMYY"
            },
            "ssl_security_code": {
              "type": "integer",
              "maximum": 6,
              "description": "Card security code  \nUnique verification code assigned to the cardholderâ€™s gift card account.  \n**Required** if the account is assigned with a security code.\n"
            },
            "ssl_get_token": {
              "type": "string",
              "maxLength": 1,
              "description": "Generate token indicator  \nIndicates whether to generate a token when submitting the card data.  \n- Y - Generate token\n- N - Do not generate token \n",
              "default": "N",
              "enum": [
                "Y",
                "N"
              ]
            }
          }
        },
        "Gift_Card": {
          "title": "Gift Card",
          "required": [
            "ssl_card_number",
            "ssl_exp_date"
          ],
          "properties": {
            "ssl_card_number": {
              "type": "integer",
              "maximum": 19,
              "description": "Card number as it appears on the card."
            },
            "ssl_exp_date": {
              "type": "integer",
              "maximum": 4,
              "description": "Card's expiry date    \nDate when the card becomes invalid.  \n**Format:** MMYY  \n",
              "example": "MMYY"
            },
            "ssl_security_code": {
              "type": "integer",
              "maximum": 6,
              "description": "Card security code  \nUnique verification code assigned to the cardholderâ€™s gift card account.  \n**Required** if the account is assigned with a security code.\n"
            }
          }
        },
        "Apple_Pay": {
          "title": "Apple Pay",
          "required": [
            "ssl_applepay_web"
          ],
          "properties": {
            "ssl_transaction_source": {
              "type": "string",
              "maxLength": 20,
              "description": "Transaction source  \nThe source of the transaction request.\n"
            },
            "ssl_applepay_web": {
              "type": "string",
              "maxLength": 4000,
              "description": "Session token returned from Apple Pay on the web session request."
            }
          }
        },
        "Apple_Pay_InApp": {
          "title": "Apple Pay In App",
          "required": [
            "ApplePayInApp"
          ],
          "properties": {
            "ApplePayInApp": {
              "type": "object",
              "description": "Apple Pay payment token"
            }
          }
        },
        "Click_to_Pay": {
          "title": "Click to Pay",
          "required": [
            "ssl_eWallet",
            "ssl_callback_url"
          ],
          "properties": {
            "ssl_eWallet": {
              "type": "string",
              "maxLength": 10,
              "description": "Wallet identifier  \nIndicates the wallet payment type offered by the merchant.  \n",
              "enum": [
                "MasterPass"
              ]
            },
            "ssl_callback_url": {
              "type": "string",
              "maxLength": 200,
              "description": "Callback URL  \nThe URL of the merchant that will host the response. \n"
            },
            "ssl_eWallet_shipping": {
              "type": "string",
              "maxLength": 1,
              "description": "Shipping information indicator  \nIndicates the shipping information to use for the wallet purchase.  \n- Y - Use Click to Pay shipping information\n- N - Use shipping information from merchantâ€™s website or payment form\n",
              "enum": [
                "Y",
                "N"
              ]
            },
            "ssl_product_string": {
              "type": "string",
              "maxLength": 200,
              "description": "Product string  \nList of products purchased from the merchant website. All the products appear as Line Items on the website along with the total amount.  \n**Format**: Unit Price::Quantity::Description::Image URL  \n**Multi-Product Format**: Unit Price::Quantity::8Description::Image URL\n"
            }
          }
        },
        "Google_Pay": {
          "title": "Google Pay",
          "required": [
            "ssl_transaction_source",
            "ssl_google_pay"
          ],
          "properties": {
            "ssl_transaction_source": {
              "type": "string",
              "maxLength": 20,
              "description": "Transaction source  \nThe source of the transaction request.\n"
            },
            "ssl_google_pay": {
              "type": "string",
              "maxLength": 4000,
              "description": "String returned from Google Pay API."
            }
          }
        },
        "PayPal": {
          "title": "PayPal Shipping Address",
          "properties": {
            "ssl_eWallet_shipping": {
              "type": "string",
              "maxLength": 1,
              "description": "Shipping information indicator  \nIndicates the shipping information to use for the wallet purchase.  \n- Y - Use PayPal shipping information\n- N - Use shipping information from merchantâ€™s website or payment form\n",
              "enum": [
                "Y",
                "N"
              ]
            }
          }
        },
        "Customer_Name": {
          "title": "Customer name",
          "description": "The cardholderâ€™s / customerâ€™s name.",
          "properties": {
            "ssl_first_name": {
              "type": "string",
              "maxLength": 50,
              "description": "First name  \nFirst name on the cardholderâ€™s / customerâ€™s account or billing address.  \n"
            },
            "ssl_last_name": {
              "type": "string",
              "maxLength": 50,
              "description": "Last name  \nLast name on the cardholderâ€™s / customerâ€™s account or billing address. \n"
            },
            "ssl_company": {
              "type": "string",
              "maxLength": 50,
              "description": "Company name  \nCompany name on the cardholderâ€™s / customerâ€™s account or billing address.  \n"
            }
          }
        },
        "Customer_Info_POSL": {
          "title": "Customer Info",
          "description": "Required personal information to start the application process.",
          "required": [
            "ssl_first_name",
            "ssl_last_name",
            "ssl_email",
            "ssl_phone"
          ],
          "properties": {
            "ssl_first_name": {
              "type": "string",
              "maxLength": 50,
              "description": "First Name  \nFirst name on the customer's application.  \n"
            },
            "ssl_last_name": {
              "type": "string",
              "maxLength": 50,
              "description": "Last Name  \nFirst name on the customer's application. \n"
            },
            "ssl_email": {
              "type": "string",
              "maxLength": 100,
              "description": "Email Address  \nThe customerâ€™s email address where the application link is sent.\n"
            },
            "ssl_phone": {
              "type": "integer",
              "maximum": 20,
              "description": "Mobile Phone  \nMobile Phone number for the customer that accepts text messages.        \n**Format**: Accepts dashes.\n"
            },
            "ssl_posl_email": {
              "type": "string",
              "maxLength": 1,
              "default": "Y",
              "description": "Send Email to Appliant Indicator  \nIndicates whether to send email link to the customer.  \n\n- Y - Send email application link to customer\n- N - Do not send email application link to customer\n",
              "enum": [
                "Y",
                "N"
              ]
            },
            "ssl_posl_sms": {
              "type": "string",
              "maxLength": 1,
              "default": "Y",
              "description": "Send Text to Appliant Indicator  \nIndicates whether to send text messages to the customer.  \n\n- Y - Send text application link to customer\n- N - Do not send text application link to customer\n",
              "enum": [
                "Y",
                "N"
              ]
            }
          }
        },
        "Billing_Address": {
          "title": "Billing Address",
          "description": "The cardholderâ€™s / customerâ€™s billing address.",
          "properties": {
            "ssl_avs_address": {
              "type": "string",
              "maxLength": 30,
              "description": "Address line 1  \nCommonly the house number and street name on the cardholderâ€™s / customerâ€™s account or billing address.  \n"
            },
            "ssl_address2": {
              "type": "string",
              "maxLength": 30,
              "description": "Address line 2  \nApartment or condominium unit number and floor number on the cardholderâ€™s or customerâ€™s account or billing address.      \n"
            },
            "ssl_city": {
              "type": "string",
              "maxLength": 30,
              "description": "City  \nCity name on the cardholderâ€™s / customerâ€™s account or billing address.\n"
            },
            "ssl_state": {
              "type": "string",
              "maxLength": 30,
              "description": "State code  \nState or province code on the cardholderâ€™s / customerâ€™s account or billing address.\n"
            },
            "ssl_avs_zip": {
              "type": "string",
              "maxLength": 9,
              "description": "Postal or ZIP code  \nZIP code on the cardholderâ€™s account or billing address.  \n(AVS) data compared with the postal or ZIP code on the card issuerâ€™s file.  \nRecommended for hand-keyed transactions to qualify for better interchange rates.  \n"
            },
            "ssl_country": {
              "type": "string",
              "maxLength": 50,
              "description": "Country ISO code  \nCountry ISO code on the cardholderâ€™s / customerâ€™s account or billing address.\n"
            },
            "ssl_email": {
              "type": "string",
              "maxLength": 100,
              "description": "Email address  \nThe cardholderâ€™s or customerâ€™s email address.\n"
            },
            "ssl_phone": {
              "type": "integer",
              "maximum": 20,
              "description": "Phone  \nPhone number on the cardholderâ€™s / customerâ€™s account or billing address.       \n**Format**: Accepts dashes.\n"
            }
          }
        },
        "Shipping_Address": {
          "title": "Shipping Address",
          "description": "The cardholderâ€™s / customerâ€™s shipping address.",
          "properties": {
            "ssl_ship_to_company": {
              "maxLength": 50,
              "description": "Recipientâ€™s company name"
            },
            "ssl_ship_to_first_name": {
              "maxLength": 50,
              "description": "Recipientâ€™s first name"
            },
            "ssl_ship_to_last_name": {
              "maxLength": 50,
              "description": "Recipientâ€™s last name"
            },
            "ssl_ship_to_address1": {
              "maxLength": 30,
              "description": "Recipientâ€™s address line 1"
            },
            "ssl_ship_to_address2": {
              "maxLength": 30,
              "description": "Recipientâ€™s address line 2"
            },
            "ssl_ship_to_city": {
              "maxLength": 30,
              "description": "Recipientâ€™s city"
            },
            "ssl_ship_to_state": {
              "maxLength": 30,
              "description": "Recipientâ€™s state code"
            },
            "ssl_ship_to_zip": {
              "maxLength": 10,
              "description": "ZIP code  \nZIP or postal code of the destination address.\n"
            },
            "ssl_ship_to_country": {
              "maxLength": 50,
              "description": "Country code  \nCountry ISO code of the destination address.\n"
            },
            "ssl_ship_to_phone": {
              "maxLength": 20,
              "description": "Phone  \nPhone number on the cardholderâ€™s / customerâ€™s account or billing address.       \n**Format**: Accepts dashes.\n"
            }
          }
        },
        "Verification": {
          "title": "Account Verification",
          "properties": {
            "ssl_verify": {
              "type": "string",
              "maxLength": 1,
              "description": "Account verification indicator  \nIndicates whether the Converge needs to verify the account before generating a token.    \n- Y - Verify account prior to token generation\n- N - Generate token without account verification\n",
              "enum": [
                "Y",
                "N"
              ]
            }
          }
        },
        "Address_Verification": {
          "title": "Address Verification",
          "properties": {
            "ssl_avs_address": {
              "type": "string",
              "maxLength": 30,
              "description": "Address line 1  \nCommonly the house number and street name on the cardholderâ€™s / customerâ€™s account or billing address.  \nAddress Verification Service (AVS) data compared with the address on the card issuerâ€™s file.  \nRecommended for hand-keyed transactions to qualify for better interchange rates.  \nRecommended if ssl_verify = **Y**.    \n"
            },
            "ssl_avs_zip": {
              "type": "string",
              "maxLength": 9,
              "description": "Postal or ZIP code  \nZIP code on the cardholderâ€™s account or billing address.  \n(AVS) data compared with the postal or ZIP code on the card issuerâ€™s file.  \nRecommended for hand-keyed transactions to qualify for better interchange rates.   \nRecommended if ssl_verify = **Y**. \n"
            }
          }
        },
        "Language": {
          "title": "Language",
          "description": "Languages supported by Hosted Payments and Lightbox.",
          "properties": {
            "ssl_language": {
              "type": "string",
              "description": "- en = US English  \n- fr = Canadian French  \n- es_la = Spanish **(Lightbox Only)**   \n- pt_br = Portuguese **(Lightbox Only)**   \n- de = German **(Lightbox Only)**     \n- zh_cn = Simplified Chinese **(Lightbox Only)**     \n- ja = Japanese **(Lightbox Only)**     \n- ko = Korean **(Lightbox Only)**     \n"
            }
          }
        },
        "DBA": {
          "title": "Doing Business As",
          "description": "How information should appear on a customer's credit card statement.   \nVerify terminal is setup with this option by sending ssl_transaction_type = terminalsetup with your credentials. Refer [terminal management](api-reference#tag/Terminal-Management) for terminal setup.\n",
          "required": [
            "ssl_dynamic_dba"
          ],
          "properties": {
            "ssl_dynamic_dba": {
              "type": "string",
              "maxLength": 21,
              "description": "Doing Business As (DBA) name    \nMerchant-defined descriptors that replace the merchantâ€™s business name on credit card statements.    \n**Format:** Prefix&#42;Descriptor  \n**Length:** Prefix = 3, 7, or 12, Asterisk = 1,  Descriptor = 21 - (Prefix + Asterisk)    \n**Important:** DBA Prefix must be set using DBA Payment Fields Settings UI if ssl_dynamic_dba is used.    \n**Example:** MANYMAG&#42;BAKERS MONTHLY\n"
            },
            "ssl_dynamic_dba_address": {
              "type": "string",
              "maxLength": 30,
              "description": "Dynamic DBA address   \nThe dynamic doing business as street address for this transaction.   \nThis value allows a merchant use an alternate address for this transaction.  \n"
            },
            "ssl_dynamic_dba_auth_type": {
              "type": "string",
              "maxLength": 1,
              "description": "Merchant ID\nThe dynamic DBA authorization type.  \n- F - Final\n- P - Pre-authorize\n",
              "enum": [
                "F",
                "P"
              ]
            },
            "ssl_dynamic_dba_city": {
              "type": "string",
              "maxLength": 13,
              "description": "Dynamic city name  \nThis value allows a merchant use an alternate city as part of the address for this transaction.,\n"
            },
            "ssl_dynamic_dba_country": {
              "type": "string",
              "maxLength": 3,
              "description": "Dynamic country ISO code  \nThis value allows a merchant specify an alternate country as part of the address for this transaction.\n"
            },
            "ssl_dynamic_dba_email": {
              "type": "string",
              "maxLength": 70,
              "description": "Dynamic email address  \nThis value allows a merchant specify an alternate email address for this transaction.  \n"
            },
            "ssl_dynamic_dba_mcc": {
              "type": "integer",
              "maximum": 4,
              "description": "Dynamic merchant category code  \nThis value allows a merchant specify an alternate merchant category for this transaction.\n"
            },
            "ssl_dynamic_dba_phone": {
              "type": "string",
              "maxLength": 20,
              "description": "Dynamic phone number  \nThis value allows a merchant specify an alternate phone number for this transaction.\n"
            },
            "ssl_dynamic_dba_postal": {
              "type": "string",
              "maxLength": 9,
              "description": "Dynamic postal or ZIP code  \nThis value allows a merchant set an alternate postal code for a transaction.\n"
            },
            "ssl_dynamic_dba_state": {
              "type": "string",
              "maxLength": 2,
              "description": "Dynamic state code  \nThis value allows a merchant set an alternate state code for a transaction.\n"
            },
            "ssl_dynamic_dba_submid": {
              "type": "integer",
              "maximum": 15,
              "description": "Dynamic sub-merchant ID  \nThis value allows a merchant set an alternate sub-merchant ID for a transaction.\n"
            },
            "ssl_dynamic_dba_taxid": {
              "type": "string",
              "maxLength": 14,
              "description": "Dynamic merchant tax ID  \nThis value allows a merchant set an alternate tax ID for this transaction.\n"
            }
          }
        },
        "DBA_Optional": {
          "title": "Doing Business As",
          "description": "How information should appear on a customer's credit card statement.   \nVerify terminal is setup with this option by sending ssl_transaction_type = terminalsetup with your credentials. Refer [terminal management](api-reference#tag/Terminal-Management) for terminal setup.\n",
          "properties": {
            "ssl_dynamic_dba": {
              "type": "string",
              "maxLength": 21,
              "description": "Doing Business As (DBA) name    \nMerchant-defined descriptors that replace the merchantâ€™s business name on credit card statements.    \n**Format:** Prefix&#42;Descriptor  \n**Length:** Prefix = 3, 7, or 12, Asterisk = 1,  Descriptor = 21 - (Prefix + Asterisk)    \n**Important:** DBA prefix must be set using DBA payment fields settings UI if ssl_dynamic_dba is used.    \n**Example:** MANYMAG&#42;BAKERS MONTHLY\n"
            },
            "ssl_dynamic_dba_address": {
              "type": "string",
              "maxLength": 30,
              "description": "Dynamic DBA address   \nThe dynamic doing business as street address for this transaction.   \nThis value allows a merchant use an alternate address for this transaction.\n"
            },
            "ssl_dynamic_dba_auth_type": {
              "type": "string",
              "maxLength": 1,
              "description": "Merchant ID\nThe dynamic doing business as authorization type.  \n- F - Final\n- P - Pre-authorize\n",
              "enum": [
                "F",
                "P"
              ]
            },
            "ssl_dynamic_dba_city": {
              "type": "string",
              "maxLength": 13,
              "description": "Dynamic city name  \nThis value allows a merchant use an alternate city as part of the address for this transaction.\n"
            },
            "ssl_dynamic_dba_country": {
              "type": "string",
              "maxLength": 3,
              "description": "Dynamic country ISO code  \nThis value allows a merchant specify an alternate country as part of the address for this transaction.\n"
            },
            "ssl_dynamic_dba_email": {
              "type": "string",
              "maxLength": 70,
              "description": "Dynamic email address  \nThis value allows a merchant specify an alternate email address for this transaction.\n"
            },
            "ssl_dynamic_dba_mcc": {
              "type": "integer",
              "maximum": 4,
              "description": "Dynamic merchant category code  \nThis value allows a merchant specify an alternate merchant category for this transaction.  \n"
            },
            "ssl_dynamic_dba_phone": {
              "type": "string",
              "maxLength": 20,
              "description": "Dynamic phone mumber  \nThis value allows a merchant specify an alternate phone number for this transaction.  \n"
            },
            "ssl_dynamic_dba_postal": {
              "type": "string",
              "maxLength": 9,
              "description": "Dynamic postal or ZIP code  \nThis value allows a merchant set an alternate postal code for a transaction.    \n"
            },
            "ssl_dynamic_dba_state": {
              "type": "string",
              "maxLength": 2,
              "description": "Dynamic state code  \nThis value allows a merchant set an alternate state code for a transaction.    \n"
            },
            "ssl_dynamic_dba_submid": {
              "type": "integer",
              "maximum": 15,
              "description": "Dynamic sub-merchant ID  \nThis value allows a merchant set an alternate sub-merchant ID for a transaction.    \n"
            },
            "ssl_dynamic_dba_taxid": {
              "type": "string",
              "maxLength": 14,
              "description": "Dynamic merchant tax ID  \nThis value allows a merchant set an alternate Tax ID for this transaction.  \n"
            }
          }
        },
        "Invoice_Number": {
          "title": "Invoice Number",
          "description": "This value is passed back to the card issuer and provided to the cardholder on their monthly statement to identify the transaction.  \n",
          "properties": {
            "ssl_invoice_number": {
              "type": "string",
              "maxLength": 25,
              "description": "Invoice/Ticket number  \nUnique identifier of the invoice or ticket.  \n**Required** for eComm and MOTO transactions.\n"
            }
          }
        },
        "Partial_Auth_Indicator": {
          "title": "Partial Authorization Indicator",
          "description": "Indicates whether the integrated application supports partial authorization or approval. \n",
          "properties": {
            "ssl_partial_auth_indicator": {
              "type": "integer",
              "maximum": 1,
              "description": "Valid values:  \n- 0 - Partial authorization not supported (Default)\n- 1 - Partial authorization supported  \n",
              "enum": [
                0,
                1
              ]
            }
          }
        },
        "Optional_Data": {
          "title": "Optional Data",
          "description": "Optional data to include in transactions.",
          "properties": {
            "ssl_merchant_txn_id": {
              "type": "string",
              "maxLength": 39,
              "description": "Merchant transaction ID    \nUnique transaction reference number sent to the downstream systems as part of the Encompass ROC data.\n"
            },
            "ssl_description": {
              "type": "string",
              "maxLength": 255,
              "description": "Merchant-defined transaction description  \nShort and custom text to describe the transaction.   \n"
            }
          }
        },
        "Payment_Schedule_Recurring": {
          "title": "Payment Schedule - Recurring",
          "description": "The schedule date that the payment should process.",
          "required": [
            "ssl_next_payment_date",
            "ssl_billing_cycle"
          ],
          "properties": {
            "ssl_next_payment_date": {
              "type": "string",
              "maxLength": 10,
              "description": "Next payment date  \nThe date of the next scheduled payment for the recurring record.  \n**Format:** MM/DD/YYYY\n"
            },
            "ssl_billing_cycle": {
              "type": "string",
              "maxLength": 12,
              "description": "Billing cycle  \n",
              "enum": [
                "DAILY",
                "WEEKLY",
                "BIWEEKLY",
                "SEMIMONTHLY",
                "MONTHLY",
                "BIMONTHLY",
                "QUARTERLY",
                "SEMESTER",
                "SEMIANNUALLY",
                "ANNUALLY",
                "SUSPENDED"
              ]
            },
            "ssl_bill_on_half": {
              "type": "integer",
              "maximum": 1,
              "description": "Half of the month or semimonthly indicator  \nIndicates when to process recurring payment transactions if ssl_billing_cycle = SEMIMONTHLY.  \n- 1 - 1st and 15th of the month\n- 2 - 15th and last day of the month\n",
              "enum": [
                1,
                2
              ]
            },
            "ssl_end_of_month": {
              "type": "string",
              "maxLength": 1,
              "description": "End of month indicator  \nIndicates whether to process the recurring transaction on the last day of the month.  \nSelect **Y** to process the recurring transaction:  \n- If ssl_billing_cycle = MONTHLY, BIMONTHLY, QUARTERLY, SEMESTER or SEMIANNUALLY and the Start Payment Date is April 30, June 30, September 30, November 30, February 28 (non-Leap year) or February 29 (Leap year).\n- If ssl_billing_cycle = ANNUALLY and the Start Payment Date is February 28 (non-Leap year) or February 29 (Leap year).\n",
              "enum": [
                "Y",
                "N"
              ]
            },
            "ssl_skip_payment": {
              "type": "string",
              "maxLength": 1,
              "description": "Skip payment indicator  \n- Y - Skip payment\n- N - Do not skip payment \n",
              "enum": [
                "Y",
                "N"
              ],
              "default": "N"
            }
          }
        },
        "Payment_Schedule_Recurring_Update": {
          "title": "Payment Schedule - Recurring Update",
          "description": "The schedule date that the payment should process.",
          "properties": {
            "ssl_next_payment_date": {
              "type": "string",
              "maxLength": 10,
              "description": "Next payment date  \nThe date of the next scheduled payment for the recurring record.  \n**Format:** MM/DD/YYYY\n"
            },
            "ssl_billing_cycle": {
              "type": "string",
              "maxLength": 12,
              "description": "Billing cycle  \n",
              "enum": [
                "DAILY",
                "WEEKLY",
                "BIWEEKLY",
                "SEMIMONTHLY",
                "MONTHLY",
                "BIMONTHLY",
                "QUARTERLY",
                "SEMESTER",
                "SEMIANNUALLY",
                "ANNUALLY",
                "SUSPENDED"
              ]
            },
            "ssl_bill_on_half": {
              "type": "integer",
              "maximum": 1,
              "description": "Half of the month or semimonthly indicator  \nIndicates when to process recurring payment transactions if ssl_billing_cycle = SEMIMONTHLY.  \n- 1 - 1st and 15th of the month\n- 2 - 15th and last day of the month\n",
              "enum": [
                1,
                2
              ]
            },
            "ssl_end_of_month": {
              "type": "string",
              "maxLength": 1,
              "description": "End of month indicator  \nIndicates whether to process the recurring transaction on the last day of the month  \nSelect **Y** to process the recurring transaction:  \n- If ssl_billing_cycle = MONTHLY, BIMONTHLY, QUARTERLY, SEMESTER or SEMIANNUALLY and the Start Payment Date is April 30, June 30, September 30, November 30, February 28 (non-Leap year) or February 29 (Leap year).\n- If ssl_billing_cycle = ANNUALLY and the Start Payment Date is February 28 (non-Leap year) or February 29 (Leap year).\n",
              "enum": [
                "Y",
                "N"
              ]
            },
            "ssl_skip_payment": {
              "type": "string",
              "maxLength": 1,
              "description": "Skip payment indicator  \n- Y - Skip payment\n- N - Do not skip payment \n",
              "enum": [
                "Y",
                "N"
              ],
              "default": "N"
            }
          }
        },
        "Payment_Schedule_Install": {
          "title": "Payment Schedule - Installment",
          "description": "The schedule date that the payment should process",
          "required": [
            "ssl_next_payment_date",
            "ssl_billing_cycle",
            "ssl_total_installments"
          ],
          "properties": {
            "ssl_total_installments": {
              "type": "integer",
              "maximum": 3,
              "description": "Number of payments  \nTotal number of installment payments for a transaction\n"
            },
            "ssl_next_payment_date": {
              "type": "string",
              "maxLength": 10,
              "description": "Next payment date  \nThe date of the next scheduled payment for the recurring record  \n**Format:** MM/DD/YYYY\n"
            },
            "ssl_billing_cycle": {
              "type": "string",
              "maxLength": 12,
              "description": "Billing cycle",
              "enum": [
                "DAILY",
                "WEEKLY",
                "BIWEEKLY",
                "SEMIMONTHLY",
                "MONTHLY",
                "BIMONTHLY",
                "QUARTERLY",
                "SEMESTER",
                "SEMIANNUALLY",
                "ANNUALLY",
                "SUSPENDED"
              ]
            },
            "ssl_bill_on_half": {
              "type": "integer",
              "maximum": 1,
              "description": "Half of the month or semimonthly indicator  \nIndicates when to process recurring payment transactions if ssl_billing_cycle = SEMIMONTHLY.  \n- 1 - 1st and 15th of the month\n- 2 - 15th and last day of the month\n",
              "enum": [
                1,
                2
              ]
            },
            "ssl_end_of_month": {
              "type": "string",
              "maxLength": 1,
              "description": "End of month indicator  \nIndicates whether to process the recurring transaction on the last day of the month.  \nSelect **Y** to process the recurring transaction:  \n- If ssl_billing_cycle = MONTHLY, BIMONTHLY, QUARTERLY, SEMESTER or SEMIANNUALLY and the start payment date is April 30, June 30, September 30, November 30, February 28 (non-leap year) or February 29 (leap year).\n- If ssl_billing_cycle = ANNUALLY and the Start Payment Date is February 28 (non-leap year) or February 29 (leap year).\n",
              "enum": [
                "Y",
                "N"
              ]
            },
            "ssl_skip_payment": {
              "type": "string",
              "maxLength": 1,
              "description": "Skip payment indicator  \n- Y - Skip payment\n- N - Do not skip payment \n",
              "enum": [
                "Y",
                "N"
              ],
              "default": "N"
            }
          }
        },
        "Payment_Schedule_Install_Update": {
          "title": "Payment Schedule - Installment Update",
          "description": "The schedule date that the payment should process.",
          "properties": {
            "ssl_total_installments": {
              "type": "integer",
              "maximum": 4,
              "description": "Number of payments  \nTotal number of installment payments for a transaction\n"
            },
            "ssl_next_payment_date": {
              "type": "string",
              "maxLength": 10,
              "description": "Next payment date  \nThe date of the next scheduled payment for the recurring record  \n**Format:** MM/DD/YYYY\n"
            },
            "ssl_billing_cycle": {
              "type": "string",
              "maxLength": 12,
              "description": "Billing cycle",
              "enum": [
                "DAILY",
                "WEEKLY",
                "BIWEEKLY",
                "SEMIMONTHLY",
                "MONTHLY",
                "BIMONTHLY",
                "QUARTERLY",
                "SEMESTER",
                "SEMIANNUALLY",
                "ANNUALLY",
                "SUSPENDED"
              ]
            },
            "ssl_bill_on_half": {
              "type": "integer",
              "maximum": 1,
              "description": "Half of the month or semimonthly indicator  \nIndicates when to process recurring payment transactions if ssl_billing_cycle = SEMIMONTHLY.  \n- 1 - 1st and 15th of the month\n- 2 - 15th and last day of the month\n",
              "enum": [
                1,
                2
              ]
            },
            "ssl_end_of_month": {
              "type": "string",
              "maxLength": 1,
              "description": "End of month indicator  \nIndicates whether to process the recurring transaction on the last day of the month.  \nSelect **Y** to process the recurring transaction:  \n- If ssl_billing_cycle = MONTHLY, BIMONTHLY, QUARTERLY, SEMESTER or SEMIANNUALLY and the start payment date is April 30, June 30, September 30, November 30, February 28 (non-leap year) or February 29 (leap year).\n- If ssl_billing_cycle = ANNUALLY and the start payment date is February 28 (non-leap year) or February 29 (leap year).\n",
              "enum": [
                "Y",
                "N"
              ]
            },
            "ssl_skip_payment": {
              "type": "string",
              "maxLength": 1,
              "description": "Skip payment indicator  \n- Y - Skip payment\n- N - Do not skip payment \n",
              "enum": [
                "Y",
                "N"
              ],
              "default": "N"
            }
          }
        },
        "Recurring_Flag": {
          "title": "Recurring Flag",
          "required": [
            "ssl_recurring_flag"
          ],
          "properties": {
            "ssl_recurring_flag": {
              "type": "integer",
              "maximum": 1,
              "description": "Recurring flag  \nIndicates whether the transaction is a recurring payment or not\n",
              "enum": [
                1
              ]
            }
          }
        },
        "Installment_Flag": {
          "title": "Installment Flag",
          "required": [
            "ssl_recurring_flag",
            "ssl_payment_count",
            "ssl_payment_number"
          ],
          "properties": {
            "ssl_recurring_flag": {
              "type": "integer",
              "maximum": 1,
              "description": "Installment flag  \nIndicates whether the transaction is an installment.\n",
              "enum": [
                2
              ]
            },
            "ssl_payment_number": {
              "type": "integer",
              "maximum": 1,
              "description": "Installment sequence number"
            },
            "ssl_payment_count": {
              "type": "integer",
              "maximum": 1,
              "description": "Installment count"
            }
          }
        },
        "MCC_HPP": {
          "title": "Multi-Currency Conversion",
          "description": "For Hosted Payment Page and Checkout.js.",
          "required": [
            "ssl_transaction_currency"
          ],
          "properties": {
            "ssl_transaction_currency": {
              "type": "string",
              "maxLength": 3,
              "description": "Transaction currency  \nThe currency [ISO code](/products/hosted-payment-page/v1/supported-dcc-currency-codes) that the merchant applies to their goods or services.  \n**Default**: USD or CAD. \n"
            }
          }
        },
        "MCC": {
          "title": "Multi-Currency Conversion",
          "required": [
            "ssl_transaction_currency"
          ],
          "properties": {
            "ssl_transaction_currency": {
              "type": "string",
              "maxLength": 3,
              "description": "Transaction currency  \nThe currency ISO code that the merchant applies to their goods or services.  \n**Default**: USD or CAD. \n"
            }
          }
        },
        "DCC": {
          "title": "Dynamic Currency Conversion",
          "required": [
            "id",
            "dccoption"
          ],
          "properties": {
            "id": {
              "type": "string",
              "maxLength": 25,
              "description": "The ID returned after running a credit card sale (ccsale) with a foreign card setup on a terminal with DCC.  \n"
            },
            "dccoption": {
              "type": "string",
              "maxLength": 1,
              "description": "Cardholder's response to accepting DCC \n",
              "enum": [
                "Y",
                "N"
              ]
            }
          }
        },
        "Travel_Data": {
          "title": "Travel Data",
          "description": "Only applicable to Airline industry \nVerify terminal is setup with this option by sending ssl_transaction_type = terminalsetup with your credentials. Refer [terminal management](api-reference#tag/Terminal-Management) for terminal setup.\n",
          "properties": {
            "ssl_departure_Date": {
              "type": "string",
              "maxLength": 10,
              "description": "Travel departure date  \nDate sent to the Merchant Airline Risk Monitoring System (MARMS) to monitor risks associated with advanced booking.  \nFormat: MM/DD/YYYY\n"
            },
            "ssl_completion_Date": {
              "type": "string",
              "maxLength": 10,
              "description": "Travel completion date  \nDate sent to the Merchant Airline Risk Monitoring System (MARMS) to monitor risks associated with advanced booking.  \nFormat: MM/DD/YYYY\n"
            }
          }
        },
        "Healthcare": {
          "title": "Healthcare",
          "description": "Only available for Converge terminals that have healthcare options enabled.\nVerify terminal is setup with this option by sending ssl_transaction_type = terminalsetup with your credentials. Refer [terminal management](api-reference#tag/Terminal-Management) for terminal setup.\n",
          "properties": {
            "ssl_healthcare_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "Healthcare amount  \nTotal amount in a healthcare transaction. ssl_healthcare_amount is equal to ssl_otc_amount + ssl_prescription_amount + ssl_clinic_other_amount + ssl_dental_amount. If this amount is not included in the transaction, then Converge will calculate based off the other healthcare fields. If you do include this field in the transaction, then Converge will validate the field. If the validation fails, Converge will decline the transaction.\n"
            },
            "ssl_otc_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "Over the counter amount  \nAmount of over the counter medical expenditures.  \nDefaults to 0.00 if not sent.\n"
            },
            "ssl_prescription_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "Prescription amount  \nAmount of prescription drug expenditures.  \nDefaults to 0.00 if not sent.\n"
            },
            "ssl_clinic_other_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "Clinic/Other amount  \nAmount of expenditures for clinic or other medical office services.  \nDefaults to 0.00 if not sent.\n"
            },
            "ssl_dental_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "Dental amount  \nAmount of dental expenditures  \nDefaults to 0.00 if not sent.\n"
            },
            "ssl_vision_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "Vision amount  \nAmount of vision expenditures  \nDefaults to 0.00 if not sent.\n"
            },
            "ssl_transit_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "Transit amount  \nAmount of transit expenditures  \nDefaults to 0.00 if not sent.  \nRequests that include transit amount must be sent separately from healthcare transactions that include other healthcare amount fields.\n"
            }
          }
        },
        "Card_On_File": {
          "title": "Non-Elavon Token",
          "description": "Required if using a credit card on file to manage your own tokens.",
          "required": [
            "ssl_approval_code",
            "ssl_ps2000_data",
            "ssl_entry_mode",
            "ssl_exp_date"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/Token_Payment"
            },
            {
              "properties": {
                "ssl_exp_date": {
                  "type": "integer",
                  "maximum": 4,
                  "description": "Card's Expiry Date    \nDate when the card becomes invalid.  \n**Format:** MMYY  \n"
                },
                "ssl_oar_data": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "Original Authorization Response Data (OAR)  \nInclude this parameter for all future card on file transactions using token or card number.  \n"
                },
                "ssl_ps2000_data": {
                  "type": "string",
                  "maxLength": 22,
                  "description": "PS2000 data  \nInclude this parameter for all future card on file transactions using token or card number.\n"
                },
                "ssl_approval_code": {
                  "type": "string",
                  "maximum": 6,
                  "description": "Transaction approval code    \nUnique code returned by the credit card processor that indicates the approval status of the transaction.\n"
                },
                "ssl_entry_mode": {
                  "type": "integer",
                  "maximum": 2,
                  "description": "Transaction entry indicator    \n- 12 - Manually - Token \n",
                  "enum": [
                    "12"
                  ]
                }
              }
            }
          ]
        },
        "Level_3": {
          "title": "Level 3",
          "description": "Used when performing transactions in government or corporate sectors.   \nVerify terminal is setup with this option by sending ssl_transaction_type = terminalsetup with your credentials. Refer [terminal management](api-reference#tag/Terminal-Management) for terminal setup.\n",
          "required": [
            "ssl_level3_indicator",
            "ssl_salestax_indicator"
          ],
          "properties": {
            "ssl_salestax_indicator": {
              "type": "string",
              "maxLength": 1,
              "description": "Sales tax indicator  \nWhether tax is included on a transaction. This field is required for level 3 transactions.  \nValid values:  \nVisa  \n- 0 - Tax Exempted Sale for Visa (card acceptor has the ability to provide tax amount, but goods/services were not taxable)\n- 1 - Sales tax included for Visa\n- 2 - Transaction not subject to tax for Visa  \n\nMasterCard  \n- Y - Sales tax included for MasterCard\n- N - Tax exempted sale for MasterCard (card acceptor has the ability to provide tax amount, but goods/services were not taxable)\n"
            },
            "ssl_level3_indicator": {
              "type": "string",
              "maxLength": 1,
              "description": "Level 3 indicator  \n- Y - Level 3 transaction (send Level 3 data to issuer)\n- N - Only save data locally (do not send Level 3 data to issuer)\n",
              "enum": [
                "Y",
                "N"
              ]
            },
            "ssl_ship_to_zip": {
              "type": "string",
              "maxLength": 9,
              "description": "ZIP code  \nZIP or postal code of the destination address\n"
            },
            "ssl_ship_to_country": {
              "type": "string",
              "maxLength": 3,
              "description": "Country code  \nCountry ISO code of the destination address\n"
            },
            "ssl_shipping_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "Freight or shipping amount\n"
            },
            "ssl_ship_from_postal_code": {
              "type": "string",
              "maxLength": 9,
              "description": "ZIP code  \nZIP or postal code of the originating address\n"
            },
            "ssl_discount_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "Discount amount  \nThe discount amount for the entire transaction (order)\n"
            },
            "ssl_duty_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "Duty amount  \nThe total charges for any import or export duties included in the transaction\n"
            },
            "ssl_national_tax_indicator": {
              "type": "string",
              "maxLength": 1,
              "description": "National tax indicator  \n*Visa*  \n- 0 - Tax not included in total purchase amount\n- 1 - Tax included in total purchase amount  \n*MasterCard*  \n- Y - Tax included in total purchase amount\n- N - Transaction not subject to tax\n- 0 or Space - Tax information unknown\n",
              "enum": [
                "0",
                "1",
                "Y",
                "N"
              ]
            },
            "ssl_national_tax_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "National or VAT amount"
            },
            "ssl_order_date": {
              "type": "integer",
              "maximum": 6,
              "description": "Order date  \nDate when the merchant received the order  \n**Format:** YYMMDD\n"
            },
            "ssl_other_tax": {
              "type": "integer",
              "maximum": 12,
              "description": "Other tax amount"
            },
            "ssl_summary_commodity_code": {
              "type": "string",
              "maxLength": 4,
              "description": "Summary commodity code  \nIndicates whether level 3 data is in the line item detail.\n"
            },
            "ssl_merchant_vat_number": {
              "type": "string",
              "maxLength": 20,
              "description": "Merchant VAT number  \nThe identification number assigned by the taxing authority to the merchant\n"
            },
            "ssl_customer_vat_number": {
              "type": "string",
              "maxLength": 13,
              "description": "Customer VAT number  \nThe identification number assigned by the VAT authority to the buying company\n"
            },
            "ssl_freight_tax_amount": {
              "type": "integer",
              "maximum": 12,
              "description": "VAT or tax amount  \nVAT or tax applied to the freight or shipping amount\n"
            },
            "ssl_vat_invoice_number": {
              "type": "string",
              "maxLength": 15,
              "description": "VAT invoice number"
            },
            "ssl_tracking_number": {
              "type": "string",
              "maxLength": 25,
              "description": "Shipping tracking number"
            },
            "ssl_shipping_company": {
              "type": "string",
              "maxLength": 50,
              "description": "Shipping company name"
            },
            "ssl_other_fees": {
              "type": "integer",
              "maximum": 12,
              "description": "Other fees"
            },
            "ssl_line_item_description": {
              "type": "string",
              "maxLength": 35,
              "description": "Line item description"
            },
            "ssl_line_Item_product_code": {
              "type": "string",
              "maxLength": 12,
              "description": "Line item product code  \nThe part or catalog number of the line item\n"
            },
            "ssl_line_Item_commodity_code": {
              "type": "string",
              "maxLength": 12,
              "description": "Line item commodity code  \nThe commodity code used to classify the line item\n"
            },
            "ssl_line_Item_quantity": {
              "type": "integer",
              "maximum": 12,
              "description": "Line item quantity  \nThe number of purchased units for the line item\n"
            },
            "ssl_line_Item_unit_of_measure": {
              "type": "string",
              "maxLength": 3,
              "description": "Line item measurement code  \nThe unit of measure that each line item is purchased in.\n"
            },
            "ssl_line_Item_unit_cost": {
              "type": "integer",
              "maximum": 12,
              "description": "Line item unit cost  \nThe cost of each purchased unit for the line item\n"
            },
            "ssl_line_Item_discount_indicator": {
              "type": "string",
              "maxLength": 1,
              "description": "Line item discount indicator  \nIndicates whether the line item is discounted  \n- Y - Item amount is discounted\n- N - Item amount is not discounted\n",
              "enum": [
                "Y",
                "N"
              ]
            },
            "ssl_line_Item_tax_indicator": {
              "type": "string",
              "maxLength": 1,
              "description": "Line item tax indicator  \nIndicates whether the line item is taxable.   \n- Y - Item amount is taxable\n- N - Item amount is not taxable\n",
              "enum": [
                "Y",
                "N"
              ]
            },
            "ssl_line_item_discount_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "Discount amount  \nThe discount amount for the entire line item\n"
            },
            "ssl_line_Item_tax_rate": {
              "type": "integer",
              "maximum": 4,
              "description": "Line item tax rate"
            },
            "ssl_line_Item_tax_amount": {
              "type": "integer",
              "maximum": 12,
              "description": "Line item tax amount    \nThe tax amount for each purchased unit\n"
            },
            "ssl_line_Item_tax_type": {
              "type": "string",
              "maxLength": 4,
              "description": "Line item tax type  \nThe type of tax applied to the line item\n"
            },
            "ssl_line_Item_extended_total": {
              "type": "integer",
              "maximum": 9,
              "description": "Line item extended amount  \nThe total cost of the line item for the detail record  \n**Computation rule:** quantity x unit price\n"
            },
            "ssl_line_Item_total": {
              "type": "integer",
              "maximum": 12,
              "description": "Line item total amount"
            },
            "ssl_line_Item_alternative_tax": {
              "type": "integer",
              "maximum": 12,
              "description": "Alternate tax ID  \nThe alternate tax identifier description for the line item\n"
            }
          }
        },
        "3D_Secure": {
          "title": "3D Secure2",
          "description": "Fields returned from sdk.web3dsFlow.  \nAllows consumers to authenticate themselves with their card issuer when making card-not-present (CNP) e-commerce purchases.    \nVerify terminal is setup with this option by sending ssl_transaction_type = terminalsetup with your credentials. Refer [terminal management](api-reference#tag/Terminal-Management) for terminal setup.\n",
          "required": [
            "ssl_eci_ind",
            "ssl_first_name",
            "ssl_last_name",
            "ssl_email"
          ],
          "properties": {
            "ssl_first_name": {
              "type": "string",
              "maxLength": 50,
              "description": "First name on the cardholder's / customer's account or billing address."
            },
            "ssl_last_name": {
              "type": "string",
              "maxLength": 50,
              "description": "Last name on the cardholder's / customer's account or billing address."
            },
            "ssl_email": {
              "type": "string",
              "maxLength": 100,
              "description": "The cardholder's or customer's email address.  \nSend this parameter if:   \n- The original transaction does not have the customer's email address.\n- If the email needs to be sent to a different email address.\n"
            },
            "ssl_eci_ind": {
              "type": "integer",
              "maximum": 1,
              "description": "eCommerce indicator  \n- 5 - Fully authenticated (if eci = 02 or 05)\n- 6 - Authentication attempted (if eci = 01 or 06)\n- 7 - Authentication failed or could not be completed (if eci = 07 or unavailable)\n",
              "enum": [
                5,
                6,
                7
              ]
            },
            "ssl_program_protocol": {
              "type": "integer",
              "maximum": 1,
              "description": "**Conditional**. Required if ssl_3ds_message_version is not provided. First digit of messageVersion"
            },
            "ssl_3dsecure_value": {
              "type": "string",
              "format": "Base64",
              "maxLength": 80,
              "description": "**Conditional**. Required if ssl_eci_id = 5  \nValue that may be used to provide proof of authentication\n"
            },
            "ssl_dir_server_tran_id": {
              "type": "string",
              "maxLength": 50,
              "description": "**Conditional**. Required if ssl_eci_id = 5 or ssl_eci_id = 6\nDirectory server transaction ID   \n"
            },
            "ssl_3ds_message_version": {
              "type": "string",
              "maxLength": 20,
              "description": "Message version"
            },
            "ssl_3ds_trans_status": {
              "type": "string",
              "maxLength": 1,
              "description": "Transaction status"
            },
            "ssl_3ds_trans_status_reason": {
              "type": "string",
              "maxLength": 20,
              "description": "Transaction status reason"
            },
            "ssl_3ds_server_trans_id": {
              "type": "string",
              "maxLength": 50,
              "description": "3DS server transaction ID"
            }
          }
        },
        "Purchasing_Cards": {
          "title": "Purchasing Cards",
          "description": "For use with corporate or expense cards.   \nVerify terminal is setup with this option by sending ssl_transaction_type = terminalsetup with your credentials. Refer [terminal management](api-reference#tag/Terminal-Management) for terminal setup.\n",
          "properties": {
            "ssl_customer_code": {
              "type": "string",
              "maxLength": 17,
              "description": "Customer code or purchase order number  \nCustomer ID or PO number specified in the billing statement of the cardholder  \n"
            },
            "ssl_salestax": {
              "type": "string",
              "maxLength": 8,
              "description": "Sales tax  \nTax amount to add to the purchase or sales amount  \nFor a tax exempt transaction, enter 0.00.  \n**Format**: Amount with 2 decimal places  \n"
            }
          }
        },
        "Service_Fees": {
          "title": "Service Fees",
          "description": "No additional fields need to be sent for service fees.    \nVerify terminal is setup with this option by sending ssl_transaction_type = terminalsetup with your credentials. Refer [terminal management](api-reference#tag/Terminal-Management) for terminal setup.\n"
        },
        "Account_Update_Search": {
          "title": "Account Update Search",
          "description": "Search filters to locate accounts",
          "required": [
            "ssl_search_start_date",
            "ssl_status_code"
          ],
          "properties": {
            "ssl_page_number": {
              "type": "integer",
              "description": "Page number  \nThe page number for queries that yield more than 1000 results  \nDefault value: 1\n"
            },
            "ssl_search_start_date": {
              "type": "string",
              "maxLength": 10,
              "description": "Search filter - start date  \nStart date for the transaction date range. If you submit a start date without an end date, Converge sets the value of ssl_search_end_date to ssl_search_start_date plus 31 days.  \nDefault: End date - 31 days   \nFormat: MM/DD/YYYY\n"
            },
            "ssl_search_end_date": {
              "type": "string",
              "maxLength": 10,
              "description": "Search filter - end date  \nEnd date for the transaction date range. If you submit an end date without a start date, Converge sets the value of ssl_search_start_date to ssl_search_end_date minus 31 days.  \nDefault: Start date + 31 days  \nFormat: MM/DD/YYYY\n"
            },
            "ssl_status_code": {
              "type": "integer",
              "maximum": 1,
              "description": "Account status  \nValid values:  \n- A - Account information updated\n- B - Expiry date updated\n- C - Account closed\n- D - Contact customer\n- G - Non-participating BIN\n",
              "enum": [
                "A",
                "B",
                "C",
                "D",
                "G"
              ]
            }
          }
        },
        "Transaction_Query": {
          "title": "Transaction query search parameters",
          "description": "Search only allows the use of a single card information, a date range or a single card information and date range. Search does not allow multiple card information data on a single request.",
          "required": [
            "Search Parameters"
          ],
          "properties": {
            "Search Parameters": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Date_Search_Fields"
                },
                {
                  "$ref": "#/components/schemas/Card_Number_Search"
                },
                {
                  "$ref": "#/components/schemas/Last_4_Search"
                },
                {
                  "$ref": "#/components/schemas/Transaction_ID"
                },
                {
                  "$ref": "#/components/schemas/Batch_Response_Search"
                },
                {
                  "$ref": "#/components/schemas/Invoice_Search"
                }
              ]
            }
          }
        },
        "Date_Search_Fields": {
          "title": "Date Search",
          "properties": {
            "ssl_search_start_date": {
              "type": "string",
              "maxLength": 10,
              "description": "Search filter - start date  \nStart date for the transaction date range. If you submit a start date without an end date, Converge sets the value of ssl_search_end_date to ssl_search_start_date plus 31 days.  \nDefault: End date - 31 days   \nFormat: MM/DD/YYYY\n"
            },
            "ssl_search_end_date": {
              "type": "string",
              "maxLength": 10,
              "description": "Search filter - end date  \nEnd date for the transaction date range. If you submit an end date without a start date, Converge sets the value of ssl_search_start_date to ssl_search_end_date minus 31 days.  \nDefault: Start date + 31 days  \nFormat: MM/DD/YYYY\n"
            },
            "Additional Search Filters": {
              "$ref": "#/components/schemas/Search_Filters"
            }
          }
        },
        "Card_Number_Search": {
          "title": "Search by Card",
          "required": [
            "ssl_card_number"
          ],
          "allOf": [
            {
              "properties": {
                "ssl_card_number": {
                  "description": "Card number as it appears on the card."
                }
              }
            },
            {
              "$ref": "#/components/schemas/Date_Search_Fields"
            },
            {
              "properties": {
                "Additional Search Filters": {
                  "$ref": "#/components/schemas/Search_Filters"
                }
              }
            }
          ]
        },
        "Last_4_Search": {
          "title": "Search by Last 4 Digits",
          "required": [
            "ssl_card_suffix"
          ],
          "allOf": [
            {
              "properties": {
                "ssl_card_suffix": {
                  "description": "Last 4 digits"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Date_Search_Fields"
            },
            {
              "properties": {
                "Additional Search Filters": {
                  "$ref": "#/components/schemas/Search_Filters"
                }
              }
            }
          ]
        },
        "Invoice_Search": {
          "title": "Search by Invoice",
          "required": [
            "ssl_invoice_number"
          ],
          "allOf": [
            {
              "properties": {
                "ssl_invoice_number": {
                  "description": "Invoice Number"
                }
              }
            },
            {
              "$ref": "#/components/schemas/Invoice_Number"
            },
            {
              "properties": {
                "Additional Search Filters": {
                  "$ref": "#/components/schemas/Search_Filters"
                }
              }
            }
          ]
        },
        "Batch_Response_Search": {
          "title": "Search by Batch Response",
          "required": [
            "ssl_settlement_batch_response"
          ],
          "properties": {
            "ssl_settlement_batch_response": {
              "description": "Main ID  \nIt can used to query a group of settled transactions from server by passing the GBOK number.  \nExample: GBOK 32910121808\n"
            }
          }
        },
        "Search_Filters": {
          "title": "Additional Search Filters",
          "properties": {
            "ssl_search_description": {
              "type": "string",
              "maxLength": 255,
              "description": "Search filter - Merchant-defined transaction description  \nRetrieve transactions based on the merchantâ€™s custom transaction description.\n"
            },
            "ssl_search_first_name": {
              "type": "string",
              "maxLength": 50,
              "description": "Search filter - first name  \nRetrieve transactions based on the first names sent in the original transactions.\n"
            },
            "ssl_search_last_name": {
              "type": "string",
              "maxLength": 50,
              "description": "Search filter - last name  \nRetrieve transactions based on the last names sent in the original transactions.\n"
            },
            "ssl_search_transaction_type": {
              "type": "string",
              "maxLength": 20,
              "description": "Search filter - transaction type  \nRetrieve transactions based on transaction types.\n"
            },
            "ssl_search_min_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "Search filter - minimum amount  \nMinimum value for the transaction amount range. Values must be equal to or less than ssl_search_max_amount.\n"
            },
            "ssl_search_max_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "Search filter - maximum amount  \nMaximum value for the transaction amount range. Values must be greater than ssl_search_min_amount.\n"
            },
            "ssl_search_card_type": {
              "type": "string",
              "maxLength": 10,
              "description": "Search filter - payment type  \nRetrieve transactions based on payment types\n",
              "enum": [
                "CASH",
                "CREDITCARD",
                "DEBITCARD",
                "FOODSTAMP",
                "GIFTCARD"
              ]
            },
            "ssl_search_card_short_description": {
              "description": "Search filter - card short description  \nRetrieve transactions based on card brands.  \n- AMEX - American Express\n- CUP - China Union Pay\n- DISC - Discover\n- MC - MasterCard\n- PP - PayPal\n- VISA - Visa\n",
              "enum": [
                "AMEX",
                "CUP",
                "DISC",
                "MC",
                "PP",
                "VISA"
              ]
            },
            "ssl_search_taxed": {
              "type": "string",
              "maxLength": 1,
              "description": "Search filter - taxed transaction  \nRetrieve transactions based on sales taxes\n",
              "enum": [
                "T",
                "F"
              ]
            },
            "ssl_merchant_txn_id": {
              "type": "string",
              "maxLength": 39,
              "description": "Merchant transaction ID    \nUnique transaction reference number sent to the downstream systems as part of the Encompass ROC data.\n"
            }
          }
        },
        "Settlement_Search_Options": {
          "title": "Settlement Search Options",
          "required": [
            "Settlement Search Options"
          ],
          "properties": {
            "Settlement Search Options": {
              "oneOf": [
                {
                  "type": "object",
                  "title": "Batch ID",
                  "required": [
                    "ssl_settlement_batch_id"
                  ],
                  "properties": {
                    "ssl_settlement_batch_id": {
                      "type": "string",
                      "maxLength": 50,
                      "description": "Batch ID  \nThis is a user-defined ID used to query a group of settled transaction from API.  \n"
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Batch Response",
                  "required": [
                    "ssl_settlement_batch_response"
                  ],
                  "properties": {
                    "ssl_settlement_batch_response": {
                      "type": "string",
                      "maxLength": 30,
                      "description": "Main ID  \nIt can used to query a group of settled transactions from server by passing the GBOK number.  \nExample: GBOK 32910121808\n"
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Correlation ID",
                  "required": [
                    "ssl_settlement_correlation_id"
                  ],
                  "properties": {
                    "ssl_settlement_correlation_id": {
                      "type": "string",
                      "maxLength": 36,
                      "description": "Correlation ID  \nSpecifies the number of transactions processed from eMoney. This is a user-defined ID which has specific format used to query settled transaction.\n- Characters with four hyphens\n"
                    }
                  }
                }
              ]
            }
          }
        },
        "Settlement_Options": {
          "title": "Settlement Options",
          "description": "Settling a single gift card or cash transaction is not supported, the gift or cash batch must be settled entirely.",
          "properties": {
            "Settlement Options": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Transaction_ID"
                },
                {
                  "type": "object",
                  "title": "Batch ID",
                  "required": [
                    "ssl_settlement_batch_id"
                  ],
                  "properties": {
                    "ssl_settlement_batch_id": {
                      "type": "string",
                      "maxLength": 50,
                      "description": "Batch ID  \nThis is a user-defined ID used to query a group of settled transaction from API.     \n"
                    }
                  }
                }
              ]
            }
          }
        },
        "Account_Type": {
          "title": "Account Type",
          "description": "Contains bank account data.",
          "required": [
            "ssl_account_type"
          ],
          "properties": {
            "ssl_account_type": {
              "type": "integer",
              "maximum": 1,
              "description": "Bank deposit account type  \n- 0 - Checking  \n- 1 - Savings  \n",
              "enum": [
                0,
                1
              ]
            }
          }
        },
        "Customer_Number": {
          "title": "Customer Number",
          "description": "Customer/Payee Account Number",
          "required": [
            "ssl_customer_number"
          ],
          "properties": {
            "ssl_customer_number": {
              "type": "integer",
              "maximum": 25,
              "description": "Customer/Payee Account Number"
            }
          }
        },
        "ACH_ECheck": {
          "title": "ACH eCheck",
          "description": "Captures check data manually.",
          "required": [
            "ssl_aba_number",
            "ssl_bank_account_number",
            "ssl_bank_account_type",
            "ssl_agree",
            "Customer Info"
          ],
          "properties": {
            "ssl_aba_number": {
              "type": "string",
              "maxLength": 9,
              "description": "Routing or transit number  \nUnique code assigned to the bank to be able to send and receive funds from other financial institutions.  \nThe routing number used for the demo environment is 490000018.\n"
            },
            "ssl_bank_account_number": {
              "type": "integer",
              "maxLength": 18,
              "description": "Bank account number  \nUnique identifier of the checking account.\n"
            },
            "ssl_bank_account_type": {
              "type": "integer",
              "maxLength": 1,
              "minLength": 1,
              "description": "Bank account type  \nIndicates the type of checking account.  \n- 0 - Personal\n- 1 - Business \n",
              "enum": [
                0,
                1
              ]
            },
            "Customer Info": {
              "title": "Customer Info",
              "required": [
                "Personal Name"
              ],
              "properties": {
                "Personal Name": {
                  "$ref": "#/components/schemas/ACH_Personal_Name"
                },
                "Business Name": {
                  "$ref": "#/components/schemas/ACH_Business_Name"
                }
              }
            },
            "ssl_agree": {
              "type": "integer",
              "maxLength": 1,
              "minLength": 1,
              "description": "Agreement indicator  \n\n- 0 - Does not agree\n- 1 - Agrees\n",
              "enum": [
                0,
                1
              ]
            },
            "ssl_check_number": {
              "type": "integer",
              "maximum": 16,
              "description": "Check number  \nUnique identifier commonly printed at the bottom of the check.\n"
            },
            "ssl_ecs_product_code": {
              "type": "string",
              "maxLength": 3,
              "description": "ACH processing option  \nOverrides the default ACH type specified in Converge.  \n\n- WEB - Web-based check processing: For re-occurring or single internet-initiated entry processed based on the customerâ€™s input of account information at a payment application website\n- TEL - Telephone-based check processing: For re-occurring or single entry in which an electronic payment item is created based on the customerâ€™s verbal authorization that is captured through phone\n- PPD - Pre-arranged payment and deposit: For re-occurring or single pre-arranged payment entry to a customerâ€™s account pursuant to a written authorization that is obtained from the customer\n- CCD - Corporate credit or debit: A debit entry is initiated by an organization to another organization.  \n\n**Important:**\n- WEB, TEL or PPD is required if ssl_bank_account_type = 0.  \n- CCD is required if ssl_bank_account_type = 1.\n",
              "enum": [
                "WEB",
                "TEL",
                "PPD",
                "CCD"
              ]
            }
          }
        },
        "ACH_ECheck_Optional": {
          "title": "ACH eCheck",
          "description": "Captures check data manually.",
          "properties": {
            "ssl_aba_number": {
              "type": "string",
              "maxLength": 9,
              "description": "Routing or transit number  \nUnique code assigned to the bank to be able to send and receive funds from other financial institutions.  \nThe routing number used for the demo environment is 490000018.\n"
            },
            "ssl_bank_account_number": {
              "type": "integer",
              "maxLength": 18,
              "description": "Bank account number  \nUnique identifier of the checking account\n"
            },
            "ssl_bank_account_type": {
              "type": "integer",
              "maxLength": 1,
              "minLength": 1,
              "description": "Bank account type  \nIndicates the type of checking account  \n- 0 - Personal\n- 1 - Business\n",
              "enum": [
                0,
                1
              ]
            },
            "Customer Info": {
              "title": "Customer Info",
              "properties": {
                "Personal Name": {
                  "$ref": "#/components/schemas/ACH_Personal_Name_Optional"
                },
                "Business Name": {
                  "$ref": "#/components/schemas/ACH_Business_Name"
                }
              }
            },
            "ssl_check_number": {
              "type": "integer",
              "maximum": 16,
              "description": "Check number  \nUnique identifier commonly printed at the bottom of the check.\n"
            },
            "ssl_ecs_product_code": {
              "type": "string",
              "maxLength": 3,
              "description": "ACH processing option  \nOverrides the default ACH type specified in Converge.  \n\n- WEB - Web-based check Processing: For re-occurring or single Internet-initiated entry processed based on the customerâ€™s input of account information at a payment application website.\n- TEL - Telephone-based check Processing: For re-occurring or single entry in which an electronic payment item is created based on the customerâ€™s verbal authorization that is captured through phone.\n- PPD - Pre-arranged payment and deposit: For re-occurring or single pre-arranged payment entry to a customerâ€™s account pursuant to a written authorization that is obtained from the customer.\n- CCD - Corporate credit or debit: A debit entry is initiated by an organization to another organization.  \n\n**Important:**\n- WEB, TEL or PPD is required if ssl_bank_account_type = 0.  \n- CCD is required if ssl_bank_account_type = 1.\n",
              "enum": [
                "WEB",
                "TEL",
                "PPD",
                "CCD"
              ]
            }
          }
        },
        "ACH_Personal_Name": {
          "title": "ACH Personal Info",
          "required": [
            "ssl_first_name",
            "ssl_last_name"
          ],
          "properties": {
            "ssl_first_name": {
              "type": "string",
              "maxLength": 50,
              "description": "First name  \nFirst name on the cardholderâ€™s / customerâ€™s account or billing address  \n"
            },
            "ssl_last_name": {
              "type": "string",
              "maxLength": 50,
              "description": "Last name  \nLast name on the cardholderâ€™s / customerâ€™s account or billing address\n"
            }
          }
        },
        "ACH_Personal_Name_Optional": {
          "title": "ACH Personal Info",
          "properties": {
            "ssl_first_name": {
              "type": "string",
              "maxLength": 50,
              "description": "First name  \nFirst name on the cardholderâ€™s / customerâ€™s account or billing address\n"
            },
            "ssl_last_name": {
              "type": "string",
              "maxLength": 50,
              "description": "Last name  \nLast name on the cardholderâ€™s / customerâ€™s account or billing address\n"
            }
          }
        },
        "ACH_Business_Name": {
          "title": "ACH Business Info",
          "properties": {
            "ssl_company": {
              "type": "string",
              "maxLength": 50,
              "description": "Company name  \nCompany name on the cardholderâ€™s / customerâ€™s account or billing address  \n"
            }
          }
        },
        "Batch_Import_Transaction": {
          "title": "Batch Import Transaction",
          "required": [
            "ssl_date",
            "ssl_file_name"
          ],
          "properties": {
            "ssl_date": {
              "type": "string",
              "maxLength": 10,
              "description": "Transaction date  \nThe date at which the batch was imported\n"
            },
            "ssl_file_name": {
              "type": "string",
              "maxLength": 255,
              "description": "Name of the batch file that was imported \nValid file extensions are CSV and XML.\n"
            },
            "ssl_result": {
              "type": "string",
              "maxLength": 1,
              "description": "Transaction result  \nValid values:  \n- A- Approved transactions\n- D- Declined transactions and errors  \n\nAny value other than A and D returns all transactions\n",
              "enum": [
                "A",
                "D"
              ]
            }
          }
        },
        "Batch_Import_File": {
          "title": "Batch Import Credit Cards",
          "required": [
            "ssl_import_file",
            "ssl_response_file"
          ],
          "properties": {
            "ssl_import_file": {
              "type": "string",
              "maxLength": 255,
              "description": "Import file  \nDescribes the path, location, file name, and file extension of the import file.  \nImportant:  \n- Length of the file name (including the file extension) must not exceed 30 characters.\n- Valid file extensions are CSV and XML.    \n"
            },
            "ssl_response_file": {
              "type": "string",
              "maxLength": 25,
              "description": "Import response file friendly name  \nEasy to understand file name of the import response file.  \nImportant: The value must not contain a forward slash, backward slash, colon, asterisk, question mark, quotation mark, greater than symbol, less than symbol or a pipe character.\n"
            },
            "ssl_do_merchant_email": {
              "type": "string",
              "maxLength": 1,
              "description": "Send email to merchant indicator  \nIndicates whether to send emails to the merchant when transactions are approved or declined.  \n\n- T - Send email to merchant\n- F - Do not send email to merchant\n\nDefaults to T if ssl_do_merchant_email is null.\nDefault value - Set in terminal: E-mail form - Email notification setup - Email options - Notify merchant of transaction approval / notify merchant of transaction decline\n",
              "enum": [
                "T",
                "F"
              ]
            },
            "ssl_merchant_email": {
              "type": "string",
              "maxLength": 100,
              "description": "Merchantâ€™s email address  \nIf null and ssl_do_merchant_email = T, Converge sends the email to the email address of the terminal.\n"
            },
            "ssl_result_format": {
              "type": "string",
              "maxLength": 5,
              "description": "Result format  \nWhen set to ASCII, virtual terminal generates a plain text key-value document.\n",
              "enum": [
                "ASCII",
                "HTML",
                "XML"
              ]
            },
            "ssl_receipt_link_method": {
              "type": "string",
              "maxLength": 5,
              "description": "Receipt link method  \nIndicates the method for displaying the receipt and data of an approved or declined transaction.  \nValid value:  REDG - Does not display the receipt and redirects the data to the URL specified in ssl_receipt_link_url\n",
              "enum": [
                "REDG"
              ]
            },
            "ssl_receipt_link_url": {
              "type": "string",
              "maxLength": 255,
              "description": "Receipt URL  \nTarget URL of the button or the link created at the bottom of the receipt for an approved or declined transaction.  \nImportant: If ssl_result_format = ASCI and ssl_receipt_link_method = REDG, Converge ignores the value of this parameter.\n"
            },
            "ssl_error_url": {
              "type": "string",
              "maxLength": 255,
              "description": "Error URL  \nThe URL where the integrated application will send the errorCode, errorName, and errorMessage values.\n"
            }
          }
        },
        "EOD_Emails": {
          "title": "End of day transaction email",
          "properties": {
            "ssl_email": {
              "type": "string",
              "maxLength": 100,
              "description": "Email address  \nThe cardholder's or customer's email address.  \nSend this parameter if:  \n- The original transaction does not have the customer's email address.  \n- If the email needs to be sent to a different email address.\n"
            },
            "ssl_update_email": {
              "type": "string",
              "maxLength": 1,
              "description": "Update email address indicator  \nIndicates whether to modify the cardholderâ€™s email address after sending the order confirmation email.  \nValid values:  \nY - Update email address\nN - Do not update email address.  \n\nImportant: If ssl_update_email = Y, send the new email address using the ssl_email parameter.\n"
            },
            "ssl_do_merchant_email": {
              "type": "string",
              "maxLength": 1,
              "description": "Send email to merchant indicator  \nIndicates whether to send emails to the merchant when transactions are approved or declined.  \n\n- T - Send email to merchant\n- F - Do not send email to merchant\n\nDefaults to T if ssl_do_merchant_email is null.\nDefault value - Set in terminal: E-mail form - Email notification setup - Email options - Notify merchant of transaction approval / notify merchant of transaction decline\n",
              "enum": [
                "T",
                "F"
              ]
            },
            "ssl_do_customer_email": {
              "type": "string",
              "maxLength": 1,
              "description": "Send email to customer indicator  \nIndicates whether to send emails to customers when transactions are approved or declined.    \n\n- T - Send email to customer \n- F - Do not send email to customer  \n\nDefaults to T if the customerâ€™s email address is present in the original transaction and ssl_do_customer_email is null.  \nDefault value - Set in terminal: E-mail form - Email notification setup - Email options - Notify customer of transaction approval / notify customer of transaction decline\n",
              "enum": [
                "T",
                "F"
              ]
            }
          }
        },
        "Swiped": {
          "title": "Swiped",
          "required": [
            "ssl_track_data"
          ],
          "properties": {
            "ssl_track_data": {
              "type": "string",
              "maxLength": 76,
              "description": "Raw track I and/or II data    \nTrack data captured from the cardâ€™s magnetic stripe. The data includes beginning and ending sentinels, cardâ€™s expiry date, cardholderâ€™s first and last name.      \n"
            }
          }
        },
        "Encrypted": {
          "title": "Encrypted",
          "required": [
            "ssl_enc_track_data",
            "ssl_ksn"
          ],
          "properties": {
            "ssl_enc_track_data": {
              "type": "string",
              "maxLength": 160,
              "description": "Encrypted raw track I and/or II data \nEncrypted Track I and/or II data captured from the cardâ€™s magnetic stripe when using an encrypting device. The data includes beginning and ending sentinels, cardâ€™s expiry date, cardholderâ€™s first name and last name.   \n"
            },
            "ssl_ksn": {
              "type": "string",
              "maxLength": 20,
              "description": "Key Serial Number    \nUnique identifier generated from the swiped payment card and returned by the encrypting device. The KSN encrypts the PAN data through the DUKPT method.   \n"
            },
            "ssl_enc_track_data_format": {
              "description": "Encrypted raw track I and/or II data format    \nFormat of the track data captured from the cardâ€™s magnetic stripe.   \n**Required** if card is read from a ROAM device.  \n",
              "enum": [
                "ROAM_GENERIC_TDES_EMV"
              ]
            },
            "ssl_mobile_id": {
              "type": "string",
              "maxLength": 50,
              "description": "Mobile ID   \nUnique assigned mobile identification number of each mobile device in use as determined by the merchant.  \n**Optional** for encrypting devices.\n"
            },
            "ssl_vm_mobile_source": {
              "type": "string",
              "description": "Mobile source    \n- BBERRY - BlackBerry mobile device \n- ADROID - Android mobile device  \n- ITUNES - Apple mobile device  \n- WIN8 - Windows WIN8-based Device  \n- NOMOB - Non-mobile Device   \n",
              "enum": [
                "BBERRY",
                "ADROID",
                "ITUNES",
                "WIN8",
                "NOMOB"
              ]
            }
          }
        },
        "Manual": {
          "title": "Manual",
          "required": [
            "ssl_card_number",
            "ssl_exp_date",
            "ssl_ksn"
          ],
          "properties": {
            "ssl_card_number": {
              "type": "integer",
              "maximum": 19,
              "description": "Card number as it appears on the card."
            },
            "ssl_exp_date": {
              "type": "integer",
              "maximum": 4,
              "description": "Card's expiry date    \nDate when the card becomes invalid.  \n**Format:** MMYY  \n",
              "example": "MMYY"
            },
            "ssl_ksn": {
              "type": "string",
              "maxLength": 20,
              "description": "Key Serial Number    \nUnique identifier generated from the swiped payment card and returned by the encrypting device. The KSN encrypts the PAN data through the DUKPT method.   \n"
            },
            "ssl_card_present": {
              "type": "string",
              "maxLength": 1,
              "description": "Card present indicator   \nIndicates whether the card is physically present during the transaction.    \nRecommended for hand-keyed transactions.   \n",
              "default": "N",
              "enum": [
                "Y",
                "N"
              ]
            },
            "ssl_cvv2cvc2": {
              "type": "integer",
              "maximum": 4,
              "description": "Card Verification Value / Card Validation Code  \nCard security code or number printed on the card and commonly used for card not present payment transactions. See [CVV2/CVC2 response codes](/products/xml-api/v1/response-codes#cvv2cvc2) for a complete list of CVV2 / CVC2 response codes. \n"
            },
            "ssl_cvv2cvc2_indicator": {
              "type": "integer",
              "maximum": 1,
              "description": "Card Verification Value / Card Validation Code indicator  \nIndicates the status of the card security code or number during the transaction.    \n- 0 - Bypassed\n- 1 - Present\n- 2 - Illegible\n- 9 - Not Present    \n",
              "enum": [
                0,
                1,
                2,
                9
              ]
            }
          }
        },
        "Manual_GT": {
          "title": "Manual",
          "required": [
            "ssl_card_number",
            "ssl_exp_date"
          ],
          "properties": {
            "ssl_card_number": {
              "type": "integer",
              "maximum": 19,
              "description": "Card number as it appears on the card."
            },
            "ssl_exp_date": {
              "type": "integer",
              "maximum": 4,
              "description": "Card's expiry date    \nDate when the card becomes invalid.  \n**Format:** MMYY\n",
              "example": "MMYY"
            },
            "ssl_card_present": {
              "type": "string",
              "maxLength": 1,
              "description": "Card present indicator   \nIndicates whether the card is physically present during the transaction.    \nRecommended for hand-keyed transactions.\n",
              "default": "N",
              "enum": [
                "Y",
                "N"
              ]
            }
          }
        },
        "Chip": {
          "title": "Chip",
          "required": [
            "ssl_tlv_enc"
          ],
          "properties": {
            "ssl_tlv_enc": {
              "type": "string",
              "format": "Base16",
              "maxLength": 4,
              "description": "Encrypted tag length value  \nData defining the EMV record. The data includes the following:  \n- Total authorization amount\n- Tip amount (if available)  \n"
            }
          }
        },
        "Force_Approval": {
          "title": "Force Approval",
          "required": [
            "ssl_approval_code"
          ],
          "properties": {
            "ssl_approval_code": {
              "type": "integer",
              "maximum": 6,
              "description": "Voucher clear approval code  \nUnique code obtained using a phone.\n"
            }
          }
        },
        "PinPad_Data_CC_GenerateToken": {
          "title": "PIN Pad - Swipe",
          "properties": {
            "ssl_partial_auth_indicator": {
              "type": "integer",
              "maximum": 1,
              "default": 0,
              "enum": [
                0,
                1
              ]
            },
            "ssl_mobile_id": {
              "type": "string",
              "maxLength": 50,
              "description": "Mobile ID   \nUnique assigned mobile identification number of each mobile device in use as determined by the merchant.  \n**Optional** for encrypting devices.\n"
            },
            "ssl_pos_mode": {
              "type": "integer",
              "maximum": 2,
              "description": "POS device data entry capability    \nIndicates how the POS device captures card data.   \n- 01 - Manual entry only  \n- 02 - Magnetic swipe-capable  \n- 03 - Proximity or contactless-capable  \n- 04 - EMV chip-capable (ICC) - Contact only with magnetic stripe  \n- 05 - EMV chip-capable (ICC) - Dual interface with magnetic stripe\n",
              "enum": [
                "01",
                "02",
                "03",
                "04",
                "05"
              ]
            },
            "ssl_entry_mode": {
              "type": "integer",
              "maximum": 2,
              "description": "Transaction entry indicator    \nIndicates how the track data was captured.    \n**Valid values:**   \n- 01 - Manually entered - Card not present \n- 02 - Manually entered - Card present  \n- 12 - Manually - Token \n- 03 - Swiped\n",
              "enum": [
                "01",
                "02",
                "12",
                "03"
              ]
            },
            "ssl_lane_number": {
              "type": "integer",
              "maximum": 8,
              "description": "Lane number  \nA unique identifier for point of sale devices that can be passed to satisfy Mastercardâ€™s unique Terminal ID requirement\n"
            },
            "ssl_partial_shipment_flag": {
              "type": "string",
              "maxLength": 1,
              "description": "Partial shipment indicator\nIndicates whether the integrated application supports partial shipment.\nMust be set to Y if performing a multi-partial completion.\n",
              "enum": [
                "Y",
                "N"
              ]
            }
          }
        },
        "PinPad_Data_CC": {
          "title": "PIN Pad - Swipe",
          "required": [
            "ssl_mobile_id"
          ],
          "properties": {
            "ssl_partial_auth_indicator": {
              "type": "integer",
              "maximum": 1,
              "default": 0,
              "enum": [
                0,
                1
              ]
            },
            "ssl_mobile_id": {
              "type": "string",
              "maxLength": 50,
              "description": "Mobile ID   \nUnique assigned mobile identification number of each mobile device in use as determined by the merchant.  \n**Optional** for encrypting devices.\n"
            },
            "ssl_vm_mobile_source": {
              "type": "string",
              "description": "Mobile Source    \n- BBERRY - BlackBerry mobile device  \n- ADROID - Android mobile device  \n- ITUNES - Apple mobile device  \n- WIN8 - Windows WIN8-based Device  \n- NOMOB - Non-mobile Device   \n",
              "enum": [
                "BBERRY",
                "ADROID",
                "ITUNES",
                "WIN8",
                "NOMOB"
              ]
            },
            "ssl_pos_mode": {
              "type": "integer",
              "maximum": 2,
              "description": "POS device data entry capability    \nIndicates how the POS device captures card data.   \n- 01 - Manual entry only  \n- 02 - Magnetic swipe-capable  \n- 03 - Proximity or contactless-capable  \n- 04 - EMV chip-capable (ICC) - Contact only with magnetic stripe  \n- 05 - EMV chip-capable (ICC) - Dual interface with magnetic stripe \n",
              "enum": [
                "01",
                "02",
                "03",
                "04",
                "05"
              ]
            },
            "ssl_entry_mode": {
              "type": "integer",
              "maximum": 2,
              "description": "Transaction entry indicator    \nIndicates how the track data was captured.    \n**Valid values:**   \n- 01 - Manually entered - Card not present \n- 02 - Manually entered - Card present  \n- 12 - Manually - Token \n- 03 - Swiped \n",
              "enum": [
                "01",
                "02",
                "12",
                "03"
              ]
            },
            "ssl_lane_number": {
              "type": "integer",
              "maximum": 8,
              "description": "Lane number  \nA unique identifier for point of sale devices that can be passed to satisfy Mastercardâ€™s unique terminal ID requirement\n"
            },
            "ssl_partial_shipment_flag": {
              "type": "string",
              "maxLength": 46,
              "description": "Partial shipment indicator\nIndicates whether the integrated application supports partial shipment.\nMust be set to Y if performing a multi-partial completion.\n",
              "enum": [
                "Y",
                "N"
              ]
            }
          }
        },
        "PinPad_Data_EMV_Swipe": {
          "title": "PIN Pad - EMV Swipe",
          "required": [
            "ssl_pos_mode",
            "ssl_entry_mode"
          ],
          "properties": {
            "ssl_partial_auth_indicator": {
              "type": "integer",
              "maximum": 1,
              "default": 0,
              "enum": [
                0,
                1
              ]
            },
            "ssl_mobile_id": {
              "type": "string",
              "maxLength": 50,
              "description": "Mobile ID   \nUnique assigned mobile identification number of each mobile device in use as determined by the merchant.  \n**Optional** for encrypting devices.\n"
            },
            "ssl_vm_mobile_source": {
              "type": "string",
              "description": "Mobile source    \n- BBERRY - BlackBerry mobile device  \n- ADROID - Android mobile device  \n- ITUNES - Apple mobile device  \n- WIN8 - Windows WIN8-based Device  \n- NOMOB - Non-mobile Device   \n",
              "enum": [
                "BBERRY",
                "ADROID",
                "ITUNES",
                "WIN8",
                "NOMOB"
              ]
            },
            "ssl_pos_mode": {
              "type": "integer",
              "maximum": 2,
              "description": "POS device data entry capability    \nIndicates how the POS device captures card data.   \n- 04 - EMV chip-capable (ICC) - Contact only with magnetic stripe  \n- 05 - EMV chip-capable (ICC) - Dual interface with magnetic stripe \n",
              "enum": [
                "04",
                "05"
              ]
            },
            "ssl_entry_mode": {
              "type": "integer",
              "maximum": 2,
              "description": "Transaction entry indicator    \nIndicates how the track data was captured.    \n**Valid values:**   \n- 03 - Swiped \n- 08 - EMV (ICC) Magnetic stripe read when chip failed to read\n",
              "enum": [
                "03",
                "08"
              ]
            },
            "ssl_dukpt": {
              "maximum": 20,
              "description": "DUKPT  \nValue used to encrypt the PIN of the cardholder. \n"
            },
            "ssl_pin_block": {
              "maximum": 16,
              "description": "Encrypted PIN block  \nThe encrypted personal identification number entered by the debit cardholder to authenticate ownership of the card.\n**Required** if ssl_card_type = Debit    \n"
            },
            "ssl_lane_number": {
              "type": "integer",
              "maximum": 8,
              "description": "Lane number  \nA unique identifier for point of sale devices that can be passed to satisfy Mastercardâ€™s unique Terminal ID requirement\n"
            }
          }
        },
        "PinPad_Data_EMV": {
          "title": "PIN Pad - EMV Chip",
          "required": [
            "ssl_pos_mode",
            "ssl_entry_mode",
            "ssl_mobile_id"
          ],
          "properties": {
            "ssl_partial_auth_indicator": {
              "type": "integer",
              "maximum": 1,
              "default": 0,
              "enum": [
                0,
                1
              ]
            },
            "ssl_dukpt": {
              "maximum": 20,
              "description": "DUKPT  \nValue used to encrypt the PIN of the cardholder. \n"
            },
            "ssl_pin_block": {
              "maximum": 16,
              "description": "Encrypted PIN block  \nThe encrypted personal identification number entered by the debit cardholder to authenticate ownership of the card.\n**Required** if ssl_card_type = Debit \n"
            },
            "ssl_mobile_id": {
              "type": "string",
              "maxLength": 50,
              "description": "Mobile ID   \nUnique assigned mobile identification number of each mobile device in use as determined by the merchant.  \n**Optional** for encrypting devices.\n"
            },
            "ssl_vm_mobile_source": {
              "type": "string",
              "description": "Mobile source    \n- BBERRY - BlackBerry mobile device  \n- ADROID - Android mobile device  \n- ITUNES - Apple mobile device  \n- WIN8 - Windows WIN8-based Device  \n- NOMOB - Non-mobile Device   \n",
              "enum": [
                "BBERRY",
                "ADROID",
                "ITUNES",
                "WIN8",
                "NOMOB"
              ]
            },
            "ssl_pos_mode": {
              "type": "integer",
              "maximum": 2,
              "description": "POS device data entry capability    \nIndicates how the POS device captures card data.   \n- 03 - Proximity or contactless-capable  \n- 04 - EMV chip-capable (ICC) - Contact only with magnetic stripe  \n- 05 - EMV chip-capable (ICC) - Dual interface with magnetic stripe \n",
              "enum": [
                "03",
                "04",
                "05"
              ]
            },
            "ssl_entry_mode": {
              "type": "integer",
              "maximum": 2,
              "description": "Transaction entry indicator    \nIndicates how the track data was captured.    \n**Valid values:**   \n- 05 - EMV (ICC) with CVV or iCVV \n- 06 - EMV (ICC) Proximity Read \n- 07 - EMV (ICC) without CVV or iCVV   \n- 08 - EMV (ICC) Magnetic stripe read when chip failed to read\n",
              "enum": [
                5,
                6,
                7,
                8
              ]
            },
            "ssl_lane_number": {
              "type": "integer",
              "maximum": 8,
              "description": "Lane number  \nA unique identifier for point of sale devices that can be passed to satisfy Mastercardâ€™s unique terminal ID requirement\n"
            },
            "ssl_partial_shipment_flag": {
              "type": "string",
              "maxLength": 46,
              "description": "Partial shipment indicator\nIndicates whether the integrated application supports partial shipment.\nMust be set to Y if performing a multi-partial completion.\n",
              "enum": [
                "Y",
                "N"
              ]
            },
            "ssl_decline_offline": {
              "type": "string",
              "maxLength": 1,
              "description": "Decline transaction indicator  \nIndicates the action for the EMV card or reader to take when terminals are offline.  \nValid values:  \n- Y - Chip card or reader declines transaction\n- N - Chip card or reader approves transaction\n",
              "enum": [
                "Y",
                "N"
              ]
            }
          }
        },
        "PinPad_Data_Debit": {
          "title": "PIN Pad - Debit",
          "required": [
            "ssl_dukpt",
            "ssl_key_pointer",
            "ssl_pin_block"
          ],
          "properties": {
            "ssl_dukpt": {
              "maximum": 20,
              "description": "DUKPT  \nValue used to encrypt the PIN of the cardholder \n"
            },
            "ssl_key_pointer": {
              "type": "string",
              "maxLength": 1,
              "description": "Triple-DES DUKPT Pointer  \nIndicates the encryption key used on US debit transactions  \n",
              "enum": [
                "T - Triple-DES DUKPT"
              ]
            },
            "ssl_pin_block": {
              "maximum": 16,
              "description": "Encrypted PIN block  \nThe encrypted personal identification number entered by the debit cardholder to authenticate ownership of the card\n**Required** if ssl_card_type = Debit \n"
            }
          }
        },
        "PinPad_Data_EBT": {
          "title": "PIN Pad - EBT",
          "required": [
            "ssl_dukpt",
            "ssl_key_pointer",
            "ssl_pin_block"
          ],
          "properties": {
            "ssl_dukpt": {
              "maximum": 20,
              "description": "DUKPT  \nValue used to encrypt the PIN of the cardholder. \n"
            },
            "ssl_key_pointer": {
              "type": "string",
              "maxLength": 1,
              "description": "Triple-DES DUKPT pointer  \nIndicates the encryption key used on US debit transactions  \n",
              "enum": [
                "T - Triple-DES DUKPT"
              ]
            },
            "ssl_pin_block": {
              "maximum": 16,
              "description": "Encrypted PIN block  \nThe encrypted personal identification number entered by the debit cardholder to authenticate ownership of the card\n**Required** if ssl_card_type = Debit \n"
            }
          }
        },
        "Cashback_Amount": {
          "title": "Cashback",
          "required": [
            "ssl_cashback_amount",
            "ssl_tender_amount"
          ],
          "properties": {
            "ssl_cashback_amount": {
              "description": "Cashback amount  \nAmount to pay the cardholder for making a debit purchase transaction.   \n**Format**: Number with 2 decimal places  \n**Important**: Only applicable to terminals that are set up with the Cashback debit payment option.\n"
            },
            "ssl_tender_amount": {
              "type": "string",
              "maxLength": 80,
              "description": "New discounted amount  \nIndicates the transaction amount less the discount for the offer, if available. \n"
            }
          }
        },
        "Debit_Return": {
          "title": "Debit return",
          "required": [
            "ssl_account_type",
            "ssl_original_time",
            "ssl_original_date",
            "ssl_reference_number"
          ],
          "properties": {
            "ssl_account_type": {
              "type": "integer",
              "maximum": 1,
              "description": "Bank deposit account type  \n- 0 - Checking  \n- 1 - Savings  \n",
              "enum": [
                0,
                1
              ]
            },
            "ssl_original_time": {
              "type": "integer",
              "maximum": 6,
              "description": "Original transaction time  \nThe date of the original transaction.   \n**Format**: HHMMSS\n"
            },
            "ssl_original_date": {
              "type": "integer",
              "maximum": 6,
              "description": "Original transaction date  \nThe time of the original transaction.  \n**Format**: HHMMSS\n"
            },
            "ssl_reference_number": {
              "type": "integer",
              "maximum": 8,
              "description": "Transaction reference number  \nUnique transaction reference number returned in the authorization response message of the original transaction\n"
            }
          }
        },
        "Signature": {
          "title": "Signature",
          "required": [
            "ssl_signature_image",
            "ssl_image_type"
          ],
          "description": "Only use on terminals with Healthcare enabled.",
          "properties": {
            "ssl_signature_image": {
              "type": "string",
              "format": "Base64",
              "description": "Signature image  \nDigital version of the cardholderâ€™s signature\n"
            },
            "ssl_image_type": {
              "type": "string",
              "maxLength": 3,
              "description": "Signature image format",
              "enum": [
                "GIF",
                "TIF",
                "JGP",
                "PNG"
              ]
            }
          }
        },
        "EBT_Return": {
          "title": "EBT Debit Return",
          "required": [
            "ssl_reference_number"
          ],
          "properties": {
            "ssl_original_time": {
              "type": "integer",
              "maximum": 6,
              "description": "Original transaction time  \nThe date of the original transaction.   \n**Format**: HHMMSS\n"
            },
            "ssl_original_date": {
              "type": "integer",
              "maximum": 6,
              "description": "Original transaction date  \nThe time of the original transaction.  \n**Format**: HHMMSS\n"
            },
            "ssl_reference_number": {
              "type": "integer",
              "maximum": 8,
              "description": "Transaction reference number  \nUnique transaction reference number returned in the authorization response message of the original transaction\n"
            }
          }
        },
        "Tip_Processing": {
          "title": "Tip Processing",
          "properties": {
            "ssl_tip_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "Tip or gratuity amount  \nAmount to add or update to the transaction amount.    \nSet to 0.00 to reset or remove the original tip amount.  \nThe last and most current tip sent will be processed as the tip amount.  \n**Format**: Number with 2 decimal places. \n"
            },
            "ssl_server": {
              "type": "string",
              "maxLength": 8,
              "description": "Server ID  \nUnique identifier of the clerk, waiter, waitress or cashier.  \nSend if updating the server ID of the existing transaction.\n"
            },
            "ssl_shift": {
              "type": "string",
              "maxLength": 25,
              "description": "Shift ID  \nUnique identifier of the time period, course or service type  \nSend if updating the server ID of the existing transaction.\n"
            }
          }
        },
        "Update_Tip": {
          "title": "Update Tip",
          "description": "Use only on terminals that are set up with the Market Segment set to *Service*.",
          "properties": {
            "ssl_tip_amount": {
              "type": "integer",
              "maximum": 11,
              "description": "Tip or gratuity amount  \nAmount to add or update to the transaction amount.    \nSet to 0.00 to reset or remove the original tip amount.  \nThe last and most current tip sent will be processed as the tip amount.  \n**Format**: Number with 2 decimal places. \n"
            },
            "ssl_server": {
              "type": "string",
              "maxLength": 8,
              "description": "Server ID  \nUnique identifier of the clerk, waiter, waitress or cashier.  \nSend if updating the server ID of the existing transaction.\n"
            },
            "ssl_shift": {
              "type": "string",
              "maxLength": 4,
              "description": "Shift ID  \nUnique identifier of the time period, course or service type.  \nSend if updating the server ID of the existing transaction.\n"
            },
            "ssl_verify_tip": {
              "type": "string",
              "maxLength": 1,
              "description": "Account verification indicator  \nIndicates whether the online incremental authorization for tip adjustment is performed.     \n- Y - Perform online incremental authorization for tip adjustment.  \n**Important:** Only applicable to authonly transactions  \n- N - Do not perform online incremental authorization for tip adjustment\n",
              "enum": [
                "Y",
                "N"
              ]
            },
            "ssl_cardholder_tip_amount": {
              "type": "string",
              "maxLength": 46,
              "description": "Amount to add or update when Converge processes the original transaction as a Dynamic Currency Conversion (DCC) transaction and that the authorized amount is in the cardholderâ€™s currency.  \nTo reset or remove the original tip amount from a DCC transaction, set the value to 0.00.  \n**Format:** Number with 2 decimal places  \n**Important:** Only applicable to terminals set up for the Service market segment and with the Dynamic Currency credit payment option. \n"
            }
          }
        },
        "Auth_Lifecycle": {
          "title": "Authorization Lifecycle",
          "required": [
            "ssl_account_type"
          ],
          "properties": {
            "ssl_auth_lifecycle_indicator": {
              "type": "integer",
              "maximum": 6,
              "description": "Authorization lifecycle indicator  \nIndicates the life cycle of the authorization.  \n\n- 0 - No time period specified\n- 1 - Days\n- 2 - Hours\n- 3 - Minutes       \n",
              "enum": [
                0,
                1,
                2,
                3
              ]
            },
            "ssl_auth_lifecycle_duration": {
              "type": "integer",
              "maximum": 6,
              "description": "Duration of authorization lifecycle  \nValid values:  \n- 00-99  \nImportant: 00 is the equivalent of no hold being placed. \n"
            }
          }
        },
        "Interac": {
          "title": "Interac",
          "properties": {
            "ssl_sys_trace_audit_no": {
              "description": "System trace audit number  \nUsed by the POS to uniquely identify the transaction to the host. This is used in the MAC calculation.\n"
            },
            "ssl_processing_code": {
              "type": "integer",
              "maximum": 6,
              "description": "Processing code  \nTypes of Canadian debit transaction:  \n- 000000 - Debit purchase from the default account (flash only)\n- 001000 - Debit purchase from savings\n- 002000 - Debit purchase from checking\n- 091000 - Debit purchase with cashback from savings\n- 092000 - Debit purchase with cashback from checking\n- 200000 - Debit return from the default account (flash only)\n- 200010 - Debit return from savings\n- 200020 - Debit return from checking\n- 220000 - Void of a debit purchase from the default account (flash only)\n- 220010 - Void of a debit purchase from savings\n- 220020 - Void of a debit purchase from checking\n- 020000 - Void of a debit return from the default account (flash Only)\n- 021000 - Void of a debit return from savings\n- 022000 - Void of a debit return from checking\n",
              "enum": [
                "000000",
                "001000",
                "002000",
                "091000",
                "092000",
                "200000",
                "200010",
                "200020",
                "220000",
                "220010",
                "220020",
                "020000",
                "021000",
                "022000"
              ]
            },
            "ssl_mac_value": {
              "type": "string",
              "format": "Base16",
              "maxLength": 8,
              "description": "Message authentication code  \nVerifies that the Canadian debit message was not altered when transferred over a telecommunications network.\n"
            }
          }
        },
        "Integrated_Circuit": {
          "title": "Integrated Circuit",
          "properties": {
            "ssl_icc_isr": {
              "type": "string",
              "maxLength": 84,
              "description": "Issuer script results  \nDescribes the results of the terminal script processing.\n"
            },
            "ssl_icc_tsi": {
              "type": "string",
              "maxLength": 1,
              "description": "Transaction status information  \n- A - Accepted\n- E - Error detected\n"
            }
          }
        },
        "ECS_Paper_Check": {
          "title": "ACH Paper Check",
          "description": "Uses a check reader device to capture data.",
          "required": [
            "ssl_micr_data",
            "ssl_check_image"
          ],
          "properties": {
            "ssl_micr_data": {
              "type": "string",
              "maxLength": 80,
              "description": "Unformatted Magnetic Ink Character Recognition (MICR) data  \nThe exact MICR line from the check including the spaces and symbols. Replace the symbols with the following letters:  \n- T - Transit symbol\n- O - On-US symbol\n- A - Amount symbol\n- D - Dash symbol\n"
            },
            "ssl_check_image": {
              "type": "string",
              "format": "Base64",
              "description": "Check image  \nScanned and encoded image of the check.\n"
            },
            "ssl_drivers_license_number": {
              "type": "string",
              "maxLength": 16,
              "description": "Drivers license number  \nUnique identification code as it appears on the license.  \n**Important**: Required for guarantee transactions.\n"
            },
            "ssl_drivers_license_phone_number": {
              "type": "integer",
              "maximum": 10,
              "description": "Phone number  \nContact number (includes the area code) as it appears on the license.  \n**Important:** Required for guarantee transactions.\n"
            },
            "ssl_drivers_license_state": {
              "type": "string",
              "maxLength": 2,
              "description": "State code  \nState code as it appears on the license.  \n**Important**: Required for guarantee transactions. \n"
            }
          }
        },
        "Gift_Swiped": {
          "title": "Swiped Gift Card",
          "required": [
            "ssl_track_data",
            "ssl_ksn"
          ],
          "properties": {
            "ssl_track_data": {
              "type": "string",
              "maxLength": 76,
              "description": "Raw track I and/or II data    \nTrack data captured from the cardâ€™s magnetic stripe. The data includes beginning and ending sentinels, cardâ€™s expiry date, cardholderâ€™s first and last name.      \n"
            },
            "ssl_ksn": {
              "type": "string",
              "maxLength": 20,
              "description": "Key Serial Number    \nUnique identifier generated from the swiped payment card and returned by the encrypting device. The KSN encrypts the PAN data through the DUKPT method.   \n"
            }
          }
        },
        "Gift_Encrypted": {
          "title": "Encrypted Gift Card",
          "required": [
            "ssl_enc_track_data",
            "ssl_ksn"
          ],
          "properties": {
            "ssl_enc_track_data": {
              "type": "string",
              "maxLength": 160,
              "description": "Encrypted raw track I and/or II data \nEncrypted Track I and/or II data captured from the cardâ€™s magnetic stripe when using an encrypting device. The data includes beginning and ending sentinels, cardâ€™s expiry date, cardholderâ€™s first name and last name.   \n"
            },
            "ssl_ksn": {
              "type": "string",
              "maxLength": 20,
              "description": "Key Serial Number    \nUnique identifier generated from the swiped payment card and returned by the encrypting device. The KSN encrypts the PAN data through the DUKPT method.   \n"
            }
          }
        },
        "EMV_DCC_Token": {
          "title": "EMV DCC Token",
          "required": [
            "ssl_dcc_token"
          ],
          "properties": {
            "ssl_dcc_token": {
              "type": "string",
              "maxLength": 128,
              "description": "See XML - emvdcccheck for the EMV DCC process.\nssl_dcc_token is required for an EMV transasaction to process as DCC.\nssl_dcc_token will part of the response for eligible DCC cards from transaction type EMVDCCCHECK.\nssl_dcc_token has a 15 min time limit from creation. After that time you will receive a 4017 error.\n"
            }
          }
        },
        "Advanced_Integration_Settings": {
          "title": "Advanced Integration Settings",
          "description": "Optional advanced integration settings. These elements should be defined with caution - only for advanced integrators.\n",
          "properties": {
            "ssl_pin_entry_capability": {
              "type": "string",
              "maxLength": 1,
              "description": "Pin entry capability\n\n\nThis value is used to indicate the capability of the terminal to capture a PIN. \nValid values:\n- 0 - Unknown\n- 1 - Can accept and pass an online PIN\n- 2 - Cannot accept and pass an online PIN\n- 3 - Can accept and pass an online PIN (mPOS - Software Based)\n- 8 - PIN Pad is not functional\n",
              "enum": [
                0,
                1,
                2,
                3,
                8
              ]
            },
            "ssl_terminal_type": {
              "type": "string",
              "maxLength": 2,
              "description": "Terminal type\n\n\nThis value is used to indicate the type of POS device used at the point of authorization.  \nValid values:\n- 00 - Attended Terminal\n- 01 - Limited Amount Terminal (CAT)\n- 02 - Unattended Terminal (ATM)\n- 03 - Unattended Terminal (CAT)\n- 04 - No Terminal Used\n- 05 - Mobile Device\n- 09 - Unknown\n",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                9
              ]
            },
            "ssl_cat_indicator": {
              "type": "string",
              "maxLength": 2,
              "description": "CAT indicator\n\n\nThis value is used to indicate the type of Cardholder Activated Terminal (CAT) indicator for this transaction. \nValid values:\n- 00 - Not a CAT Transaction\n- 01 - Limited Amount Terminal\n- 02 - Automated Dispensing Machine\n- 03 - Self-Service Terminal (AFD)\n- 04 - In-Flight Commerce\n- 05 - Internet\n- 06 - Transponder\n- 07 - Remote Indicator\n",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7
              ]
            },
            "ssl_elavon_token_indicator": {
              "type": "integer",
              "maxLength": 1,
              "description": "Elavon token indicator\n\n\nThis field is used to identify if the data in the account data field contains a token replacement value instead of the original account data.\nValid values:\n- 0 - No Elavon token used\n- 1 - The data in the account data field is an Elavon defined token value         \n",
              "enum": [
                0,
                1
              ]
            },
            "ssl_association_token_indicator": {
              "type": "string",
              "maxLength": 1,
              "description": "Association token indicator\n\n\nThis field is used to identify if the data in the account data field contains an association defined token replacement value instead of the original account data.\nValid values:\n- 0 - No association token used\n- 1 - The data in the account data field is an association defined token value          \n",
              "enum": [
                0,
                1
              ]
            },
            "ssl_mpos_acceptance_device": {
              "type": "string",
              "maxLength": 1,
              "description": "mPOS acceptance device\n\n\nThis value is used to indicate the type of mobile device used for an mPOS transaction.\nValid values:\n- 0 - Dedicated mPOS terminal with PCI compliant dongle (with or without key pad)\n- 1 - Off the shelf mobile device (Phone, Tablet, etc.)\n- Space - Not an MPOS Device          \n",
              "enum": [
                0,
                1,
                " "
              ]
            },
            "ssl_cit_mit_cof_indicator": {
              "type": "string",
              "maxLength": 3,
              "description": "Consumer Initiated (CIT) or Merchant Initiated (MIT) Credential on File transaction indicator \n\n \nIdentifies if the transaction is a Consumer Initiated (CIT) or a Merchant Initiated (MIT) Credential on File Transaction\n Valid values:\n- 000 - Not a Consumer Initiated or Merchant Initiated Credential on file transaction\n- C01 - Consumer Initiated Credential On file (Ad-hoc)\n- C02 - Consumer Initiated Standing Order\n- C03 - Consumer Initiated Subscription\n- C04 - Consumer Initiated Installment\n- M01 - Merchant Initiated Unscheduled Credential On file (Ad-hoc)\n- M02 - Merchant Initiated Standing Order\n- M03 - Merchant Initiated Subscription\n- M04 - Merchant Initiated Installment\n- M05 - Merchant Initiated Partial Shipment\n- M06 - Merchant Initiated Related/Delayed Charge\n- M07 - Merchant Initiated No Show Charge\n- M08 - Merchant Initiated Re-Submission           \n",
              "enum": [
                "000",
                "C01",
                "C02",
                "C03",
                "C04",
                "M01",
                "M02",
                "M03",
                "M04",
                "M05",
                "M06",
                "M07",
                "M08"
              ]
            }
          }
        },
        "Debit_Straight_Send_Match": {
          "title": "Debit card straight send match",
          "description": "Lowers the risk when processing original credit transactions by matching account name inquiry criteria, full name, partial or better match or no match. \n",
          "properties": {
            "ssl_first_name": {
              "type": "string",
              "maxLength": 50,
              "description": "First name on the cardholder's / customer's account or billing address."
            },
            "ssl_last_name": {
              "type": "string",
              "maxLength": 50,
              "description": "Last name on the cardholder's / customer's account or billing address."
            },
            "ssl_middle_name": {
              "type": "string",
              "maxLength": 35,
              "description": "Middle name on the cardholder's / customer's account or billing address."
            },
            "ssl_name_verification": {
              "type": "string",
              "maxLength": 4,
              "description": "- ANVF - Approves only if the account name is completely matched\n- ANVP - Approves if the account name is partially matched   \n- ANVN - Approves even if the name is matched or not    \n"
            }
          }
        },
        "Transaction_Response": {
          "title": "Response - Transaction",
          "description": "Transaction outcome",
          "properties": {
            "ssl_transaction_type": {
              "description": "Type of transaction provided in request\n"
            },
            "ssl_result": {
              "description": "Transaction outcome  \nAn ssl_result = 0 indicates an imported batch file.  \nAn ssl_result not equal to 0 indicates a declined and unauthorized transaction.\n"
            },
            "ssl_result_message": {
              "description": "Transaction result message  \n"
            },
            "ssl_issuer_response": {
              "description": "Original issuer response  \nThe issuer response returned during the authorization attempt.  \nAn ssl_issuer_response = 00 indicates success.  \nAn ssl_issuer_response = 85 indicates no reason to decline.  \nAn ssl_issuer_response = 10 or 11 indicates partial success.  \nAn ssl_issuer_response not equal to 00, 10, 11, or 85 indicates a decline or failure.  \n"
            },
            "ssl_txn_id": {
              "description": "Transaction ID  \nUnique identifier of the transaction.\n"
            },
            "ssl_txn_time": {
              "description": "Processing date and time  \nIndicates when Converge processed the transaction.  \nFormat: MM/DD/YYYY hh:mm:ss AM/PM  \nExample: 03/18/2010 10:34:10 AM \n"
            },
            "ssl_approval_code": {
              "description": "Transaction approval code  \nUnique code returned by the credit card processor that indicates the approval status of the transaction.\n"
            },
            "ssl_amount": {
              "description": "Transaction amount"
            },
            "ssl_card_number": {
              "description": "Card number as it appears on the card."
            },
            "ssl_card_short_description": {
              "description": "Short card brand name  \nValid values:  AMEX, CUP, DISC, MC, PP, VISA\n"
            },
            "ssl_card_type": {
              "description": "Card type",
              "enum": [
                "CREDITCARD",
                "DEBITCARD",
                "CASHBENEFIT",
                "CASH",
                "FOODSTAMP",
                "GIFTCARD",
                "ELECTRONICCHECK"
              ]
            },
            "ssl_promo_list": {
              "description": "Promotion list  \nThis contains a list of all promo products; the data for each promo product will be nested and embedded between beginning and ending elements ssl_promo_product up to 5 promo products. Each promo product ssl_promo_product will contain ssl_promo_code, ssl_promo_code_name, ssl_promo_code_description, and ssl_promo_code_issue_points.\n"
            },
            "ssl_par_value": {
              "description": "Payment Account Reference (PAR) from original auth"
            }
          }
        },
        "Token_Response": {
          "title": "Response - Token",
          "description": "Returned only if tokenization parameters are sent in the request.",
          "properties": {
            "ssl_token": {
              "description": "Token  \nGenerated from the credit card number.  \nReturned if transaction was approved.  \nNot returned if the transaction was failed or rejected. \n"
            },
            "ssl_token_provider": {
              "description": "Credit card token provider  \nThis code indicates the provider for the token. This value is also visible in the Converge UI.  \nValid values:  \n- P for legacy tokens  \n- V for Voltage tokens\n"
            },
            "ssl_token_response": {
              "description": "Token generation outcome  \nA value of SUCCESS indicates Converge generated the token. Other values returned are FAILURE, Action Not Permitted, Invalid Token, Not Permitted, and Acct Verification Failed.\n"
            },
            "ssl_add_token_response": {
              "description": "Add to card manager outcome  \nValid values:  \n- Card Added\n- Card Updated\n- Not Permitted \n- FAILURE - First Name - is required\n"
            },
            "ssl_association_token_data": {
              "description": "Association token indidcator \nUsed to identify if the data in the account data field contains an association defined token replacement value instead of the original account data.  \nValid values:  \n- 0 - No association token used  \n- 1 - The data in the account data field is an association defined token value   \n"
            },
            "ssl_brand_token_eligibility_indicator": {
              "description": "Identifies if the transactions is eligible for the brand tokenization services  \nValid values:  \n- 1 for token program  \n- Space for not applicable \n"
            }
          }
        },
        "TokenQuery_Response": {
          "title": "Response - token query",
          "description": "Displays information about a token",
          "properties": {
            "ssl_account_number": {
              "description": "Masked account number  \nConverge only returns the first and last 4 digits of the actual account number.  \n"
            },
            "ssl_exp_date": {
              "description": "Card's expiry date    \nDate when the card becomes invalid.  \n"
            },
            "ssl_customer_id": {
              "description": "Customer ID  \nMerchant-defined unique customer identifier.  \n"
            },
            "ssl_first_name": {
              "type": "string",
              "maxLength": 50,
              "description": "First name  \nFirst name on the cardholderâ€™s / customerâ€™s account or billing address.  \n"
            },
            "ssl_last_name": {
              "type": "string",
              "maxLength": 50,
              "description": "Last name  \nLast name on the cardholderâ€™s / customerâ€™s account or billing address.  \n"
            },
            "ssl_avs_address": {
              "type": "string",
              "maxLength": 30,
              "description": "Address line 1  \nCommonly the house number and street name on the cardholderâ€™s / customerâ€™s account or billing address.  \nAddress Verification Service (AVS) data compared with the address on the card issuerâ€™s file.  \nRecommended for hand-keyed transactions to qualify for better interchange rates.  \nRecommended if ssl_verify = **Y**.    \n"
            },
            "ssl_address2": {
              "type": "string",
              "maxLength": 30,
              "description": "Address line 2  \nApartment or condominium unit number and floor number on the cardholderâ€™s or customerâ€™s account or billing address.      \n"
            },
            "ssl_city": {
              "description": "City  \nCity name on the cardholderâ€™s / customerâ€™s account or billing address.\n"
            },
            "ssl_state": {
              "description": "State code  \nState or province code on the cardholderâ€™s / customerâ€™s account or billing address.\n"
            },
            "ssl_avs_zip": {
              "type": "string",
              "maxLength": 9,
              "description": "Postal or ZIP code  \nZIP code on the cardholderâ€™s account or billing address.  \n(AVS) data compared with the postal or ZIP code on the card issuerâ€™s file.  \nRecommended for hand-keyed transactions to qualify for better interchange rates.   \nRecommended if ssl_verify = **Y**.   \n"
            },
            "ssl_company": {
              "description": "Company name  \nCompany name on the cardholderâ€™s / customerâ€™s account or billing address. \n"
            },
            "ssl_country": {
              "description": "Country ISO code  \nCountry ISO code on the cardholderâ€™s / customerâ€™s account or billing address.\n"
            },
            "ssl_email": {
              "description": "Email address  \nThe cardholderâ€™s or customerâ€™s email address.\n"
            },
            "ssl_phone": {
              "description": "Phone  \nPhone number on the cardholderâ€™s / customerâ€™s account or billing address.       \n"
            },
            "ssl_description": {
              "description": "Merchant-defined transaction description  \nShort and custom text to describe the transaction.\n"
            }
          }
        },
        "Tip_Response": {
          "title": "Response - Tip",
          "description": "Returned only if Tip parameters are sent in the request.",
          "properties": {
            "ssl_base_amount": {
              "description": "Base amount  \nOriginal transaction amount sent in the request. Returned based on the terminal setup.\n"
            },
            "ssl_tip_amount": {
              "description": "Tip amount  \nAdded or updated tip or gratuity amount. Returned based on the terminal setup.\n"
            },
            "ssl_server": {
              "description": "Server ID  \nUnique identifier of the clerk, waiter, waitress or cashier.  \nSend if updating the server ID of the existing transaction.\n"
            },
            "ssl_shift": {
              "description": "Shift ID  \nUnique identifier of the time period, course or service type.  \nSend if updating the server ID of the existing transaction.\n"
            }
          }
        },
        "Address_Response": {
          "title": "Response - Address Verification",
          "properties": {
            "ssl_avs_response": {
              "description": "Address verification response Code  \n"
            }
          }
        },
        "CVV_Response": {
          "title": "Response - CVV",
          "description": "Returned only if CVV / CVC / CID parameters are sent in the request.",
          "properties": {
            "ssl_cvv2_response": {
              "description": "Card Verification Response Code  \n"
            },
            "ssl_response_advicecode": {
              "description": "Merchant Advice Code (MAC) response for MasterCard transactions  \nValid values:  \n- M03 - Do not try again (MasterCard)  \n- M21- Payment Cancellation (MasterCard)  \n"
            }
          }
        },
        "DCC_Response": {
          "title": "Response - DCC",
          "description": "Returned only if the terminal is set up with the dynamic currency credit card payment option.  \n",
          "properties": {
            "ssl_txn_currency_code": {
              "description": "Transaction currency code  \nThe cardholderâ€™s billing currency code.\n"
            },
            "ssl_markup": {
              "description": "Markup  \nThe markup applied to the reference exchange rate when calculating the ssl_conversion_rate value to use for converting the merchantâ€™s pricing currency to ssl_txn_currency_code.\n"
            },
            "ssl_conversion_rate": {
              "description": "Conversion rate  \nExchange rate applied to the conversion of ssl_amount.\n"
            },
            "ssl_dcc_rate_provider": {
              "description": "Currency rate provider  \nthe entity that provided currency exchange rate.\n"
            },
            "ssl_cardholder_amount": {
              "description": "Cardholder amount  \nTotal amount in the cardholderâ€™s billing currency.\n"
            },
            "ssl_cardholder_currency": {
              "description": "Cardholder currency\n"
            },
            "ssl_cardholder_base_amount": {
              "description": "Base amount  \nBase amount in the cardholder currency. Returned only if tip processing parameters are sent in the request.\n"
            },
            "ssl_cardholder_tip_amount": {
              "description": "Amount to add or update when Converge processes the original transaction as a Dynamic Currency Conversion (DCC) transaction and that the authorized amount is in the cardholderâ€™s currency.  \nTo reset or remove the original tip amount from a DCC transaction, set the value to 0.00.  \n"
            }
          }
        },
        "EMVDCCCHECK_Response": {
          "title": "Response - EMVDCCCHECK",
          "description": "Returned only if the terminal is set up with the dynamic currency credit card payment option.  \n",
          "properties": {
            "ssl_conversion_rate": {
              "description": "Exchange rate applied to the conversion of ssl_amount.\n"
            },
            "ssl_dcc_exponent": {
              "description": "The number of exponent digits in the DCC Rate.\n"
            },
            "ssl_amount": {
              "description": "Transaction amount \n"
            },
            "ssl_cardholder_amount": {
              "description": "Total amount in the cardholderâ€™s billing currency.\n"
            },
            "ssl_cardholder_currency": {
              "description": "Cardholder currency\n"
            },
            "ssl_merchant_currency": {
              "description": "Merchant currency\n"
            },
            "ssl_markup": {
              "description": "The markup applied to the reference exchange rate when calculating the ssl_conversion_rate value to use for converting the merchantâ€™s pricing currency to ssl_txn_currency_code.\n"
            },
            "ssl_dcc_rate_provider": {
              "description": "The entity that provided currency exchange rate.\n"
            },
            "ssl_dcc_token": {
              "description": "A token that will allow you to process DCC for EMV transaction types. This token is good for 5 minutes.\n"
            }
          }
        },
        "EMVKEYEXCHANGE_Response": {
          "title": "Response - EMVKEYEXCHANGE",
          "description": "Returns a collection of public keys associated to EMV applications.\n",
          "properties": {
            "ssl_transaction_type": {
              "description": "EMVKEYEXCHANGE\n"
            },
            "ssl_result": {
              "description": "Transaction result   \n- 0- no error\n- 1- error\n"
            },
            "ssl_emv_key_date": {
              "description": "EMV key date from the host month+day+year\n"
            },
            "emv_key_collection": {
              "description": "A collection of emv_key elements \nParent element of the emv_key collection.\n"
            },
            "emv_key": {
              "description": "Parent element of key definition (elements).\n"
            },
            "index": {
              "description": "location within emv_key_collection\n"
            },
            "rid": {
              "description": "value is used to identify the specific application system on the POS device\n"
            },
            "public_key_index": {
              "description": "Public key index\nIndicates the public key in conjunction with the RID.\n"
            },
            "hash_id": {
              "description": "Hash ID\nIdentifier of the hash algorithm used to produce the hash results in the digital signature scheme.\n"
            },
            "signature_id": {
              "description": "Signature ID\nIdentifier of the digital signature algorithm used with the public key.\nValue:  01 - Default \n"
            },
            "public_key": {
              "description": "Public key value\n"
            },
            "public_key_length": {
              "description": "Public key length\nA public key element used to confirm the size of the public key in the cryptography process.\n"
            },
            "exponent": {
              "description": "Exponent\nThe value of the exponent part of the public key.\n"
            },
            "checksum": {
              "description": "Checksum\nA check value calculated on the concatenation of all parts of the public key.\n"
            }
          }
        },
        "ICC_Response": {
          "title": "Response - ICC (chip card)",
          "description": "Properties returned by EMV Chip authorization.\n",
          "properties": {
            "ssl_icc_issuerscript": {
              "description": "Issuer Script\nA script returned by the issuer to be provided to the ICC card.\n"
            },
            "ssl_icc_csn": {
              "description": "Card Sequence Number\nDifferentiates multipe card data that use the same Primary Account Number (PAN)\n"
            },
            "ssl_icc_atc": {
              "description": "Application Transaction Counter\nIncrementing counter value managed by the application in the chip card.\n"
            },
            "ssl_icc_arpc": {
              "description": "Issuer Authentication Data \nContains the data sent to the chip card for online issuer authentication.\n"
            },
            "ssl_icc_cardtype": {
              "description": "Transaction Card Type\n"
            },
            "ssl_icc_cvmr": {
              "description": "Application ID\n"
            },
            "ssl_icc_app_name": {
              "description": "Application Name\n"
            },
            "ssl_icc_tvr": {
              "description": "Terminal verification result\n"
            },
            "ssl_icc_tsi": {
              "description": "Transaction status information\n"
            },
            "ssl_icc_app_arc": {
              "description": "Authorization response code     \n"
            }
          }
        },
        "PartialApproval_Response": {
          "title": "Response - Partial Approval",
          "description": "Returned only if partial approval parameters are sent in the request.  \nIf the customer indicates that they do not wish to continue with the additional tender type, the point of sale application must send a reversal to cancel this payment and reestablish the balance back to the card.  \nA reversal can be achieved by sending a ccdelete in terminal-based terminals or ccvoid in host-based terminals.\n",
          "properties": {
            "ssl_requested_amount": {
              "description": "Requested amount  \nOriginal requested amount on partial approvals.  \n"
            },
            "ssl_balance_due": {
              "description": "Remaining balance  \nThe difference between the requested amount and the authorized amount, which the merchant will collect from the customer.  \n"
            },
            "ssl_account_balance": {
              "description": "Account balance   \nAvailable balance on the card, which is 0.00 for a partially authorized transaction.  \n"
            }
          }
        },
        "CardOnFile_Response": {
          "title": "Response - Card on File",
          "description": "Returned only if Card On File parameters are sent in the request.",
          "properties": {
            "ssl_oar_data": {
              "description": "Original Authorization Response (OAR) data  \nThis data will be as received during the original authorization processing.  \nThis is a retain and return value for terminal-based settlement messages.  \nYou may store this field with the payment details from the transaction to make future Card On File transactions.  \n"
            },
            "ssl_ps2000_data": {
              "description": "PS2000  \nThis data will be as received during the original authorization processing.  \nThis is a retain and return value for terminal-based settlement messages.  \nYou must store this field with the payment details from the transaction to make future Card On File transactions.\n"
            }
          }
        },
        "Error_Response": {
          "title": "Response - Error",
          "description": "Returned only if an error occurs.",
          "properties": {
            "errorCode": {
              "description": "Error code  \nTypically, when the transaction failed validation or the request is incorrect. This will prevent the transaction from going to authorization. This is a numeric field.  \n"
            },
            "errorMessage": {
              "description": "Error message  \nDetailed explanation of the error. This field may be changed based on merchant configuration in the user interface.  \n"
            },
            "errorName": {
              "description": "Error name  \nError name or reason for the error. \n"
            }
          }
        },
        "GiftCard_Response": {
          "title": "Response - Gift Card",
          "description": "Returned only if Gift Card parameters are sent in the request.",
          "properties": {
            "ssl_account_balance": {
              "description": "Account balance   \nAvailable balance on the card, which is 0.00 for a partially authorized transaction.  \n"
            },
            "ssl_egc_tender_type": {
              "description": "Tender type\nTender type used to pay for the gift card.\nValid values:\n- 0 - Cash\n- 1 - Credit card\n- 2 - Debit card\n- 3 - Check\n",
              "enum": [
                0,
                1,
                2,
                3
              ]
            },
            "ssl_email": {
              "description": "Email address  \nThe cardholderâ€™s or customerâ€™s email address.\n"
            },
            "ssl_exp_date": {
              "description": "Card's expiry date    \nDate when the card becomes invalid.  \n"
            },
            "ssl_security_code": {
              "description": "Card security code  \nUnique verification code assigned to the cardholderâ€™s gift card account.  \n"
            }
          }
        },
        "BinLookup_Response": {
          "title": "Response - BinLook",
          "description": "Returned only if ssl_bin_lookup = Y.",
          "properties": {
            "fundingSource": {
              "description": "Funding source  \nIndicates whether this card is using credit or debit as a funding source.  \nPossible values:  \n- C - Returned if the card is a credit card.\n- D - Returned if the card is a debit card.\n"
            },
            "ssl_amount": {
              "description": "Total authorized/approved transaction amount  \nThe base amount for a transaction.\n"
            },
            "ssl_credit_surcharge_percent": {
              "description": "Credit surcharge percent   \nThe percentage of the amount in ssl_amount applied as a surcharge.\n"
            },
            "ssl_credit_surcharge_amount": {
              "description": "Credit surcharge amount  \nThe amount in USD added to ssl_amount as a surcharge.\n"
            },
            "ssl_total_amount": {
              "description": "Total amount  \nThe total of ssl_amount + ssl_credit_surcharge_amount\n"
            },
            "accountRequestStatus": {
              "description": "Account status  \nIdentifies if the account owner's name match is performed by the issuer or not, or if it is not supported. \n- Spaces - Not Applicable\n- 00 - Name match performed\n- 01 - Name match not performed\n- 02 - Name match not supported \n"
            },
            "cardNumber": {
              "description": "Card number  \nCard number field. This field is specific to binlookup operations.\n"
            },
            "debit": {
              "description": "Debit check  \nShows whether the card was a debit card.  \nPossible values:  \n- Y - Returned if the card is a debit card.\n- N - Returned if the card is not a debit card.                                                \n"
            },
            "pinless": {
              "description": "Pinless supported  \nShows whether the card supports pinless transactions.  \n- Y - Returned if the card supports pinless transactions.\n- N - Returned if the card doesnâ€™t support pinless transactions.\n"
            },
            "hsa": {
              "description": "Health savings account linked  \nShows whether the card is linked to a health savings account.  \nPossible values:  \n- Y - Returned if the card is linked to a health savings account.\n- N - Returned if the card is not linked to a health savings account.\n"
            },
            "billPaymentSupport": {
              "description": "Bill payment support  \nShows whether the card supports online bill payment.  \nPossible values:  \n- Y - Returned if the card supports online bill payment.\n- N - Returned if the card does not support online bill payment.\n"
            },
            "businessCard": {
              "description": "Business card support  \nShows whether the card supports L2, which includes customer codes and sales tax.  \nPossible values:  \n- Y - Returned if the card supports L2.\n- N - Returned if the card does not support L2.\n"
            },
            "CountryCode": {
              "description": "Country code  \nReturns the ISO country code for the card.  \nThis field is specific to binlookup operations.\n"
            },
            "dbIntechFraudInd": {
              "description": "Regulated with fraud  \nIndicates whether this card is regulated with fraud.  \nPossible values:  \n- Y - Returned if the card supports regulated with fraud.\n- N - Returned if the card does not support regulated with fraud.\n"
            },
            "ecommSupport": {
              "description": "Ecommerce supported  \nIndicates whether this card supports online, one-off transactions.  \nPossible values:  \n- Y - Returned if the card supports eCommerce.\n- N - Returned if the card does not support eCommerce.\n"
            },
            "internationalSupport": {
              "description": "International tranactions support  \nIndicates whether this card supports international transactions.  \nPossible values:  \n- Y - Returned if the card supports international transactions.\n- N - Returned if the card does not support international transactions.\n"
            },
            "networkRoutingCode": {
              "description": "Network routing code  \nIndicates the processor network for a card.  \nIf this result returns Elavon, the card is a credit card. Otherwise, the card will return the debit network the card transaction was routed over.\n"
            },
            "prepaidSupport": {
              "description": "Prepaid support  \nIndicates whether the card is a prepaid card.  \nPossible values:  \n- Y - Returned if the card is a prepaid card.\n- N - Returned if the card is not a prepaid card.\n"
            },
            "signatureSupport": {
              "description": "Signature supported  \nIndicates whether this card supports debit signature with no PIN.  \nPossible values:  \n- Y - Returned if the card supports debit signature with no PIN.\n- N - Returned if the card does not support debit signature with no PIN.\n"
            },
            "surchargeAllowed": {
              "description": "Surcharge allowed  \nIndicates whether a credit surcharge can be applied to this card.  \nPossible values:  \n- Y - Returned if a credit surcharge can be applied to this card.\n- N - Returned if a credit surcharge cannot be applied to this card.\n"
            },
            "cardProductTypeCode": {
              "description": "Code indicating the card product type.\n"
            },
            "pinlessDebitEnabled": {
              "description": "Pinless supported for debit card  \nShows whether the debit card supports pinless transactions.  \n- Y - Returned if the debit card supports pinless transactions.\n- N - Returned if the debit card doesnâ€™t support pinless transactions.\n"
            },
            "octeligible": {
              "description": "Used to identify if the transaction is eligible for a disbursement as an Original Credit Transaction (OCT).   \nPossible values:  \n- Y - Transaction is eligible for OCT Disbursement\n- N - Transaction is NOT eligible for OCT Disbursement\n"
            },
            "pinlessDebitThreshold": {
              "description": "The pinless debit threshold."
            },
            "quickServeSupport": {
              "description": "Debit Quick Serve (QSR) indicator without PIN under $50  \nThis field is specific to binlookup operations.  \n"
            },
            "institutionName": {
              "description": "The issuing bank name for China Union Pay debit cards    \nThis field is specific to binlookup operations. \n"
            },
            "firstNameResult": {
              "description": "First name result  \nIdentifies if the first name in the request matches with the file for the account owner's first name. \n- Spaces - Not Applicable\n- 01 - First name match \n- 50 - Partial match\n- 99 - No match\n"
            },
            "fullNameResult": {
              "description": "Full name result  \nIdentifies if the full name in the request matches with the file for the account owner's full name. \n- Spaces - Not Applicable\n- 01 - Full name match \n- 50 - Partial match\n- 99 - No match\n"
            },
            "lastNameResult": {
              "description": "Last name result  \nIdentifies if the last name in the request matches with the file for the account owner's last name. \n- Spaces - Not Applicable\n- 01 - Last name match \n- 50 - Partial match\n- 99 - No match\n"
            },
            "middleNameResult": {
              "description": "Middle name result  \nIdentifies if the middle name in the request matches with the file for the account owner's middle name. \n- Spaces - Not Applicable\n- 01 - Middle name match \n- 50 - Partial match\n- 99 - No match    \n"
            }
          }
        },
        "TransactionQuery_Response": {
          "title": "Response - Transaction Query",
          "description": "- Converge lists the query result in descending date/time order.\n- When the query is based on transaction ID, the query result contains one single unique transaction or lists all the product line items for level 3 transactions.\n- When the query is based on a card data parameter, Converge retrieves transactions from the Open and Settled batches that are within the last two months.\n- When the query is based on card data and date range parameters, Converge retrieves transactions from the Open and Settled batches that match the specified date range.\n- When the query returns more than a single transaction, the detailed response of each transaction will contain the original response along with the transaction status (ssl_trans_status).\n",
          "properties": {
            "ssl_user_id": {
              "type": "string",
              "maxLength": 15,
              "description": "Converge user ID    \nThe user ID with hosted payment API user status that can send transaction requests through the terminal.\n"
            },
            "ssl_result_message": {
              "description": "Transaction result message  \n"
            },
            "ssl_txn_id": {
              "description": "Transaction ID  \nUnique identifier of the transaction.\n"
            },
            "ssl_txn_time": {
              "description": "Processing date and time  \nIndicates when Converge processed the transaction.  \nFormat: MM/DD/YYYY hh:mm:ss AM/PM  \nExample: 03/18/2010 10:34:10 AM \n"
            },
            "ssl_txn_time_utc": {
              "description": "Processing date and time in UTC format  \nIndicates when Converge processed the transaction.  \nFormat: MM/DD/YYYY hh:mm:ss\n"
            },
            "ssl_txn_count": {
              "description": "Transaction count  \nNumber of transactions matching the search criteria.  \nImportant:  \n- Returned when the query is based on card data and/or date range.\n- The result can only show a maximum of 1000 unique transactions at one time.\n- If there are more than 1000 records in a batch, Converge will return the first 1000 records. \n"
            },
            "ssl_next_txn_time": {
              "description": "Transaction timestamp  \nTimestamp of the transaction in the next set when the ssl_txn_count in the batch exceeds 1000.  \nImportant:  \n- Returned when the query is based on card data and/or date range.  \n- The point-of-sale application can use this timestamp to request the next set of 1000 transactions.\n- Use the next txn time and query for the next 1000 records until all records in the settled batches are retrieved.\n"
            },
            "ssl_trans_status": {
              "description": "Transaction status   \nValid values:  \n- PEN - Pended\n- OPN - Unpended / release / open\n- REV - Review\n- STL - Settled\n- PST - Failed due to post-auth rule\n- FPR - Failed due to fraud prevention rules\n- PRE - Failed due to pre-auth rule  \n"
            },
            "ssl_service_fee_txn_time_utc": {
              "description": "Service fee processing date and time in UTC format  \nIndicates when Converge processed the service fee transaction.  \nFormat: MM/DD/YYYY hh:mm:ss\n"
            },
            "ssl_settle_time_utc": {
              "description": "Settling date and time in UTC format  \nIndicates when Converge settled the transaction.  \nFormat: MM/DD/YYYY hh:mm:ss\n"
            },
            "ssl_settlement_batch_response": {
              "description": "Main ID  \nIt can used to query a group of settled transactions from server by passing the GBOK number.  \nExample: GBOK 32910121808\n"
            },
            "ssl_entry_mode": {
              "description": "Transaction entry indicator    \nIndicates how the track data was captured.    \n**Valid values:**   \n- 01 - Manually entered - Card not present \n- 02 - Manually entered - Card present  \n- 12 - Manually - Token \n- 03 - Swiped \n- 05 - EMV (ICC) with CVV or iCVV \n- 06 - EMV (ICC) Proximity Read \n- 07 - EMV (ICC) without CVV or iCVV   \n- 08 - EMV (ICC) Magnetic stripe read when chip failed to read\n",
              "enum": [
                "01",
                "02",
                "12",
                "03",
                "05",
                "06",
                "07",
                "08"
              ]
            },
            "ssl_avs_response": {
              "description": "Address verification response code  \n"
            },
            "ssl_cvv2_response": {
              "description": "Card verification response code  \n"
            },
            "ssl_amount": {
              "description": "Total authorized/approved transaction amount  \nThe base amount for a transaction.\n"
            },
            "ssl_invoice_number": {
              "description": "Invoice/ticket number  \nUnique identifier of the invoice or ticket.  \n**Required** for eComm and MOTO transactions.\n"
            },
            "ssl_exp_date": {
              "description": "Card's expiry date    \nDate when the card becomes invalid.  \n**Format:** MMYY  \n",
              "example": "MMYY"
            },
            "ssl_recurring_batch_count": {
              "description": "Recurring batch count  \nThe current number of transactions sitting in the recurring batch after the recurring transaction has been added.\n"
            },
            "ssl_response_advicecode": {
              "description": "Merchant Advice Code (MAC) response for MasterCard transactions  \nValid values:  \n- M03 - Do not try again (MasterCard)  \n- M21- Payment Cancellation (MasterCard)  \n"
            },
            "ssl_salestax": {
              "description": "Sales tax  \nTax amount to add to the purchase or sales amount.  \nFor a tax exempt transaction, enter 0.00.  \n**Format**: Amount with 2 decimal places. \n"
            },
            "ssl_description": {
              "description": "Merchant-defined transaction description  \nShort and custom text to describe the transaction.\n"
            },
            "ssl_service_fee": {
              "description": "Service fee  \nThe service fee applied and / or refunded.\n"
            },
            "ssl_lane_number": {
              "description": "Lane number  \nA unique identifier for point of sale devices that can be passed to satisfy Mastercardâ€™s unique terminal ID requirement\n"
            },
            "ssl_approval_code": {
              "description": "Short card brand name  \nValid values:  AMEX, CUP, DISC, MC, PP, VISA\n"
            },
            "ssl_tip_amount": {
              "description": "Tip amount  \nAdded or updated tip or gratuity amount. Returned based on the terminal setup.\n"
            },
            "ssl_avs_address": {
              "type": "string",
              "maxLength": 30,
              "description": "Address line 1  \nCommonly the house number and street name on the cardholderâ€™s / customerâ€™s account or billing address.  \nAddress Verification Service (AVS) data compared with the address on the card issuerâ€™s file.  \nRecommended for hand-keyed transactions to qualify for better interchange rates.  \nRecommended if ssl_verify = **Y**.    \n"
            },
            "ssl_address2": {
              "type": "string",
              "maxLength": 30,
              "description": "Address line 2  \nApartment or condominium unit number and floor number on the cardholderâ€™s or customerâ€™s account or billing address.      \n"
            },
            "ssl_company": {
              "description": "Company name  \nCompany name on the cardholderâ€™s / customerâ€™s account or billing address.  \n"
            },
            "ssl_city": {
              "description": "City  \nCity name on the cardholderâ€™s / customerâ€™s account or billing address.\n"
            },
            "ssl_state": {
              "description": "State code  \nState or province code on the cardholderâ€™s / customerâ€™s account or billing address.\n"
            },
            "ssl_avs_zip": {
              "description": "Postal or ZIP code  \nZIP code on the cardholderâ€™s account or billing address.  \n(AVS) data compared with the postal or ZIP code on the card issuerâ€™s file.  \nRecommended for hand-keyed transactions to qualify for better interchange rates.   \nRecommended if ssl_verify = **Y**.   \n"
            },
            "ssl_country": {
              "description": "Country ISO code  \nCountry ISO code on the cardholderâ€™s / customerâ€™s account or billing address.\n"
            },
            "ssl_cardholder_currency": {
              "description": "Cardholder currency\n"
            },
            "ssl_terminal_currency": {
              "description": "Terminal currency\n"
            },
            "ssl_cardholder_amount": {
              "description": "Cardholder amount  \nTotal amount in the cardholderâ€™s billing currency.\n"
            },
            "ssl_cardholder_tip_amount": {
              "description": "Amount to add or update when Converge processes the original transaction as a Dynamic Currency Conversion (DCC) transaction and that the authorized amount is in the cardholderâ€™s currency.  \nTo reset or remove the original tip amount from a DCC transaction, set the value to 0.00.  \n**Format:** Number with 2 decimal places  \n**Important:** Only applicable to terminals set up for the Service market segment and with the dynamic currency credit payment option. \n"
            },
            "ssl_is_voidable": {
              "description": "Void indicator"
            },
            "ssl_account_balance": {
              "description": "Account balance   \nAvailable balance on the card, which is 0.00 for a partially authorized transaction.  \n"
            },
            "ssl_departure_Date": {
              "description": "Travel departure date  \nDate sent to the Merchant Airline Risk Monitoring System (MARMS) to monitor risks associated with advanced booking.  \nFormat: MM/DD/YYYY\n"
            },
            "ssl_completion_Date": {
              "description": "Travel completion date  \nDate sent to the Merchant Airline Risk Monitoring System (MARMS) to monitor risks associated with advanced booking.  \nFormat: MM/DD/YYYY\n"
            },
            "ssl_ship_to_first_name": {
              "type": "string",
              "maxLength": 50,
              "description": "Recipientâ€™s first name"
            },
            "ssl_ship_to_last_name": {
              "type": "string",
              "maxLength": 50,
              "description": "Recipientâ€™s last name"
            },
            "ssl_ship_to_company": {
              "description": "Recipientâ€™s company name"
            },
            "ssl_ship_to_address1": {
              "description": "Recipientâ€™s address line 1"
            },
            "ssl_ship_to_address2": {
              "description": "Recipientâ€™s address line 2"
            },
            "ssl_ship_to_city": {
              "description": "Recipientâ€™s city"
            },
            "ssl_ship_to_state": {
              "description": "Recipientâ€™s state code"
            },
            "ssl_ship_to_zip": {
              "description": "ZIP code  \nZIP or postal code of the destination address.\n"
            },
            "ssl_ship_to_country": {
              "description": "Country code  \nCountry ISO code of the destination address.\n"
            },
            "ssl_line_item_description": {
              "description": "Line item description \n"
            },
            "ssl_line_Item_product_code": {
              "description": "Line item product code  \nThe part or catalog number of the line item.\n"
            },
            "ssl_line_Item_commodity_code": {
              "description": "Line item commodity code  \nThe commodity code used to classify the line item.\n"
            },
            "ssl_line_Item_quantity": {
              "description": "Line item quantity  \nThe number of purchased units for the line item.\n"
            },
            "ssl_line_Item_unit_of_measure": {
              "description": "Line item measurement code  \nThe unit of measure that each line item is purchased in.\n"
            },
            "ssl_line_Item_unit_cost": {
              "description": "Line item unit cost  \nThe cost of each purchased unit for the line item.\n"
            },
            "ssl_line_Item_discount_indicator": {
              "description": "Line item discount indicator  \nIndicates whether the line item is discounted.  \n- Y - Item amount is discounted\n- N - Item amount is not discounted\n",
              "enum": [
                "Y",
                "N"
              ]
            },
            "ssl_line_Item_tax_indicator": {
              "description": "Line item tax indicator  \nIndicates whether the line item is taxable.   \n- Y - Item amount is taxable\n- N - Item amount is not taxable\n",
              "enum": [
                "Y",
                "N"
              ]
            },
            "ssl_line_item_discount_amount": {
              "description": "Discount amount  \nThe discount amount for the entire line item.\n"
            },
            "ssl_line_Item_tax_rate": {
              "description": "Line item tax rate"
            },
            "ssl_line_Item_tax_amount": {
              "description": "Line item tax amount    \nThe tax amount for each purchased unit\n"
            },
            "ssl_line_Item_tax_type": {
              "description": "Line item tax type  \nThe type of tax applied to the line item.\n"
            },
            "ssl_line_Item_extended_total": {
              "description": "Line item extended amount  \nThe total cost of the line item for the detail record.  \n**Computation Rule:** Quantity x Unit Price\n"
            },
            "ssl_line_Item_total": {
              "description": "Line Item Total Amount"
            }
          }
        },
        "EODSummary_Response": {
          "title": "Response - End of Day Summary",
          "description": "Users must have the batches-view transactions user right in order to request a summary.  \nThis transaction will not return pended, set to review, or auth only transactions.\n",
          "properties": {
            "ssl_result": {
              "description": "Transaction outcome  \nAn ssl_result = 0 indicates an imported batch file.  \nAn ssl_result not equal to 0 indicates a declined and unauthorized transaction.\n"
            },
            "ssl_result_message": {
              "description": "Transaction result message  \n"
            },
            "ssl_txn_main_count": {
              "description": "Total transaction count in main batch"
            },
            "ssl_txn_main_amount": {
              "description": "Total transaction amount in main batch"
            },
            "ssl_txn_cash_count": {
              "description": "Total cash amount in cash batch"
            },
            "ssl_txn_cash_amount": {
              "description": "Recipientâ€™s state code"
            },
            "ssl_txn_ecg_count": {
              "description": "Total gift card count in gift batch"
            },
            "ssl_txn_ecg_amount": {
              "description": "Total gift card amount in gift batch"
            }
          }
        },
        "Settlement_Response": {
          "title": "Response - Settlment",
          "description": "Funds will be moved from the customerâ€™s account to the merchant account once the batch is successfully settled.",
          "properties": {
            "ssl_result": {
              "description": "Transaction outcome  \nAn ssl_result = 0 indicates an imported batch file.  \nAn ssl_result not equal to 0 indicates a declined and unauthorized transaction.\n"
            },
            "ssl_result_message": {
              "description": "Transaction result message  \n"
            },
            "ssl_txn_id": {
              "description": "Transaction ID  \nUnique identifier of the transaction.\n"
            },
            "ssl_txn_time": {
              "description": "Processing date and time  \nIndicates when Converge processed the transaction.  \nExample: 03/18/2010 10:34:10 AM \n"
            },
            "ssl_txn_main_count": {
              "description": "Total transaction count in main batch"
            },
            "ssl_txn_main_amount": {
              "description": "Total transaction amount in main batch"
            },
            "ssl_txn_cash_count": {
              "description": "Total cash amount in cash batch"
            },
            "ssl_txn_cash_amount": {
              "description": "Recipientâ€™s state code"
            },
            "ssl_txn_ecg_count": {
              "description": "Total gift card count in gift batch"
            },
            "ssl_txn_ecg_amount": {
              "description": "Total gift card amount in gift batch"
            },
            "ssl_settlement_batch_id": {
              "description": "Batch ID  \nThis is a user-defined ID used to query a group of settled transaction from API.\n"
            },
            "ssl_settlement_correlation_id": {
              "description": "Correlation ID  \nSpecifies the number of transactions processed from eMoney. This is a user-defined ID which has specific format used to query settled transaction.\n- Characters with four hyphens\n"
            }
          }
        },
        "Settlement_Query": {
          "title": "Response - Settlement Query",
          "description": "Funds will be moved from the customerâ€™s account to the merchant account once the batch is successfully settled.",
          "properties": {
            "ssl_result": {
              "description": "Transaction outcome  \nAn ssl_result = 0 indicates an imported batch file.  \nAn ssl_result not equal to 0 indicates a declined and unauthorized transaction.\n"
            },
            "batch": {
              "description": "batch ID  \nUnique identifier of the batch.\n"
            },
            "settleddate_utc": {
              "description": "Settled date and time in UTC format  \nIndicates when Converge settled the transaction.  \nFormat: MM/DD/YYYY hh:mm:ss\n"
            },
            "settleddate": {
              "description": "Settled date and time  \nIndicates when Converge settled the transaction.  \nFormat: MM/DD/YYYY hh:mm:ss  \nExample: 09/28/2021 02:09:10\n"
            },
            "ssl_settlement_batch_response": {
              "description": "Main ID  \nIt can used to query a group of settled transactions from server by passing the GBOK number.  \nExample: GBOK 32910121808\n"
            },
            "ssl_settlement_batch_id": {
              "description": "Batch ID  \nThis is a user-defined ID used to query a group of settled transaction from API.\n"
            }
          }
        },
        "Paper_Check_Response": {
          "title": "Response - paper check",
          "description": "Returned only if paper check parameters are sent in the request.",
          "properties": {
            "ssl_aba_number": {
              "description": "Routing or transit number  \nUnique code assigned to the bank to be able to send and receive funds from other financial institutions.\n"
            },
            "ssl_bank_account_number": {
              "type": "integer",
              "maximum": 16,
              "description": "Bank account number  \nUnique identifier of the checking account.\n"
            },
            "ssl_check_number": {
              "type": "integer",
              "description": "Check number  \n"
            },
            "ssl_micr_data": {
              "type": "string",
              "description": "Unformatted Magnetic Ink Character Recognition (MICR) data  \nThe exact MICR line from the check including the spaces and symbols. Replace the symbols with the following letters:  \n- T - Transit symbol\n- O - On-US symbol\n- A - Amount symbol\n- D - Dash symbol\n"
            },
            "ssl_drivers_license_number": {
              "type": "string",
              "description": "Drivers license number\n"
            },
            "ssl_drivers_license_phone_number": {
              "type": "integer",
              "description": "Phone number\n"
            },
            "ssl_drivers_license_state": {
              "type": "string",
              "description": "State code\n"
            }
          }
        },
        "ACH_Response": {
          "title": "Response - ACH",
          "description": "Returned only if ACH parameters are sent in the request.",
          "properties": {
            "ssl_aba_number": {
              "description": "Routing or transit number  \nUnique code assigned to the bank to be able to send and receive funds from other financial institutions.\n"
            },
            "ssl_bank_account_number": {
              "type": "integer",
              "maximum": 16,
              "description": "Bank account number  \nUnique identifier of the checking account.\n"
            },
            "ssl_bank_account_type": {
              "description": "Bank account type  \nIndicates the type of checking account.  \n- 0 - Personal\n- 1 - Business \n",
              "enum": [
                0,
                1
              ]
            },
            "ssl_first_name": {
              "type": "string",
              "maxLength": 50,
              "description": "First name  \nFirst name on the cardholderâ€™s / customerâ€™s account or billing address.  \n"
            },
            "ssl_last_name": {
              "type": "string",
              "maxLength": 50,
              "description": "Last name Last name on the cardholderâ€™s / customerâ€™s account or billing address."
            },
            "ssl_company": {
              "description": "Company name  \nCompany name on the cardholderâ€™s / customerâ€™s account or billing address. \n"
            },
            "ssl_description": {
              "description": "Merchant-defined transaction description  \nShort and custom text to describe the transaction. \n"
            }
          }
        },
        "AccountUpdate_Response": {
          "title": "Response - account update",
          "properties": {
            "ssl_card_type": {
              "type": "string",
              "maxLength": 10,
              "description": "Card type",
              "enum": [
                "CREDITCARD",
                "DEBITCARD",
                "CASHBENEFIT",
                "CASH",
                "FOODSTAMP",
                "GIFTCARD",
                "ELECTRONICCHECK"
              ]
            },
            "ssl_date_updated": {
              "description": "Update date  \nThe date when the account was updated. \n"
            },
            "ssl_token_group_id": {
              "description": "Token group ID  \nThe unique identifier of the token group to which the search result belongs.  \n"
            },
            "ssl_old_token": {
              "description": "Previous token ID  \nThe previous token ID of the account.  \n"
            },
            "ssl_new_token": {
              "description": "New token ID  \nThe new token ID of the account. \n"
            },
            "ssl_new_account_closed": {
              "description": "Closed account indicator  \nIndicates that the account is closed.  \n"
            },
            "ssl_new_account_prefix": {
              "description": "New account prefix  \nThe new prefix for the account.  \n"
            },
            "ssl_new_account_suffix": {
              "description": "New account suffix  \nThe new suffix for the account.  \n"
            },
            "ssl_new_exp_date": {
              "description": "New expiry date  \nThe updated expiry date for the account.  \n"
            },
            "ssl_old_account_closed": {
              "description": "Closed date  \nClose date for account prior to update.  \n"
            },
            "ssl_old_account_prefix": {
              "description": "Old account prefix  \nThe prefix of the account prior to the update.  \n"
            },
            "ssl_old_account_suffix": {
              "description": "Old account suffix  \nThe suffix of the account prior to the update.  \n"
            },
            "ssl_old_exp_date": {
              "description": "Old expiry date  \nThe expiry date of the account prior to the update.  \n"
            },
            "ssl_next_page": {
              "description": "Next page  \nIf this field is returned, there is another page of results in the query.  \nYou can use the integer returned by this field as the ssl_page_number value in a subsequent request.  \n"
            },
            "ssl_page_number": {
              "type": "integer",
              "description": "Page number  \nThe page number for queries that yield more than 1000 results.  \nDefault value: 1\n"
            },
            "ssl_status_code": {
              "description": "Account status  \nValid values:  \n- A - Account information updated\n- B - Expiry date updated\n- C - Account closed\n- D - Contact customer\n- G - Non-participating BIN\n",
              "enum": [
                "A",
                "B",
                "C",
                "D",
                "G"
              ]
            }
          }
        },
        "BatchImportQuery_Response": {
          "title": "Response - batch import query",
          "properties": {
            "ssl_file_name": {
              "description": "Name of the batch file  \nValid file extensions are CSV and XML.\n"
            },
            "ssl_status": {
              "description": "Transaction result message  \nValid values:  \n- C- Complete transactions\n- E- Error transactions\n"
            },
            "ssl_user_id": {
              "type": "string",
              "maxLength": 15,
              "description": "Converge user ID    \nThe user ID with hosted payment API user status that can send transaction requests through the terminal.\n"
            },
            "ssl_file_type": {
              "description": "Type of the imported batch file  \nImportant:    \n- Recurring batch import creates templates for future recurring transactions\n- Token batch import accepts a file of card numbers and returns tokens\n- Card Transactions batch import  \n"
            },
            "ssl_start_date": {
              "description": "Start date of the batch import  \nFormat: YYYY-MM-DD hh:mm:ss  \nExample: 2022-06-13 14:58:45.0  \n"
            },
            "ssl_end_date": {
              "description": "End date of the batch import  \nFormat: YYYY-MM-DD hh:mm:ss  \nExample: 2022-06-13 14:58:45.0  \n"
            },
            "ssl_total": {
              "description": "Total number of transactions in the batch"
            },
            "ssl_approved": {
              "description": "Number of approved transactions"
            },
            "ssl_failed": {
              "description": "Number of failed/declined transactions"
            },
            "ssl_card": {
              "description": "Masked card number"
            },
            "ssl_recurring_id": {
              "description": "Recurring ID  \nUnique identifier of the recurring record.  \nRequired for existing recurring transactions.\n"
            },
            "ssl_exp_date": {
              "description": "Card's expiry date    \nDate when the card becomes invalid.  \n**Format:** MMYY  \n",
              "example": "MMYY"
            },
            "ssl_avs_response": {
              "description": "Address verification response code  \n"
            },
            "ssl_card_type": {
              "description": "Card type",
              "default": "Credit",
              "enum": [
                "Credit",
                "Debit"
              ]
            },
            "ssl_token_response": {
              "description": "Token generation outcome  \nA value of SUCCESS indicates Converge generated the token. Other values returned are FAILURE, Action Not Permitted, Invalid Token, Not Permitted, and Acct Verification Failed.\n"
            },
            "ssl_result": {
              "type": "string",
              "maxLength": 1,
              "description": "Name of the batch file  \nValid file extensions are CSV and XML.\n"
            },
            "ssl_message": {
              "description": "Error name if there was an error."
            },
            "ssl_error_code": {
              "description": "Error code  \nTypically, when the transaction failed validation or the request is incorrect. This will prevent the transaction from going to authorization. This is a numeric field.  \n"
            }
          }
        },
        "BatchImport_Response": {
          "title": "Response - Batch Import Credit Card",
          "description": "The response simply indicates if the file upload was successful or not. Transactions in the file will be sent for authorization and are shown in the appropriate batches in the User Interface. The import response files can be viewed and downloaded from the User Interface.",
          "properties": {
            "ssl_result": {
              "description": "Transaction outcome  \nAn ssl_result = 0 indicates a successful transaction.  \nAn ssl_result = 1 indicates an unsuccessful batch file import.\n"
            },
            "ssl_result_message": {
              "description": "Transaction result message  \nA ssl_result_message = File upload successful indicates a successful file import.  \nA ssl_result_message = File upload failed indicates an unsuccessful file import.\n"
            },
            "ssl_user_id": {
              "type": "string",
              "maxLength": 15,
              "description": "Converge user ID    \nThe user ID with hosted payment API user status that can send transaction requests through the terminal.\n"
            },
            "ssl_number_trans": {
              "description": "Transaction count  \nThe number of transactions imported from the file. \n"
            },
            "ssl_response_file": {
              "description": "Response file name"
            },
            "errorCode": {
              "description": "Error code  \nTypically, when the transaction failed validation or the request is incorrect. This will prevent the transaction from going to authorization. This is a numeric field.  \n"
            },
            "errorMessage": {
              "description": "Error message  \nDetailed explanation of the error. This field may be changed based on merchant configuration in the user interface.  \n"
            },
            "errorName": {
              "description": "Error name  \n"
            }
          }
        },
        "TokenImport_Response": {
          "title": "Response - Token Import",
          "description": "The response simply indicates if the file upload was successful or not. Transactions in the file will be sent for tokenization and are shown in the appropriate batches in the User Interface. The import response files can be viewed and downloaded from the User Interface.",
          "properties": {
            "ssl_result": {
              "description": "Transaction outcome  \nAn ssl_result = 0 indicates an imported batch file.  \nAn ssl_result not equal to 0 indicates a declined and unauthorized transaction.\n"
            },
            "ssl_result_message": {
              "description": "Transaction result message  \nA ssl_result_message = File upload successful indicates a successful file import.  \nA ssl_result_message = File upload failed indicates an unsuccessful file import.\n"
            },
            "ssl_user_id": {
              "description": "Converge user ID    \nThe user ID with hosted payment API user status that can send transaction requests through the terminal.\n"
            },
            "ssl_number_trans": {
              "description": "Transaction count  \nThe number of transactions imported from the file. \n"
            },
            "ssl_response_file": {
              "description": "Response file name"
            },
            "errorCode": {
              "description": "Error code  \nTypically, when the transaction failed validation or the request is incorrect. This will prevent the transaction from going to authorization. This is a numeric field.  \n"
            },
            "errorMessage": {
              "description": "Error message  \nDetailed explanation of the error. This field may be changed based on merchant configuration in the user interface.  \n"
            },
            "errorName": {
              "description": "Error name  \nError name or reason for the error.  \n"
            }
          }
        },
        "TerminalSetup_Response": {
          "title": "Response - Terminal Setup",
          "properties": {
            "MerchantInformation": {
              "type": "object",
              "properties": {
                "MerchantName": {
                  "description": "The name of the merchant"
                },
                "Address1": {
                  "description": "Address line 1"
                },
                "Address2": {
                  "description": "Address line 2"
                },
                "City": {
                  "description": "Cityâ€™s name"
                },
                "StateProvince": {
                  "description": "State code/province code"
                },
                "PostalCode": {
                  "description": "ZIP or postal code"
                },
                "ContactName": {
                  "description": "Contactâ€™s name"
                },
                "ContactPhone1": {
                  "description": "Contactâ€™s primary phone number"
                },
                "ContactPhone2": {
                  "description": "Contactâ€™s alternate phone number 2"
                },
                "ContactEmail": {
                  "description": "Contactâ€™s email address"
                },
                "TerminalEmail": {
                  "description": "Terminalâ€™s email address"
                },
                "SMSEmail": {
                  "description": "Merchantâ€™s email address"
                },
                "MerchantURL": {
                  "description": "URL address"
                },
                "BOSLanguage": {
                  "description": "Business default language"
                },
                "POSLanguage": {
                  "description": "POS default language"
                }
              }
            },
            "TerminalInformation": {
              "type": "object",
              "properties": {
                "vm_friendly_name": {
                  "description": "Terminal name as set up by Elavon\n"
                },
                "vm_region": {
                  "description": "Region of business"
                },
                "vm_time_zone": {
                  "description": "Time zone"
                },
                "vm_currency": {
                  "description": "ISO currency code"
                },
                "vm_market_segment": {
                  "description": "Market segment"
                },
                "vm_status": {
                  "description": "Terminal status  \nExamples:  ACTIVE, NOT LIVE, or SUSPENDED\n"
                },
                "vm_processing_type": {
                  "description": "Processing type  \nTerminal-based Only\n"
                },
                "LegalName": {
                  "description": "N/A"
                },
                "LegalAddress1": {
                  "description": "N/A"
                },
                "LegalCity": {
                  "description": "N/A"
                },
                "LegalState": {
                  "description": "N/A"
                },
                "LegalCountry": {
                  "description": "N/A"
                },
                "LegalPostalCode": {
                  "description": "N/A"
                },
                "ClientGroup": {
                  "description": "N/A"
                },
                "KYC": {
                  "type": "object",
                  "properties": {
                    "VendorId": {
                      "description": "Vendor ID"
                    },
                    "InterfaceMethod": {
                      "description": "Interface method\nExamples - (INT) Integration, (MU) Merchant UI, (BOTH) Both\n"
                    },
                    "IntegrationMethod": {
                      "description": "Integration method\nExamples - (DI) Direct Integration, (SC) Shopping Cart, (MDS) Merchant developed Software, (SP) Software Provider\n"
                    }
                  }
                },
                "XML_EMV_KeyExchange": {
                  "description": "Requests EMV keys to update the devices. It is performed intitally to get the EMV key when   \n- An EMV chip sale (emvchipsale) transaction response returns an `ssl_update_emv_keys` value of 'Y'\n- An EMV chip auth only (emvchipauthonly) transaction response returns an `ssl_update_emv_keys` value of 'Y'\n- An EMV swipe sale (emvswipesale) transaction response returns an `ssl_update_emv_keys` value of 'Y'\n"
                },
                "vm_payment_types": {
                  "description": "Payment types  \nIndicates if the terminal is set up (Y) or not set up (N) for these payment types:  \n- Credit - Credit card\n- Debit - Debit card\n- Gift - Gift card\n- ECheck - Electronic check\n- FoodStamp - Food stamp card\n- CashBenefit - Cash benefit card\n- Cash - Cash\n- Loyalty (Not Applicable)\n- CashAdvance - Cash advance\n"
                },
                "vm_card_brands": {
                  "description": "Card brand indicator  \nIndicates if the terminal is set up to accept payments from specific card brands.  \nValid values:  \n- Y - Set up to accept payment from card brand\n- N - Not set up to accept payment from card brand\n"
                },
                "vm_credit_option": {
                  "description": "Credit card payment option indicator  \nIndicates if the terminal is set up (Y) or not set up (N) for these credit card payment options:  \n- AVS - Address verification service\n- CVN - Card verification\n- Purchase card - Purchase card\n- DCC - Dynamic currency conversion\n- MCC - Multi-currency conversion\n- Recurring - Recurring\n- Last4digits - Last 4 digits\n- TravelData - Travel data\n- AccountUpater - Account updater\n- CreditSurcharge - Surcharge enabled\n- CreditSurchargePercent - Percentage of original transaction\n- Service_Fees\n  - ServiceFeeEnabled - Service feee enabled\n  - ServiceFeeType - By amount(a) or percentage(p)\n  - ServiceFeeValue - Default value\n  - ServiceFeeRefundable Is service fee refundable\n- VisaAcquirerBIN\n- MCAcquirerBIN\n"
                },
                "vm_level3": {
                  "description": "Set up (Y) or not set up (N) for level3 transactions"
                },
                "vm_threeDS": {
                  "description": "Set up (Y) or not set up (N) for 3D secure check"
                },
                "vm_catalog": {
                  "description": "Set up (Y) or not set up (N) for product catalog"
                },
                "vm_dba": {
                  "description": "Set up (Y) or not set up (N) for dynamic \"doing business as\""
                },
                "vm_payfac": {
                  "description": "Set up (Y) or not set up (N) for payment facilitator"
                },
                "vm_healthcare": {
                  "description": "Set up (Y) or not set up (N) for healthcare fields"
                },
                "vm_recurring_option": {
                  "description": "Default recurring options  \nValues:  \n- Frequency - billing cycle\n- Payments - Number of payments\n"
                },
                "vm_debit_option": {
                  "description": "Debit card payment options  \nIndicates the terminalâ€™s default debit card payment setup:  \n- Cashback - Set up (Y) or not set up (N) for cashback\n- cashbackmaxamount - Maximum cashback amount\n- Surcharge - Set up (Y) or not set up (N) for surcharge\n- SurchargeAmount - Surcharge amount\n- PinlessDebitEnabled - Set up (Y) or not set up (N) for pinless debit\n- OCTDisbursement - Set up (Y) or not set up (N) for OCT disbursement\n- OCTBusinessAppID\n- DBPreAuth - Set up (Y) or not set up (N) for debit auth only\n- AuthLifCycleIndicator - Auth lifecycle (units)\n  values: 0 = no time, 1 = Days, 2= Hours, 3 = Minutes\n- AuthLifCycleDuration - number of units based on indicator.\n"
                },
                "vm_echeck_option": {
                  "description": "Electronic check options  \nIndicates the terminalâ€™s default electronic check setup:  \n- CheckType - Check type\n  - ACHECHECK\n  - PAPERCHECK\n- TransactionType - Check transaction option\n   Examples:  CONVERSIONONLY, VERIFICATION, or GUARANTEE\n- ImageUploadOption - Image upload option for paper check\n- Recurring - Set up (Y) or not set up (N) for ACH recurring\n"
                },
                "vm_transaction_entry": {
                  "description": "API option  \nIndicates the terminalâ€™s default API setup:  \n- EnableHTTPSTransaction - Set up (Y) or not set up (N) for API\n- EnableHTTPSBatch - Set up (Y) or not set up (N) for batch import API\n- EnableVMM - Set up (Y) or not set up (N) for Converge mobile\n"
                },
                "vm_tokenization": {
                  "description": "Tokenization option  \nIndicates if the terminal is set up (Y) or not set up (N) for tokenization.\n"
                },
                "vm_gift_loyalty_option": {
                  "description": "- security_code\n"
                },
                "cvm_options": {
                  "description": "- cvm_signature (signature capture)\n"
                },
                "pinless_debit_threshold": {
                  "description": "Max value to be processed as debit, otherwise processed as credit"
                },
                "msd_contactless_enabled": {
                  "description": "Set up (Y) or not set up (N) for contactless"
                },
                "vm_export_script": {
                  "description": "Set up (Y) or not set up (N) for export script"
                },
                "vm_billing_invoice": {
                  "description": "- billingInvoicingEnabled - Set up (Y) or not set up (N) for billing and invoice\n- billingMerchantId -  Merchant id for billing and invoice\n"
                },
                "vm_wallet": {
                  "description": "Supported wallets\n- MasterPass (Click to Pay)\n- VisaCheckout (Not supported)\n- PayPal\n- ApplePay     \n"
                }
              }
            }
          }
        },
        "PaymentFields_Response": {
          "title": "Response - payment field",
          "description": "- The response contains the root XML beginning and ending element &#60;txn&#62;.  \n- Within the &#60;txn&#62; element, section information is presented. Data for each section will be nested and embedded between the beginning element &#60;Section&#62; and the ending element &#60;/Section&#62;. There can be more than 1 Section elements.  \n- Within each Section element, fields are presented. Data for each field resides between the beginning element &#60;Field&#62; and the ending ending &#60;/Field&#62;. There can be more than 1 Field elements.\n",
          "properties": {
            "Section": {
              "type": "object",
              "properties": {
                "Name": {
                  "description": "Section name as configured by Converge               \n"
                },
                "DisplayName": {
                  "description": "Section label as configured by the merchant                \n"
                },
                "ShowinVT": {
                  "description": "Show section under payment menu  \nIndicates if the section appears (Y>) or does not appear (N) under the payment menu of the virtual terminal.\n"
                },
                "ShowOnPaymentForm": {
                  "description": "Show section on payment form  \nIndicates if the section appears (Y) or does not appear (N) on the payment page under the payment menu.\n"
                },
                "ShowinReceipt": {
                  "description": "Show section on receipt  \nIndicates if the section appears (Y) or does not appear (N) on the receipt.\n"
                },
                "CustomerEmail": {
                  "description": "Show customer email in section  \nIndicates if the customerâ€™s email address appears (Y) or does not appear (N) in the section.\n"
                },
                "MerchantEmail": {
                  "description": "Show merchant email in section  \nIndicates if the merchantâ€™s email address appears (Y) or does not appear (N) in the section.\n"
                },
                "Field": {
                  "description": "Field data elements  \n- Name - Field name\n- DisplayName - Field label\n- Section - Section in which the field appears.\n- FieldType - Data type\n- Min - Minimum length\n- Max - Maximum length\n- Required - Indicates if the field is mandatory (Y) or optional (N)\n- ChangedOnPaymentForm - Indicates if the field is editable (Y or non-editable (N) in the payment form of the virtual terminal.\n- ShowonPaymentForm - Indicates if the field appears (Y) or does not appear (N) on the payment page.\n- ShowinReceipt - Indicates if the field appears (Y) or does not appear (N) on the receipt.\n- CustomerEmail - Indicates if the field appears (Y) or does not appear (N) in the customerâ€™s email.\n- MerchantEmail - Indicates if the field appears (Y) or does not appear (N) in the merchantâ€™s email.\n- ForwardOnApproval - Indicates if the field is forwarded (Y) or not forwarded (N) on approvals.\n- ForwardOnDecline - Indicates if the field is forwarded (Y) or is not forwarded (N) on declines.\n- SystemField - Indicates if the field is a system field (Y) or a custom field (N).\n"
                }
              }
            }
          }
        },
        "PrinterSetup_Response": {
          "title": "Response - printer setup",
          "properties": {
            "PrinterOptions": {
              "type": "object",
              "properties": {
                "PrinterType": {
                  "description": "Printer type\n- No Printer\n- Serial printer\n"
                },
                "PaperType": {
                  "description": "Paper type\n- Single ply\n- Multi ply\n"
                }
              }
            },
            "ReceiptHeaderOptions": {
              "type": "object",
              "properties": {
                "Justification": {
                  "description": "Alignment of header on the receipt\n- Left\n- Center\n- Right\n"
                },
                "HeaderLine1": {
                  "description": "First line of the header"
                },
                "HeaderLine2": {
                  "description": "Second line of the header"
                },
                "HeaderLine3": {
                  "description": "Third line of the header"
                },
                "HeaderLine4": {
                  "description": "Forth line of the header"
                },
                "HeaderLine5": {
                  "description": "Fifth line of the header"
                }
              }
            },
            "ReceiptFooterOptions": {
              "type": "object",
              "properties": {
                "Justification": {
                  "description": "Alignment of trailer or footer\n - Left\n - Center\n - Right\n"
                },
                "TrailerLine1": {
                  "description": "First line of the trailer or footer"
                },
                "TrailerLine2": {
                  "description": "Second line of the trailer or footer"
                },
                "TrailerLine3": {
                  "description": "Third line of the trailer or footer"
                },
                "TrailerLine4": {
                  "description": "Fourth line of the trailer or footer"
                },
                "TrailerLine5": {
                  "description": "Fifth line of the trailer or footer"
                }
              }
            },
            "ReceiptCustomFieldsOptions": {
              "type": "object",
              "properties": {
                "CustomLabel1": {
                  "description": "First custom field label to appear on the receipt."
                },
                "CustomField1": {
                  "description": "First custom field to appear on the receipt."
                },
                "CustomLabel2": {
                  "description": "Second custom field label to appear on the receipt."
                },
                "CustomField2": {
                  "description": "Second custom field to appear on the receipt."
                },
                "CustomLabel3": {
                  "description": "Third custom field label to appear on the receipt."
                },
                "CustomField3": {
                  "description": "Third custom field to appear on the receipt."
                },
                "CustomLabel4": {
                  "description": "Fourth custom field label to appear on the receipt."
                },
                "CustomField4": {
                  "description": "Fourth custom field to appear on the receipt."
                },
                "CustomLabel5": {
                  "description": "Fifth custom field label to appear on the receipt."
                },
                "CustomField5": {
                  "description": "Fifth custom field to appear on the receipt."
                }
              }
            }
          }
        }
      }
    }
  }